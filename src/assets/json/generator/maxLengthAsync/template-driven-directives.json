{"rightSidebarLinks":[{"id":"maxlengthasync","title":"maxLengthAsync","subLink":null},{"id":"whentouse","title":"When to use","subLink":[]},{"id":"basicmaxlengthasyncvalidation","title":"Basic maxLengthAsync Validation","subLink":[]},{"id":"validatorconfig","title":"ValidatorConfig","subLink":[{"title":"message","id":"message","thirdLevelLink":[]},{"title":"messageKey","id":"messagekey","thirdLevelLink":[]},{"title":"value","id":"value","thirdLevelLink":[]}]},{"id":"completemaxlengthasyncexample","title":"Complete maxLengthAsync Example","subLink":[]}],"title":"maxLengthAsync","description":"maxLengthAsync validation  template driven  will allow user to enter the input upto the maximum length value parameter.","validatorType":"template-driven","validationTypeTitle":"Template Driven","type":"tabs","gitDocPath":"https://github.com/rxweb/rxweb.io/edit/master/docs/angular/reactive-forms/reactive-form-validators/async-validators/maxLengthAsync.md","category":"async-validators","subCategory":null,"linkTitle":"maxLengthAsync","tabArray":{"complete":[{"tabName":"Example","tabGroupContent":null,"content":"<div component=\"app-example-runner\" ref-component=\"app-maxLengthAsync-complete\"></div>\r\n"},{"tabName":"Model","tabGroupContent":null,"content":"<div component=\"app-code\" key=\"maxLengthAsync-complete-model\"></div> \r\n"},{"tabName":"Component","tabGroupContent":null,"content":"<div component=\"app-code\" key=\"maxLengthAsync-complete-component\"></div> \r\n"},{"tabName":"Html","tabGroupContent":null,"content":"<div component=\"app-code\" key=\"maxLengthAsync-complete-html\"></div> \r\n"}]},"innerHtml":null,"htmlContent":"<div class=\"title-bar top_title\"><p>maxLengthAsync</p></div> <div class=\"title-bar\"><p>maxLengthAsync validation  template driven  will allow user to enter the input upto the maximum length value parameter asynchronously.</p></div>\r\n<div class='row page-section' id= 'whentouse'>\r\n<div class='col-lg-12'>\r\n<h2 class='showHideElement' >When to use<a title='Link to this heading' class='link-header' href='/async-validators/maxLengthAsync/template-driven/directives#whentouse'><i class='fa fa-link'></i></a></h2>\r\n\r\n<p class='showHideElement' >Suppose you want to create a User form, which contains fields like FirstName, LastName, Username and you want the user to enter any string which should not exceed maximum length asynchronously. Here depending upon the requirement these scenarios may arise.</p>\r\n<ol class='showHideElement'>\r\n\t<li>Allow string less than 16 characters in FirstName.</li>\r\n\t<li>Apply maxLengthAsync validation based on matched condition in the form, like if the FirstName is <span class='highlighted'>john</span>, then only the maxLengthAsync validation will be  applied to LastName field.</li> \r\n\t<li>Adding Custom Message on Username Field.</li>\r\n  <li>Shows the custom message on <span class='highlighted'>Full Name</span> field by using <span class='highlighted'>messageKey</span> property.</li>\r\n  <data-scope scope=\"['decorator','validator']\">\r\n \t  <li>Apply maxLengthAsync validation dynamically based on server rules.</li>\r\n  </data-scope>\r\n</ol>\r\n<p class='showHideElement' >Letâ€™s see how maxLengthAsync validator fulfil the need.</p>\r\n</div></div>\r\n<div class='row page-section' id= 'basicmaxlengthasyncvalidation'>\r\n<div class='col-lg-12'>\r\n<h2>Basic maxLengthAsync Validation<a title='Link to this heading' class='link-header' href='/async-validators/maxLengthAsync/template-driven/directives#basicmaxlengthasyncvalidation'><i class='fa fa-link'></i></a></h2>\r\n\r\n<p class='showHideElement' >First we need to create a User class and define a property of FirstName in the model to achieve the functional need of point 1.</p>\r\n<div component=\"app-code\" key=\"maxLengthAsync-add-model\"></div> \r\n<p class='showHideElement' >Through Angular FormBuilder service we create FormGroup in the component.</p>\r\n<p class='showHideElement' >Here we have covered Add form operations. </p>\r\n<div component=\"app-code\" key=\"maxLengthAsync-add-component\"></div> \r\n<p class='showHideElement' >Next, we need to write html code.</p>\r\n<div component=\"app-code\" key=\"maxLengthAsync-add-html\"></div> \r\n<div component=\"app-example-runner\" ref-component=\"app-maxLengthAsync-add\"></div>\r\n</div></div>\r\n<div class='row page-section' id= 'validatorconfig'>\r\n<div class='col-lg-12'>\r\n<h2>ValidatorConfig<a title='Link to this heading' class='link-header' href='/async-validators/maxLengthAsync/template-driven/directives#validatorconfig'><i class='fa fa-link'></i></a></h2>\r\n\r\n<p class='showHideElement' >Type : <span class='highlighted'>Observable</span></p>\r\n<p class='showHideElement' >validator config is used to dynamically resolve the value of the property according to the server rules by using the keyword <span class='highlighted'>of</span> as below </p>\r\n<p class='showHideElement' >Below options are not mandatory to use in the <span class='highlighted'>maxLengthAsync</span> validation. If needed then use the below options.</p>\r\n<table class=\"table table-bordered table-striped showHideElement\">\r\n<tr><th>Option</th><th>Description</th></tr>\r\n<tr><td><a   (click)='scrollTo(\"#message\")' title=\"message\">message</a></td><td>To override the global configuration message and set the custom error message on respective FormControl</td></tr>\r\n<tr><td><a (click)='scrollTo(\"#messageKey\")' title=\"messageKey\">messageKey</a></td><td>messageKey property of BaseConfig can be used when the user wants to show a different custom validation message on some of their fields. User can define a custom messageKey globally by defining it in ReactiveFormConfig and set it in the message property of the validation.</td></tr>\r\n<tr><td><a (click)='scrollTo(\"#value\")' title=\"value\">value</a></td><td> Enter value which you want to restrict string length in the property.</td></tr>\r\n</table>\r\n</div></div>\r\n<div class='row page-section' id= 'message'>\r\n<div class='col-lg-12'>\r\n<h2>message<a title='Link to this heading' class='link-header' href='/async-validators/maxLengthAsync/template-driven/directives#message'><i class='fa fa-link'></i></a></h2>\r\n\r\n<p class='showHideElement' >Type :  <span class='highlighted'>string</span> </p>\r\n<p class='showHideElement' >To override the global configuration message and set the custom message on respective FormControl.</p>\r\n<div component=\"app-code\" key=\"maxLengthAsync-messageExample-model\"></div> \r\n<div component=\"app-example-runner\" ref-component=\"app-maxLengthAsync-message\" title=\"maxLengthAsync template driven with message\" key=\"message\"></div>\r\n</div></div>\r\n<div class='row page-section' id= 'messagekey'>\r\n<div class='col-lg-12'>\r\n<h2>messageKey<a title='Link to this heading' class='link-header' href='/async-validators/maxLengthAsync/template-driven/directives#messagekey'><i class='fa fa-link'></i></a></h2>\r\n\r\n<p class='showHideElement' >Type : <span class='highlighted'>string</span></p>\r\n<p class='showHideElement' >messageKey property of BaseConfig can be used when the user wants to show a different custom validation message on some of their fields. User can define a custom messageKey globally by defining it in ReactiveFormConfig and set it in the message property of the validation.</p>\r\n<div component=\"app-code\" key=\"maxLengthAsync-messageKeyExample-model\"></div> \r\n<div component=\"app-example-runner\" ref-component=\"app-maxLengthAsync-messageKey\" title=\"maxLengthAsync template driven with messageKey\" key=\"messageKey\"></div>\r\n</div></div>\r\n<div class='row page-section' id= 'value'>\r\n<div class='col-lg-12'>\r\n<h2>value<a title='Link to this heading' class='link-header' href='/async-validators/maxLengthAsync/template-driven/directives#value'><i class='fa fa-link'></i></a></h2>\r\n\r\n<p class='showHideElement' >Type :  <span class='highlighted'>number</span> </p>\r\n<p class='showHideElement' >enter value which you want to restrict string length in the property</p>\r\n<div component=\"app-code\" key=\"maxLengthAsync-valueExample-model\"></div> \r\n<div component=\"app-example-runner\" ref-component=\"app-maxLengthAsync-value\" title=\"maxLengthAsync template driven with value\" key=\"value\"></div>\r\n</div></div>\r\n<div class='row page-section' id= 'completemaxlengthasyncexample'>\r\n<div class='col-lg-12'>\r\n<h2>Complete maxLengthAsync Example<a title='Link to this heading' class='link-header' href='/async-validators/maxLengthAsync/template-driven/directives#completemaxlengthasyncexample'><i class='fa fa-link'></i></a></h2>\r\n\r\n<p class='showHideElement' >This Complete maxLengthAsync example which includes all the NumberConfig properties will fulfil the requirement of scenarios 1, 2, 3.</p>\r\n<div component=\"app-tabs\" key=\"complete\"></div>\r\n</div></div>\r\n"}