{"complete":{"notes":null,"component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from \"@angular/forms\"\r\nimport { RxFormBuilder } from '@rxweb/reactive-form-validators';\r\n\r\nimport { User } from './user.model';\r\n\r\n@Component({\r\n    selector: 'app-maxLengthAsync-complete',\r\n    templateUrl: './max-length-async-complete.component.html'\r\n})\r\nexport class MaxLengthAsyncCompleteComponent implements OnInit {\r\n    userFormGroup: FormGroup\r\n\r\n    constructor(\r\n        private formBuilder: RxFormBuilder    ) { }\r\n\r\n    ngOnInit() {\r\n        let user = new User();\r\n        this.userFormGroup = this.formBuilder.formGroup(user);\r\n    }\r\n}\r\n","html":"<div>\r\n  <form  [formGroup]=\"userFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label>First Name</label>\r\n      <input type=\"text\" formControlName=\"firstName\" class=\"form-control\"  />\r\n     <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.firstName.errors\">{{userFormGroup.controls.firstName.errors.maxLength.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>User Name</label>\r\n      <input type=\"text\" formControlName=\"userName\" class=\"form-control\"  />\r\n     <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.userName.errors\">{{userFormGroup.controls.userName.errors.maxLength.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Full Name</label>\r\n      <input type=\"text\" formControlName=\"fullName\" class=\"form-control\"  />\r\n     <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.fullName.errors\">{{userFormGroup.controls.fullName.errors.maxLengthMessageKey.message}}<br/></small>\t\t\r\n    </div>\r\n    <button [disabled]=\"!userFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","model":"import {  maxLengthAsync, } from   \"@rxweb/reactive-form-validators\"   \r\n\r\nexport class User {\r\n\r\n\t@maxLengthAsync({validatorConfig:of({value:16})}) \r\n\tfirstName: string;\r\n\t\r\n\t\r\n\t//Shows custom message\r\n\t@maxLengthAsync({validatorConfig:of({value:10  ,message:'Maximum 10 characters are allowed'})}) \r\n\tuserName: string;\r\n\t\r\n\t\r\n\t//Shows custom message based on message key\r\n\t@maxLengthAsync({validatorConfig:of({value:20  ,messageKey:'maxLengthMessageKey'})}) \r\n\tfullName: string;\r\n\t\r\n\t\r\n}\r\n","modelName":"user.model.ts","json":{}},"valueExample":{"notes":null,"component":null,"html":null,"model":"@maxLengthAsync({validatorConfig:of({value:16})}) \r\nfirstName: string;\r\n","modelName":null,"json":{}},"value":{"notes":null,"component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from \"@angular/forms\"\r\nimport { RxFormBuilder } from '@rxweb/reactive-form-validators';\r\n\r\nimport { User } from './user.model';\r\n\r\n@Component({\r\n    selector: 'app-maxLengthAsync-value',\r\n    templateUrl: './max-length-async-value.component.html'\r\n})\r\nexport class MaxLengthAsyncValueComponent implements OnInit {\r\n    userFormGroup: FormGroup\r\n\r\n    constructor(\r\n        private formBuilder: RxFormBuilder    ) { }\r\n\r\n    ngOnInit() {\r\n        let user = new User();\r\n        this.userFormGroup = this.formBuilder.formGroup(user);\r\n    }\r\n}\r\n","html":"<div>\r\n  <form  [formGroup]=\"userFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label>First Name</label>\r\n      <input type=\"text\" formControlName=\"firstName\" class=\"form-control\"  />\r\n     <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.firstName.errors\">{{userFormGroup.controls.firstName.errors.maxLength.message}}<br/></small>\t\r\n    </div>\r\n    <button [disabled]=\"!userFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","model":"import {  maxLengthAsync, } from   \"@rxweb/reactive-form-validators\"   \r\n\r\nexport class User {\r\n\r\n\t@maxLengthAsync({validatorConfig:of({value:16})}) \r\n\tfirstName: string;\r\n\t\r\n\t\r\n}\r\n","modelName":"user.model.ts","json":{}},"messageExample":{"notes":null,"component":null,"html":null,"model":"@maxLengthAsync({validatorConfig:of({value:10  ,message:'Maximum 10 characters are allowed'})}) \r\nuserName: string;\r\n","modelName":null,"json":{}},"message":{"notes":null,"component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from \"@angular/forms\"\r\nimport { RxFormBuilder } from '@rxweb/reactive-form-validators';\r\n\r\nimport { User } from './user.model';\r\n\r\n@Component({\r\n    selector: 'app-maxLengthAsync-message',\r\n    templateUrl: './max-length-async-message.component.html'\r\n})\r\nexport class MaxLengthAsyncMessageComponent implements OnInit {\r\n    userFormGroup: FormGroup\r\n\r\n    constructor(\r\n        private formBuilder: RxFormBuilder    ) { }\r\n\r\n    ngOnInit() {\r\n        let user = new User();\r\n        this.userFormGroup = this.formBuilder.formGroup(user);\r\n    }\r\n}\r\n","html":"<div>\r\n  <form  [formGroup]=\"userFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label>User Name</label>\r\n      <input type=\"text\" formControlName=\"userName\" class=\"form-control\"  />\r\n     <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.userName.errors\">{{userFormGroup.controls.userName.errors.maxLength.message}}<br/></small>\t\r\n    </div>\r\n    <button [disabled]=\"!userFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","model":"import {  maxLengthAsync, } from   \"@rxweb/reactive-form-validators\"   \r\n\r\nexport class User {\r\n\r\n\t//Shows custom message\r\n\t@maxLengthAsync({validatorConfig:of({value:10  ,message:'Maximum 10 characters are allowed'})}) \r\n\tuserName: string;\r\n\t\r\n\t\r\n}\r\n","modelName":"user.model.ts","json":{}},"messageKeyExample":{"notes":null,"component":null,"html":null,"model":"@maxLengthAsync({validatorConfig:of({value:20  ,messageKey:'maxLengthMessageKey'})}) \r\nfullName: string;\r\n","modelName":null,"json":{}},"messageKey":{"notes":null,"component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from \"@angular/forms\"\r\nimport { RxFormBuilder } from '@rxweb/reactive-form-validators';\r\n\r\nimport { User } from './user.model';\r\n\r\n@Component({\r\n    selector: 'app-maxLengthAsync-messageKey',\r\n    templateUrl: './max-length-async-message-key.component.html'\r\n})\r\nexport class MaxLengthAsyncMessageKeyComponent implements OnInit {\r\n    userFormGroup: FormGroup\r\n\r\n    constructor(\r\n        private formBuilder: RxFormBuilder    ) { }\r\n\r\n    ngOnInit() {\r\n        let user = new User();\r\n        this.userFormGroup = this.formBuilder.formGroup(user);\r\n    }\r\n}\r\n","html":"<div>\r\n  <form  [formGroup]=\"userFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label>Full Name</label>\r\n      <input type=\"text\" formControlName=\"fullName\" class=\"form-control\"  />\r\n     <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.fullName.errors\">{{userFormGroup.controls.fullName.errors.maxLengthMessageKey.message}}<br/></small>\t\t\r\n    </div>\r\n    <button [disabled]=\"!userFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","model":"import {  maxLengthAsync, } from   \"@rxweb/reactive-form-validators\"   \r\n\r\nexport class User {\r\n\r\n\t//Shows custom message based on message key\r\n\t@maxLengthAsync({validatorConfig:of({value:20  ,messageKey:'maxLengthMessageKey'})}) \r\n\tfullName: string;\r\n\t\r\n\t\r\n}\r\n","modelName":"user.model.ts","json":{}},"dynamic":{"notes":null,"component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from \"@angular/forms\"\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { environment } from 'src/environments/environment';\r\nimport { RxFormBuilder } from '@rxweb/reactive-form-validators';\r\nimport { FormBuilderConfiguration,} from '@rxweb/reactive-form-validators';\r\n\r\nimport { User } from './user.model';\r\n\r\n@Component({\r\n    selector: 'app-maxLengthAsync-dynamic',\r\n    templateUrl: './max-length-async-dynamic.component.html'\r\n})\r\nexport class MaxLengthAsyncDynamicComponent implements OnInit {\r\n    userFormGroup: FormGroup\r\n\r\n    constructor(\r\n        private formBuilder: RxFormBuilder,private http: HttpClient    ) { }\r\n\r\n    ngOnInit() {\r\n        let user = new User();\r\n        let formBuilderConfiguration = new FormBuilderConfiguration();\r\n\t\tthis.http.get('assets/examples/reactive-form-validators/decorators/maxLengthAsync/dynamic/dynamic.json?v=' + environment.appVersion).subscribe(dynamic => {\r\n            formBuilderConfiguration.dynamicValidation = JSON.parse(JSON.stringify(dynamic));\r\n\t\t\tthis.userFormGroup = this.formBuilder.formGroup(user,formBuilderConfiguration);\r\n       })})\r\n    }\r\n}\r\n","html":"<div>\r\n  <form  *ngIf=\"userFormGroup\"  [formGroup]=\"userFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label>First Name</label>\r\n      <input type=\"text\" formControlName=\"firstName\" class=\"form-control\"  />\r\n     <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.firstName.errors\">{{userFormGroup.controls.firstName.errors.maxLength.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>User Name</label>\r\n      <input type=\"text\" formControlName=\"userName\" class=\"form-control\"  />\r\n     <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.userName.errors\">{{userFormGroup.controls.userName.errors.maxLength.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Full Name</label>\r\n      <input type=\"text\" formControlName=\"fullName\" class=\"form-control\"  />\r\n     <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.fullName.errors\">{{userFormGroup.controls.fullName.errors.maxLengthMessageKey.message}}<br/></small>\t\t\r\n    </div>\r\n    <button [disabled]=\"!userFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","model":"import {  maxLengthAsync,prop, } from   \"@rxweb/reactive-form-validators\"   \r\n\r\nexport class User {\r\n\r\n\t@prop()\r\n\tfirstName: string;\r\n\r\n\t@prop()\r\n\tuserName: string;\r\n\r\n\t@prop()\r\n\tfullName: string;\r\n\r\n}\r\n","modelName":"user.model.ts","json":{"dynamic.json":"{\"firstName\":{\"maxLengthAsync\":{\"value\":\"16\"}},\"userName\":{\"maxLengthAsync\":{\"value\":\"10\",\"message\":\"Maximum 10 characters are allowed\"}},\"fullName\":{\"maxLengthAsync\":{\"value\":\"20\",\"messageKey\":\"maxLengthMessageKey\"}}}"}},"add":{"notes":null,"component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from \"@angular/forms\"\r\nimport { RxFormBuilder } from '@rxweb/reactive-form-validators';\r\n\r\nimport { Location } from './location.model';\r\n\r\n@Component({\r\n    selector: 'app-maxLengthAsync-add',\r\n    templateUrl: './max-length-async-add.component.html'\r\n})\r\nexport class MaxLengthAsyncAddComponent implements OnInit {\r\n    locationFormGroup: FormGroup\r\n\r\n    constructor(\r\n        private formBuilder: RxFormBuilder    ) { }\r\n\r\n    ngOnInit() {\r\n        let location = new Location();\r\n        this.locationFormGroup = this.formBuilder.formGroup(location);\r\n    }\r\n}\r\n","html":"<div>\r\n  <form  [formGroup]=\"locationFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label>First Name</label>\r\n      <input type=\"text\" formControlName=\"firstName\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">Maximum Length Upto 10 characters<br/></small>\r\n     <small class=\"form-text text-danger\" *ngIf=\"locationFormGroup.controls.firstName.errors\">{{locationFormGroup.controls.firstName.errors.maxLength.message}}<br/></small>\t\r\n    </div>\r\n    <button [disabled]=\"!locationFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","model":"import {  maxLengthAsync, } from   \"@rxweb/reactive-form-validators\"   \r\n\r\nexport class Location {\r\n\r\n\t@maxLengthAsync({validatorConfig:of({value:10})}) \r\n\tfirstName: string;\r\n\t\r\n\t\r\n}\r\n","modelName":"location.model.ts","json":{}},"edit":{"notes":null,"component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from \"@angular/forms\"\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { environment } from 'src/environments/environment';\r\nimport { RxFormBuilder } from '@rxweb/reactive-form-validators';\r\n\r\nimport { Location } from './location.model';\r\n\r\n@Component({\r\n    selector: 'app-maxLengthAsync-edit',\r\n    templateUrl: './max-length-async-edit.component.html'\r\n})\r\nexport class MaxLengthAsyncEditComponent implements OnInit {\r\n    locationFormGroup: FormGroup\r\n\r\n    constructor(\r\n        private formBuilder: RxFormBuilder,private http: HttpClient    ) { }\r\n\r\n    ngOnInit() {\r\n        this.http.get('assets/examples/reactive-form-validators/decorators/maxLengthAsync/edit/location-data.json?v=' + environment.appVersion).subscribe(location => {\r\n            this.locationFormGroup = this.formBuilder.formGroup<Location>(Location,location);\r\n       })})\r\n    }\r\n}\r\n","html":"<div>\r\n  <form  *ngIf=\"locationFormGroup\"  [formGroup]=\"locationFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label>First Name</label>\r\n      <input type=\"text\" formControlName=\"firstName\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">Maximum Length Upto 10 characters<br/></small>\r\n     <small class=\"form-text text-danger\" *ngIf=\"locationFormGroup.controls.firstName.errors\">{{locationFormGroup.controls.firstName.errors.maxLength.message}}<br/></small>\t\r\n    </div>\r\n    <button [disabled]=\"!locationFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","model":"import {  maxLengthAsync, } from   \"@rxweb/reactive-form-validators\"   \r\n\r\nexport class Location {\r\n\r\n\t@maxLengthAsync({validatorConfig:of({value:10})}) \r\n\tfirstName: string;\r\n\t\r\n\t\r\n}\r\n","modelName":"location.model.ts","json":{"location-data.json":"{\"firstName\":\"Bharat\"}"}}}