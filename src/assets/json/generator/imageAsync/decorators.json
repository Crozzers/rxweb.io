{"rightSidebarLinks":[{"id":"imageasync","title":"imageAsync","subLink":null},{"id":"whentouse","title":"When to use","subLink":[]},{"id":"basicimageasyncvalidation","title":"Basic imageAsync Validation","subLink":[]},{"id":"validatorconfig","title":"ValidatorConfig","subLink":[{"title":"maxHeight","id":"maxheight","thirdLevelLink":[]},{"title":"maxWidth","id":"maxwidth","thirdLevelLink":[]},{"title":"message","id":"message","thirdLevelLink":[]},{"title":"messageKey","id":"messagekey","thirdLevelLink":[]},{"title":"minHeight","id":"minheight","thirdLevelLink":[]},{"title":"minWidth","id":"minwidth","thirdLevelLink":[]}]},{"id":"completeimageasyncexample","title":"Complete imageAsync Example","subLink":[]}],"title":"imageAsync","description":"imageAsync validation  decorators  allows user to validate imageAsync like height,width etc.","validatorType":"decorators","validationTypeTitle":"Decorators","type":"tabs","gitDocPath":"https://github.com/rxweb/rxweb.io/edit/master/docs/angular/reactive-forms/reactive-form-validators/async-validators/imageAsync.md","category":"async-validators","subCategory":"File","linkTitle":"imageAsync","tabArray":{"basic-operations":[{"tabName":"Add","tabGroupContent":null,"content":"<div component=\"app-code\" key=\"imageAsync-add-component\"></div> \r\n<p class='showHideElement' >Next, we need to write html code.</p>\r\n<div component=\"app-code\" key=\"imageAsync-add-html\"></div> \r\n<div component=\"app-example-runner\" ref-component=\"app-imageAsync-add\"></div>\r\n"},{"tabName":"Edit","tabGroupContent":null,"content":"<div component=\"app-code\" key=\"imageAsync-edit-component\"></div> \r\n<p class='showHideElement' >The below code is `user-data.json` for getting data from the server</p>\r\n<div component=\"app-code\" key=\"imageAsync-edit-json\"></div> \r\n<p class='showHideElement' >Next, we need to write html code.</p>\r\n<div component=\"app-code\" key=\"imageAsync-edit-html\"></div> \r\n<div component=\"app-example-runner\" ref-component=\"app-imageAsync-edit\"></div>\r\n"}],"complete":[{"tabName":"Example","tabGroupContent":null,"content":"<div component=\"app-example-runner\" ref-component=\"app-imageAsync-complete\"></div>\r\n"},{"tabName":"Model","tabGroupContent":null,"content":"<div component=\"app-code\" key=\"imageAsync-complete-model\"></div> \r\n"},{"tabName":"Component","tabGroupContent":null,"content":"<div component=\"app-code\" key=\"imageAsync-complete-component\"></div> \r\n"},{"tabName":"Html","tabGroupContent":null,"content":"<div component=\"app-code\" key=\"imageAsync-complete-html\"></div>\r\n"}]},"innerHtml":null,"htmlContent":"<div class=\"title-bar top_title\"><p>imageAsync</p></div> <div class=\"title-bar\"><p>imageAsync validation  decorator  allows user to validate imageAsync like height,width etc asynchronously.</p></div>\r\n<div class='row page-section' id= 'whentouse'>\r\n<div class='col-lg-12'>\r\n<h2 class='showHideElement' >When to use<a title='Link to this heading' class='link-header'  href='/async-validators/imageAsync/decorators#whentouse'><i class='fa fa-link'></i></a></h2>\r\n\r\n<p class='showHideElement' >Suppose you want to create a User form, which contains fields like ProfilePhoto, Signature, DrivingLicense,IdentityCard,DrvingLicense,VoterId,AadharCard, and you want the user to enter only the hex color format asynchronously. Here depending upon the requirement these scenarios may arise.</p>\r\n<ol class='showHideElement'>\r\n    <li>Allow validation using maxwidth on field of ProfilePhoto.</li>\r\n    <li>Apply imageAsync validation based on maxheight in Signature</li>\r\n    <li>Adding Custom Message on VoterId field.</li>\r\n    <li>Adding custom message on residenceProof field.</li>\r\n    <li>Shows the custom message on <span class='highlighted'>passport</span> field by using <span class='highlighted'>messageKey</span> property.</li>\r\n    <data-scope scope=\"['decorator','validator']\">\r\n    <li>Apply imageAsync validation dynamically based on server rules.</li>\r\n    </data-scope>\r\n</ol>\r\n<p class='showHideElement' >Letâ€™s see how imageAsync  decorator  fulfil the need.</p>\r\n</div></div>\r\n<div class='row page-section' id= 'basicimageasyncvalidation'>\r\n<div class='col-lg-12'>\r\n<h2>Basic imageAsync Validation<a title='Link to this heading' class='link-header'  href='/async-validators/imageAsync/decorators#basicimageasyncvalidation'><i class='fa fa-link'></i></a></h2>\r\n\r\n<p class='showHideElement' >First we need to create a User class and define a property of ProfilePhoto in the model to achieve the functional need of point 1.</p>\r\n<div component=\"app-code\" key=\"imageAsync-add-model\"></div> \r\n<p class='showHideElement' >Through Angular FormBuilder service we create FormGroup in the component.</p>\r\n<p class='showHideElement' >Here we have covered Add and Edit form operations. </p>\r\n<div component=\"app-tabs\" key=\"basic-operations\"></div>\r\n</div></div>\r\n<div class='row page-section' id= 'validatorconfig'>\r\n<div class='col-lg-12'>\r\n<h2>ValidatorConfig<a title='Link to this heading' class='link-header'  href='/async-validators/imageAsync/decorators#validatorconfig'><i class='fa fa-link'></i></a></h2>\r\n\r\n<p class='showHideElement' >Type : <span class='highlighted'>Observable</span></p>\r\n<p class='showHideElement' >validator config is used to dynamically resolve the value of the property according to the server rules by using the keyword <span class='highlighted'>of</span> as below </p>\r\n<p class='showHideElement' >Below options are not mandatory to use in the <span class='highlighted'>@imageAsync({validatorConfig:of({validatorConfig:of({&ltproperty_name&gt:&ltvalue&gt})})</span> decorator. If needed then use the below options.</p>\r\n<table class=\"table table-bordered table-striped showHideElement\">\r\n<tr><th>Option</th><th>Description</th></tr>\r\n<tr><td><a title=\"maxHeight\">maxHeight</a></td><td>To set the maximum Height of the imageAsync</td></tr>\r\n<tr><td><a title=\"maxWidth\">maxWidth</a></td><td>To set the maximum Width of the imageAsync</td></tr>\r\n<tr><td><a title=\"message\">message</a></td><td>To override the global configuration message and set the custom error message on respective FormControl</td></tr>\r\n<tr><td><a title=\"messageKey\">messageKey</a></td><td>messageKey property of BaseConfig can be used when the user wants to show a different custom validation message on some of their fields. User can define a custom messageKey globally by defining it in ReactiveFormConfig and set it in the message property of the validation.</td></tr>\r\n<tr><td><a title=\"minHeight\">minHeight</a></td><td>To set the minimum Height of the imageAsync</td></tr>\r\n<tr><td><a title=\"minWidth\">minWidth</a></td><td>To set the minimum Width of the imageAsync</td></tr>\r\n</table>\r\n</div></div>\r\n<div class='row page-section' id= 'maxheight'>\r\n<div class='col-lg-12'>\r\n<h2>maxHeight<a title='Link to this heading' class='link-header'  href='/async-validators/imageAsync/decorators#maxheight'><i class='fa fa-link'></i></a></h2>\r\n\r\n<p class='showHideElement' >Type :  <span class='highlighted'>number</span> </p>\r\n<p class='showHideElement' >To set the maximum Height of the imageAsync.</p>\r\n<div component=\"app-code\" key=\"imageAsync-maxHeightExample-model\"></div> \r\n<div component=\"app-example-runner\" ref-component=\"app-imageAsync-maxHeight\" title=\"imageAsync decorator with maxHeight\" key=\"maxHeight\"></div>\r\n</div></div>\r\n<div class='row page-section' id= 'maxwidth'>\r\n<div class='col-lg-12'>\r\n<h2>maxWidth<a title='Link to this heading' class='link-header'  href='/async-validators/imageAsync/decorators#maxwidth'><i class='fa fa-link'></i></a></h2>\r\n\r\n<p class='showHideElement' >Type :  <span class='highlighted'>number</span> </p>\r\n<p class='showHideElement' >To set the maximum Width of the imageAsync.</p>\r\n<div component=\"app-code\" key=\"imageAsync-maxWidthExample-model\"></div> \r\n<div component=\"app-example-runner\" ref-component=\"app-imageAsync-maxWidth\" title=\"imageAsync decorator with maxWidth\" key=\"maxWidth\"></div>\r\n</div></div>\r\n<div class='row page-section' id= 'message'>\r\n<div class='col-lg-12'>\r\n<h2>message<a title='Link to this heading' class='link-header'  href='/async-validators/imageAsync/decorators#message'><i class='fa fa-link'></i></a></h2>\r\n\r\n<p class='showHideElement' >Type :  <span class='highlighted'>string</span> </p>\r\n<p class='showHideElement' >To override the global configuration message and set the custom error message on respective FormControl</p>\r\n<div component=\"app-code\" key=\"imageAsync-messageExample-model\"></div> \r\n<div component=\"app-example-runner\" ref-component=\"app-imageAsync-message\" title=\"imageAsync decorator with message\" key=\"message\"></div>\r\n</div></div>\r\n<div class='row page-section' id= 'messagekey'>\r\n<div class='col-lg-12'>\r\n<h2>messageKey<a title='Link to this heading' class='link-header'  href='/async-validators/imageAsync/decorators#messagekey'><i class='fa fa-link'></i></a></h2>\r\n\r\n<p class='showHideElement' >Type : <span class='highlighted'>string</span></p>\r\n<p class='showHideElement' >messageKey property of BaseConfig can be used when the user wants to show a different custom validation message on some of their fields. User can define a custom messageKey globally by defining it in ReactiveFormConfig and set it in the message property of the validation.</p>\r\n<div component=\"app-code\" key=\"imageAsync-messageKeyExample-model\"></div> \r\n<div component=\"app-example-runner\" ref-component=\"app-imageAsync-messageKey\" title=\"imageAsync decorator with messageKey\" key=\"messageKey\"></div>\r\n</div></div>\r\n<div class='row page-section' id= 'minheight'>\r\n<div class='col-lg-12'>\r\n<h2>minHeight<a title='Link to this heading' class='link-header'  href='/async-validators/imageAsync/decorators#minheight'><i class='fa fa-link'></i></a></h2>\r\n\r\n<p class='showHideElement' >Type :  <span class='highlighted'>number</span> </p>\r\n<p class='showHideElement' >To set the minimum Height of the imageAsync.</p>\r\n<div component=\"app-code\" key=\"imageAsync-minHeightExample-model\"></div> \r\n<div component=\"app-example-runner\" ref-component=\"app-imageAsync-minHeight\" title=\"imageAsync decorator with minHeight\" key=\"minHeight\"></div>\r\n</div></div>\r\n<div class='row page-section' id= 'minwidth'>\r\n<div class='col-lg-12'>\r\n<h2>minWidth<a title='Link to this heading' class='link-header'  href='/async-validators/imageAsync/decorators#minwidth'><i class='fa fa-link'></i></a></h2>\r\n\r\n<p class='showHideElement' >Type :  <span class='highlighted'>number</span> </p>\r\n<p class='showHideElement' >To set the minimum Width of the imageAsync.</p>\r\n<div component=\"app-code\" key=\"imageAsync-minWidthExample-model\"></div> \r\n<div component=\"app-example-runner\" ref-component=\"app-imageAsync-minWidth\" title=\"imageAsync decorator with minWidth\" key=\"minWidth\"></div>\r\n</div></div>\r\n<div class='row page-section' id= 'completeimageasyncexample'>\r\n<div class='col-lg-12'>\r\n<h2>Complete imageAsync Example<a title='Link to this heading' class='link-header'  href='/async-validators/imageAsync/decorators#completeimageasyncexample'><i class='fa fa-link'></i></a></h2>\r\n\r\n<p class='showHideElement' >This Complete imageAsync example which includes all the imageConfig properties will fulfil the requirement of scenarios 1, 2, 3, 4, 5, 6 and 7</p>\r\n<div component=\"app-tabs\" key=\"complete\"></div>\r\n</div></div>\r\n"}