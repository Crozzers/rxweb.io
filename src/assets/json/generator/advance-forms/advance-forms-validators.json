{
    "complete":{
        "component":"export class UserComponent implements OnInit {\r\n    userDetailsFormGroup: RxFormGroup\r\n    constructor(private formBuilder: FormBuilder) { }\r\n  \r\n    ngOnInit() {\r\n      this.userDetailsFormGroup = <RxFormGroup>this.formBuilder.group({\r\n        firstName: [''],\r\n        lastName: [''],\r\n        email: ['', RxwebValidators.compose({ validators: [this.uniqueEmailId()] })],\r\n        profilePhoto: ['', RxwebValidators.image({ maxHeight: 100, maxWidth: 100 })],\r\n        isPermanentAddress: [''],\r\n        address: this.formBuilder.group({\r\n          cityName: [''],\r\n          areaName: ['']\r\n        })\r\n      })\r\n    }\r\n}"
    },
    "formarray":{
        "component":"export class UserComponent implements OnInit {\r\n    userDetailsFormGroup: RxFormGroup\r\n    constructor(private formBuilder: FormBuilder) { }\r\n  \r\n    ngOnInit() {\r\n      this.userDetailsFormGroup = <RxFormGroup>this.formBuilder.group({\r\n        firstName: [''],\r\n        lastName: [''],\r\n        email: ['', RxwebValidators.compose({ validators: [this.uniqueEmailId()] })],\r\n        profilePhoto: ['', RxwebValidators.image({ maxHeight: 100, maxWidth: 100 })],\r\n        isPermanentAddress: [''],\r\n        address: this.formBuilder.group({\r\n          cityName: [''],\r\n          areaName: ['']\r\n        }),\r\n        hobbies: this.formBuilder.array([\r\n          this.getFormArray()\r\n        ])\r\n      })\r\n    }\r\n\r\n    getFormArray() {\r\n        return this.formBuilder.group({\r\n          hobbyName: ['', RxwebValidators.unique()]\r\n        })\r\n    }\r\n}"
    },
    "fileobject":{
        "component":" submitUser() {\r\n    \/\/ toFormData() method converts the json object to Form Data when hits the server API\r\n    let userDetailsValue = this.userDetailsFormGroup.toFormData();\r\n    let result = this.userService.saveUser(userDetailsValue);\r\n  }"
    },
    "errormessage":{
        "component":"<div class=\"container\">\r\n  <form [formGroup]=\"userDetailsFormGroup\" class=\"row g-3\">\r\n    <div class=\"col-md-6\">\r\n      <label class=\"form-label\">FirstName<\/label>\r\n      <input type=\"text\" formControlName=\"firstName\" class=\"form-control\">\r\n      <small class=\"text text-danger\"\r\n        *ngIf=\"userDetailsFormGroup.controls.firstName.errors\">{{userDetailsFormGroup.controls.firstName.errorMessage}}<\/small>\r\n    <\/div>\r\n    <div class=\"col-md-6\">\r\n      <label class=\"form-label\">LastName<\/label>\r\n      <input type=\"text\" formControlName=\"lastName\" class=\"form-control\">\r\n      <small class=\"text text-danger\"\r\n      *ngIf=\"userDetailsFormGroup.controls.lastName.errors\">{{userDetailsFormGroup.controls.lastName.errorMessage}}<\/small>\r\n    <\/div>\r\n    <div class=\"col-md-12\">\r\n      <label class=\"form-label\">Email<\/label>\r\n      <input type=\"text\" formControlName=\"email\" class=\"form-control\">\r\n      <small class=\"text text-danger\"\r\n      *ngIf=\"userDetailsFormGroup.controls.email.errors\">{{userDetailsFormGroup.controls.email.errorMessage}}<\/small>\r\n    <\/div>\r\n    <div class=\"col-12\">\r\n      <div class=\"form-check\">\r\n        <input class=\"form-check-input\" type=\"checkbox\" formControlName=\"isPermanentAddress\">\r\n        <label class=\"form-check-label\">\r\n          Is Permanent Address\r\n        <\/label>\r\n        <small class=\"text text-danger\"\r\n        *ngIf=\"userDetailsFormGroup.controls.isPermanentAddress.errors\">{{userDetailsFormGroup.controls.isPermanentAddress.errorMessage}}<\/small>\r\n      <\/div>\r\n    <\/div>\r\n    <div class=\"form-group\" [formGroup]=\"userDetailsFormGroup.controls.address\">\r\n      <div class=\"col-12\">\r\n        <label for=\"inputAddress\" class=\"form-label\">City Name<\/label>\r\n        <input type=\"text\" formControlName=\"cityName\" class=\"form-control\" placeholder=\"1234 Main St\">\r\n        <small class=\"text text-danger\"\r\n        *ngIf=\"userDetailsFormGroup.controls.address['controls'].cityName.errors\">{{userDetailsFormGroup.controls.address['controls'].cityName.errorMessage}}<\/small>\r\n      <\/div>\r\n      <div class=\"col-12\">\r\n        <label for=\"inputAddress2\" class=\"form-label\">Area Name<\/label>\r\n        <input type=\"text\" class=\"form-control\" formControlName=\"areaName\" placeholder=\"Apartment, studio, or floor\">\r\n        <small class=\"text text-danger\"\r\n        *ngIf=\"userDetailsFormGroup.controls.address['controls'].areaName.errors\">{{userDetailsFormGroup.controls.address['controls'].areaName.errorMessage}}<\/small>\r\n      <\/div>\r\n    <\/div>\r\n    <div class=\"card\">\r\n      <div class=\"card-body\">\r\n        <button (click)=\"addHobbiess()\" class=\"btn btn-primary\">Add hobby<\/button>\r\n        <div class=\"form-group\" [formGroup]=\"hobbyGroup\"\r\n          *ngFor=\"let hobbyGroup of userDetailsFormGroup.get('hobbies')['controls']; let i = index\">\r\n          <label>Hobby Name<\/label>\r\n          <input type=\"text\" formControlName=\"hobbyName\" class=\"form-control\" \/>\r\n          <small class=\"text text-danger\"\r\n          *ngIf=\"hobbyGroup.controls.hobbyName.errors\">{{hobbyGroup.controls.hobbyName.errorMessage}}<\/small>\r\n        <\/div>\r\n      <\/div>\r\n    <\/div>\r\n\r\n    <div class=\"col-12\">\r\n      <button [disabled]=\"!userDetailsFormGroup.valid\" type=\"submit\" class=\"btn btn-primary\">Sign in<\/button>\r\n    <\/div>\r\n  <\/form>\r\n<\/div>"
    },
    "conditionalvalidation":{
        "component":"export class UserComponent implements OnInit {\r\n  userDetailsFormGroup: RxFormGroup\r\n  constructor(private formBuilder: FormBuilder) { }\r\n\r\n  ngOnInit() {\r\n    this.userDetailsFormGroup = <RxFormGroup>this.formBuilder.group({\r\n      firstName: [''],\r\n      lastName: [''],\r\n      email: ['', RxwebValidators.compose({ validators: [this.uniqueEmailId()] })],\r\n      profilePhoto: ['', RxwebValidators.image({ maxHeight: 100, maxWidth: 100 })],\r\n      isPermanentAddress: [true],\r\n      address: this.formBuilder.group({\r\n        cityName: ['',RxwebValidators.required({\r\n          conditionalExpression: (x, y) => y.isPermanentAddress == false\r\n        })],\r\n        areaName: ['',RxwebValidators.required({\r\n          conditionalExpression: (x, y) => y.isPermanentAddress == false\r\n        })]\r\n      }),\r\n      hobbies: this.formBuilder.array([\r\n        this.getFormArray()\r\n      ])\r\n    })\r\n  }"
    }

}