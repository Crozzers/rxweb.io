{"complete":{"notes":[],"component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup, FormBuilder } from \"@angular/forms\"\r\nimport { RxwebValidators } from '@rxweb/reactive-form-validators';\r\n\r\n@Component({\r\n    selector: 'app-notEmpty-complete-validator',\r\n    templateUrl: './not-empty-complete.component.html'\r\n})\r\nexport class NotEmptyCompleteValidatorComponent implements OnInit {\r\n    userFormGroup: FormGroup\r\n\r\n\tconstructor(\r\n        private formBuilder: FormBuilder )\r\n\t{ }\r\n\r\n    ngOnInit() {\r\n        this.userFormGroup = this.formBuilder.group({\r\n            firstName:['', RxwebValidators.notEmpty()], \r\n            middleName:['', RxwebValidators.notEmpty({conditionalExpression:(x,y) => x.firstName == \"Bharat\"  })], \r\n            lastName:['', RxwebValidators.notEmpty({conditionalExpression:'x => x.firstName == \"Bharat\"' })], \r\n            userName:['', RxwebValidators.notEmpty({message:'Username cannot be blank.' })], \r\n            fullName:['', RxwebValidators.notEmpty({messageKey:'notEmptyMessageKey' })], \r\n        });\r\n    }\r\n}\r\n","html":"<div>\r\n  <form  [formGroup]=\"userFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label>First Name</label>\r\n      <input type=\"text\" formControlName=\"firstName\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Middle Name' or 'Last Name', then you need to add 'First Name' input as 'Bharat'<br/></small>\r\n     <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.firstName.errors\">{{userFormGroup.controls.firstName.errors.notEmpty.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Middle Name</label>\r\n      <input type=\"text\" formControlName=\"middleName\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">Conditional validation will be applied if the 'FirstName' field have value of 'Bharat'<br/></small>\r\n      <small class=\"form-text text-muted\">Conditional Expression with type 'function'<br/></small>\r\n\t<small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.middleName.errors\">{{userFormGroup.controls.middleName.errors.notEmpty.message}}<br/></small>\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Last Name</label>\r\n      <input type=\"text\" formControlName=\"lastName\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">Conditional notEmpty Validation.<br/></small>\r\n      <small class=\"form-text text-muted\">Conditional validation will be applied if the 'FirstName' field have value of 'Bharat'<br/></small>\r\n      <small class=\"form-text text-muted\">Conditional Expression with type 'string'<br/></small>\r\n\t<small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.lastName.errors\">{{userFormGroup.controls.lastName.errors.notEmpty.message}}<br/></small>\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>UserName</label>\r\n      <input type=\"text\" formControlName=\"userName\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">Shows Custom Validation Message.<br/></small>\r\n\t<small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.userName.errors\">{{userFormGroup.controls.userName.errors.notEmpty.message}}<br/></small>\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Full Name</label>\r\n      <input type=\"text\" formControlName=\"fullName\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">Shows Custom Validation Message based on message key<br/></small>\r\n\t<small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.fullName.errors\">{{userFormGroup.controls.fullName.errors.notEmpty.message}}<br/></small>\r\n    </div>\r\n    <button [disabled]=\"!userFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","model":null,"modelName":null,"json":{}},"conditionalExpressionExampleFunction":{"notes":null,"component":null,"html":null,"model":"RxwebValidators.notEmpty({conditionalExpression:(x,y) => x.firstName == \"Bharat\"  });\r\n","modelName":null,"json":{}},"conditionalExpression":{"notes":[],"component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup, FormBuilder } from \"@angular/forms\"\r\nimport { RxwebValidators } from '@rxweb/reactive-form-validators';\r\n\r\n@Component({\r\n    selector: 'app-notEmpty-conditionalExpression-validator',\r\n    templateUrl: './not-empty-conditional-expression.component.html'\r\n})\r\nexport class NotEmptyConditionalExpressionValidatorComponent implements OnInit {\r\n    userFormGroup: FormGroup\r\n\r\n\tconstructor(\r\n        private formBuilder: FormBuilder )\r\n\t{ }\r\n\r\n    ngOnInit() {\r\n        this.userFormGroup = this.formBuilder.group({\r\n            firstName:['', RxwebValidators.notEmpty()], \r\n            lastName:['', RxwebValidators.notEmpty({conditionalExpression:'x => x.firstName == \"Bharat\"' })], \r\n            middleName:['', RxwebValidators.notEmpty({conditionalExpression:(x,y) => x.firstName == \"Bharat\"  })], \r\n        });\r\n    }\r\n}\r\n","html":"<div>\r\n  <form  [formGroup]=\"userFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label>First Name</label>\r\n      <input type=\"text\" formControlName=\"firstName\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Middle Name' or 'Last Name', then you need to add 'First Name' input as 'Bharat'<br/></small>\r\n     <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.firstName.errors\">{{userFormGroup.controls.firstName.errors.notEmpty.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Last Name</label>\r\n      <input type=\"text\" formControlName=\"lastName\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">Conditional notEmpty Validation.<br/></small>\r\n      <small class=\"form-text text-muted\">Conditional validation will be applied if the 'FirstName' field have value of 'Bharat'<br/></small>\r\n      <small class=\"form-text text-muted\">Conditional Expression with type 'string'<br/></small>\r\n\t<small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.lastName.errors\">{{userFormGroup.controls.lastName.errors.notEmpty.message}}<br/></small>\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Middle Name</label>\r\n      <input type=\"text\" formControlName=\"middleName\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">Conditional validation will be applied if the 'FirstName' field have value of 'Bharat'<br/></small>\r\n      <small class=\"form-text text-muted\">Conditional Expression with type 'function'<br/></small>\r\n\t<small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.middleName.errors\">{{userFormGroup.controls.middleName.errors.notEmpty.message}}<br/></small>\r\n    </div>\r\n    <button [disabled]=\"!userFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","model":null,"modelName":null,"json":{}},"conditionalExpressionExampleString":{"notes":null,"component":null,"html":null,"model":"RxwebValidators.notEmpty({conditionalExpression:'x => x.firstName == \"Bharat\"' });\r\n","modelName":null,"json":{}},"messageExample":{"notes":null,"component":null,"html":null,"model":"RxwebValidators.notEmpty({message:'Username cannot be blank.' });\r\n","modelName":null,"json":{}},"message":{"notes":[],"component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup, FormBuilder } from \"@angular/forms\"\r\nimport { RxwebValidators } from '@rxweb/reactive-form-validators';\r\n\r\n@Component({\r\n    selector: 'app-notEmpty-message-validator',\r\n    templateUrl: './not-empty-message.component.html'\r\n})\r\nexport class NotEmptyMessageValidatorComponent implements OnInit {\r\n    userFormGroup: FormGroup\r\n\r\n\tconstructor(\r\n        private formBuilder: FormBuilder )\r\n\t{ }\r\n\r\n    ngOnInit() {\r\n        this.userFormGroup = this.formBuilder.group({\r\n            userName:['', RxwebValidators.notEmpty({message:'Username cannot be blank.' })], \r\n        });\r\n    }\r\n}\r\n","html":"<div>\r\n  <form  [formGroup]=\"userFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label>UserName</label>\r\n      <input type=\"text\" formControlName=\"userName\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">Shows Custom Validation Message.<br/></small>\r\n\t<small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.userName.errors\">{{userFormGroup.controls.userName.errors.notEmpty.message}}<br/></small>\r\n    </div>\r\n    <button [disabled]=\"!userFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","model":null,"modelName":null,"json":{}},"messageKeyExample":{"notes":null,"component":null,"html":null,"model":"RxwebValidators.notEmpty({messageKey:'notEmptyMessageKey' });\r\n","modelName":null,"json":{}},"messageKey":{"notes":[],"component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup, FormBuilder } from \"@angular/forms\"\r\nimport { RxwebValidators } from '@rxweb/reactive-form-validators';\r\n\r\n@Component({\r\n    selector: 'app-notEmpty-messageKey-validator',\r\n    templateUrl: './not-empty-message-key.component.html'\r\n})\r\nexport class NotEmptyMessageKeyValidatorComponent implements OnInit {\r\n    userFormGroup: FormGroup\r\n\r\n\tconstructor(\r\n        private formBuilder: FormBuilder )\r\n\t{ }\r\n\r\n    ngOnInit() {\r\n        this.userFormGroup = this.formBuilder.group({\r\n            fullName:['', RxwebValidators.notEmpty({messageKey:'notEmptyMessageKey' })], \r\n        });\r\n    }\r\n}\r\n","html":"<div>\r\n  <form  [formGroup]=\"userFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label>Full Name</label>\r\n      <input type=\"text\" formControlName=\"fullName\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">Shows Custom Validation Message based on message key<br/></small>\r\n\t<small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.fullName.errors\">{{userFormGroup.controls.fullName.errors.notEmpty.message}}<br/></small>\r\n    </div>\r\n    <button [disabled]=\"!userFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","model":null,"modelName":null,"json":{}},"dynamic":{"notes":[],"component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup, FormBuilder } from \"@angular/forms\"\r\nimport { RxwebValidators } from '@rxweb/reactive-form-validators';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { FormBuilderConfiguration,RxFormBuilder} from '@rxweb/reactive-form-validators';\r\nimport { environment } from 'src/environments/environment';\r\n\r\n@Component({\r\n    selector: 'app-notEmpty-dynamic-validator',\r\n    templateUrl: './not-empty-dynamic.component.html'\r\n})\r\nexport class NotEmptyDynamicValidatorComponent implements OnInit {\r\n    userFormGroup: FormGroup\r\n\r\n\tconstructor(\r\n        private formBuilder: RxFormBuilder , private http: HttpClient )\r\n\t{ }\r\n\r\n    ngOnInit() {\r\n\t\tlet formBuilderConfiguration = new FormBuilderConfiguration();\r\n\t\tthis.http.get('assets/examples/reactive-form-validators/validators/notEmpty/dynamic/dynamic.json?v='+environment.appVersion).subscribe(dynamic => {\r\n\t\t\tformBuilderConfiguration.dynamicValidation = JSON.parse(JSON.stringify(dynamic));\r\n\t\t\tvar user = { firstName:'', middleName:'', lastName:'', userName:'', fullName:'',  }\r\n\t\t\tthis.userFormGroup = this.formBuilder.group(user,formBuilderConfiguration);\r\n\t\t})\r\n    }\r\n}\r\n","html":"<div>\r\n  <form  *ngIf=\"userFormGroup\"  [formGroup]=\"userFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label>First Name</label>\r\n      <input type=\"text\" formControlName=\"firstName\" class=\"form-control\"   />\r\n      <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Middle Name' or 'Last Name', then you need to add 'First Name' input as 'Bharat'<br/></small>\r\n      <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.firstName.errors\">{{userFormGroup.controls.firstName.errors.notEmpty.message}}<br/></small>\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Last Name</label>\r\n      <input type=\"text\" formControlName=\"lastName\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">Conditional notEmpty Validation.<br/></small>\r\n      <small class=\"form-text text-muted\">Conditional validation will be applied if the 'FirstName' field have value of 'Bharat'<br/></small>\r\n      <small class=\"form-text text-muted\">Conditional Expression with type 'string'<br/></small>\r\n\t<small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.lastName.errors\">{{userFormGroup.controls.lastName.errors.notEmpty.message}}<br/></small>\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>UserName</label>\r\n      <input type=\"text\" formControlName=\"userName\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">Shows Custom Validation Message.<br/></small>\r\n\t<small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.userName.errors\">{{userFormGroup.controls.userName.errors.notEmpty.message}}<br/></small>\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Full Name</label>\r\n      <input type=\"text\" formControlName=\"fullName\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">Shows Custom Validation Message based on message key<br/></small>\r\n\t<small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.fullName.errors\">{{userFormGroup.controls.fullName.errors.notEmpty.message}}<br/></small>\r\n    </div>\r\n    <button [disabled]=\"!userFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","model":null,"modelName":null,"json":{"dynamic.json":"{\"firstName\":{\"notEmpty\":true},\"lastName\":{\"notEmpty\":{\"conditionalExpression\":\"x => x.firstName == \\\"Bharat\\\"\"}},\"userName\":{\"notEmpty\":{\"message\":\"Username cannot be blank.\"}},\"fullName\":{\"notEmpty\":{\"messageKey\":\"notEmptyMessageKey\"}}}"}},"add":{"notes":[],"component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup, FormBuilder } from \"@angular/forms\"\r\nimport { RxwebValidators } from '@rxweb/reactive-form-validators';\r\n\r\n@Component({\r\n    selector: 'app-notEmpty-add-validator',\r\n    templateUrl: './not-empty-add.component.html'\r\n})\r\nexport class NotEmptyAddValidatorComponent implements OnInit {\r\n    userInfoFormGroup: FormGroup\r\n\r\n\tconstructor(\r\n        private formBuilder: FormBuilder )\r\n\t{ }\r\n\r\n    ngOnInit() {\r\n        this.userInfoFormGroup = this.formBuilder.group({\r\n            firstName:['', RxwebValidators.notEmpty()], \r\n        });\r\n    }\r\n}\r\n","html":"<div>\r\n  <form  [formGroup]=\"userInfoFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label>First Name</label>\r\n      <input type=\"text\" formControlName=\"firstName\" class=\"form-control\"  />\r\n     <small class=\"form-text text-danger\" *ngIf=\"userInfoFormGroup.controls.firstName.errors\">{{userInfoFormGroup.controls.firstName.errors.notEmpty.message}}<br/></small>\t\r\n    </div>\r\n    <button [disabled]=\"!userInfoFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","model":null,"modelName":null,"json":{}}}