{"complete":{"notes":[],"component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup,Validators } from \"@angular/forms\"\r\nimport { User } from './user.model';\r\n\r\n@Component({\r\n    selector: 'app-notEmpty-complete-template-driven-validation-decorators',\r\n    templateUrl: './not-empty-complete.component.html'\r\n})\r\nexport class NotEmptyCompleteTemplateDrivenValidationDecoratorsComponent implements OnInit {\r\n    user: User\r\n\t\r\n    constructor(\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n       this.user= new User()\r\n    }\r\n}\r\n","html":"<div>\r\n  <form #userForm = \"ngForm\" [rxwebForm]=\"userForm\" [model]=\"user\">\r\n    <div class=\"form-group\">\r\n      <label>First Name</label>\r\n\t    <input type=\"text\" name=\"firstName\" [(ngModel)]=\"user.firstName\"  class=\"form-control\" />\r\n\r\n      <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Middle Name' or 'Last Name', then you need to add 'First Name' input as 'Bharat'<br/></small>\r\n\t   <small class=\"form-text text-danger\" *ngIf=\"userForm.controls?.firstName?.errors\">{{userForm.controls?.firstName?.errors?.notEmpty.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Last Name</label>\r\n\t    <input type=\"text\" name=\"lastName\" [(ngModel)]=\"user.lastName\"  class=\"form-control\" />\r\n\r\n      <small class=\"form-text text-muted\">Conditional notEmpty Validation.<br/></small>\r\n      <small class=\"form-text text-muted\">Conditional validation will be applied if the 'FirstName' field have value of 'Bharat'<br/></small>\r\n      <small class=\"form-text text-muted\">Conditional Expression with type 'string'<br/></small>\r\n\t   <small class=\"form-text text-danger\" *ngIf=\"userForm.controls?.lastName?.errors\">{{userForm.controls?.lastName?.errors?.notEmpty.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>UserName</label>\r\n\t    <input type=\"text\" name=\"userName\" [(ngModel)]=\"user.userName\"  class=\"form-control\" />\r\n\r\n      <small class=\"form-text text-muted\">Shows Custom Validation Message.<br/></small>\r\n\t   <small class=\"form-text text-danger\" *ngIf=\"userForm.controls?.userName?.errors\">{{userForm.controls?.userName?.errors?.notEmpty.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Full Name</label>\r\n\t    <input type=\"text\" name=\"fullName\" [(ngModel)]=\"user.fullName\"  class=\"form-control\" />\r\n\r\n      <small class=\"form-text text-muted\">Shows Custom Validation Message based on message key<br/></small>\r\n\t   <small class=\"form-text text-danger\" *ngIf=\"userForm.controls?.fullName?.errors\">{{userForm.controls?.fullName?.errors?.notEmpty.message}}<br/></small>\t\r\n    </div>\r\n    <button [disabled]=\"!userForm.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","model":"import {  notEmpty, } from   \"@rxweb/reactive-form-validators\"   \r\n\r\nexport class User {\r\n\r\n\t@notEmpty() \r\n\tfirstName: string;\r\n\t\r\n\t\r\n\t//If you want to apply conditional expression of type 'function'\r\n\t@notEmpty({conditionalExpression:(x,y) => x.firstName == \"Bharat\"  }) \r\n\tmiddleName: string;\r\n\t\r\n\t\r\n\t//If you want to apply conditional expression of type 'string'\r\n\t@notEmpty({conditionalExpression:'x => x.firstName == \"Bharat\"' }) \r\n\tlastName: string;\r\n\t\r\n\t\r\n\t@notEmpty({message:'Username cannot be blank.' }) \r\n\tuserName: string;\r\n\t\r\n\t\r\n\t@notEmpty({messageKey:'notEmptyMessageKey' }) \r\n\tfullName: string;\r\n\t\r\n\t\r\n}\r\n","modelName":"user.model.ts","json":{}},"conditionalExpressionExampleFunction":{"notes":null,"component":null,"html":null,"model":"@notEmpty({conditionalExpression:(x,y) => x.firstName == \"Bharat\"  }) \r\nmiddleName: string;\r\n","modelName":null,"json":{}},"conditionalExpression":{"notes":[],"component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup,Validators } from \"@angular/forms\"\r\nimport { User } from './user.model';\r\n\r\n@Component({\r\n    selector: 'app-notEmpty-conditionalExpression-template-driven-validation-decorators',\r\n    templateUrl: './not-empty-conditional-expression.component.html'\r\n})\r\nexport class NotEmptyConditionalExpressionTemplateDrivenValidationDecoratorsComponent implements OnInit {\r\n    user: User\r\n\t\r\n    constructor(\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n       this.user= new User()\r\n    }\r\n}\r\n","html":"<div>\r\n  <form #userForm = \"ngForm\" [rxwebForm]=\"userForm\" [model]=\"user\">\r\n    <div class=\"form-group\">\r\n      <label>First Name</label>\r\n\t    <input type=\"text\" name=\"firstName\" [(ngModel)]=\"user.firstName\"  class=\"form-control\" />\r\n\r\n      <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Middle Name' or 'Last Name', then you need to add 'First Name' input as 'Bharat'<br/></small>\r\n\t   <small class=\"form-text text-danger\" *ngIf=\"userForm.controls?.firstName?.errors\">{{userForm.controls?.firstName?.errors?.notEmpty.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Last Name</label>\r\n\t    <input type=\"text\" name=\"lastName\" [(ngModel)]=\"user.lastName\"  class=\"form-control\" />\r\n\r\n      <small class=\"form-text text-muted\">Conditional notEmpty Validation.<br/></small>\r\n      <small class=\"form-text text-muted\">Conditional validation will be applied if the 'FirstName' field have value of 'Bharat'<br/></small>\r\n      <small class=\"form-text text-muted\">Conditional Expression with type 'string'<br/></small>\r\n\t   <small class=\"form-text text-danger\" *ngIf=\"userForm.controls?.lastName?.errors\">{{userForm.controls?.lastName?.errors?.notEmpty.message}}<br/></small>\t\r\n    </div>\r\n    <button [disabled]=\"!userForm.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","model":"import {  notEmpty, } from   \"@rxweb/reactive-form-validators\"   \r\n\r\nexport class User {\r\n\r\n\t@notEmpty() \r\n\tfirstName: string;\r\n\t\r\n\t\r\n\t//If you want to apply conditional expression of type 'string'\r\n\t@notEmpty({conditionalExpression:'x => x.firstName == \"Bharat\"' }) \r\n\tlastName: string;\r\n\t\r\n\t\r\n\t//If you want to apply conditional expression of type 'function'\r\n\t@notEmpty({conditionalExpression:(x,y) => x.firstName == \"Bharat\"  }) \r\n\tmiddleName: string;\r\n\t\r\n\t\r\n}\r\n","modelName":"user.model.ts","json":{}},"conditionalExpressionExampleString":{"notes":null,"component":null,"html":null,"model":"@notEmpty({conditionalExpression:'x => x.firstName == \"Bharat\"' }) \r\nlastName: string;\r\n","modelName":null,"json":{}},"messageExample":{"notes":null,"component":null,"html":null,"model":"@notEmpty({message:'Username cannot be blank.' }) \r\nuserName: string;\r\n","modelName":null,"json":{}},"message":{"notes":[],"component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup,Validators } from \"@angular/forms\"\r\nimport { User } from './user.model';\r\n\r\n@Component({\r\n    selector: 'app-notEmpty-message-template-driven-validation-decorators',\r\n    templateUrl: './not-empty-message.component.html'\r\n})\r\nexport class NotEmptyMessageTemplateDrivenValidationDecoratorsComponent implements OnInit {\r\n    user: User\r\n\t\r\n    constructor(\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n       this.user= new User()\r\n    }\r\n}\r\n","html":"<div>\r\n  <form #userForm = \"ngForm\" [rxwebForm]=\"userForm\" [model]=\"user\">\r\n    <div class=\"form-group\">\r\n      <label>UserName</label>\r\n\t    <input type=\"text\" name=\"userName\" [(ngModel)]=\"user.userName\"  class=\"form-control\" />\r\n\r\n      <small class=\"form-text text-muted\">Shows Custom Validation Message.<br/></small>\r\n\t   <small class=\"form-text text-danger\" *ngIf=\"userForm.controls?.userName?.errors\">{{userForm.controls?.userName?.errors?.notEmpty.message}}<br/></small>\t\r\n    </div>\r\n    <button [disabled]=\"!userForm.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","model":"import {  notEmpty, } from   \"@rxweb/reactive-form-validators\"   \r\n\r\nexport class User {\r\n\r\n\t@notEmpty({message:'Username cannot be blank.' }) \r\n\tuserName: string;\r\n\t\r\n\t\r\n}\r\n","modelName":"user.model.ts","json":{}},"messageKeyExample":{"notes":null,"component":null,"html":null,"model":"@notEmpty({messageKey:'notEmptyMessageKey' }) \r\nfullName: string;\r\n","modelName":null,"json":{}},"messageKey":{"notes":[],"component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup,Validators } from \"@angular/forms\"\r\nimport { User } from './user.model';\r\n\r\n@Component({\r\n    selector: 'app-notEmpty-messageKey-template-driven-validation-decorators',\r\n    templateUrl: './not-empty-message-key.component.html'\r\n})\r\nexport class NotEmptyMessageKeyTemplateDrivenValidationDecoratorsComponent implements OnInit {\r\n    user: User\r\n\t\r\n    constructor(\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n       this.user= new User()\r\n    }\r\n}\r\n","html":"<div>\r\n  <form #userForm = \"ngForm\" [rxwebForm]=\"userForm\" [model]=\"user\">\r\n    <div class=\"form-group\">\r\n      <label>Full Name</label>\r\n\t    <input type=\"text\" name=\"fullName\" [(ngModel)]=\"user.fullName\"  class=\"form-control\" />\r\n\r\n      <small class=\"form-text text-muted\">Shows Custom Validation Message based on message key<br/></small>\r\n\t   <small class=\"form-text text-danger\" *ngIf=\"userForm.controls?.fullName?.errors\">{{userForm.controls?.fullName?.errors?.notEmpty.message}}<br/></small>\t\r\n    </div>\r\n    <button [disabled]=\"!userForm.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","model":"import {  notEmpty, } from   \"@rxweb/reactive-form-validators\"   \r\n\r\nexport class User {\r\n\r\n\t@notEmpty({messageKey:'notEmptyMessageKey' }) \r\n\tfullName: string;\r\n\t\r\n\t\r\n}\r\n","modelName":"user.model.ts","json":{}},"add":{"notes":[],"component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup,Validators } from \"@angular/forms\"\r\nimport { UserInfo } from './user-info.model';\r\n\r\n@Component({\r\n    selector: 'app-notEmpty-add-template-driven-validation-decorators',\r\n    templateUrl: './not-empty-add.component.html'\r\n})\r\nexport class NotEmptyAddTemplateDrivenValidationDecoratorsComponent implements OnInit {\r\n    userinfo: UserInfo\r\n\t\r\n    constructor(\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n       this.userinfo= new UserInfo()\r\n    }\r\n}\r\n","html":"<div>\r\n  <form #userinfoForm = \"ngForm\" [rxwebForm]=\"userinfoForm\" [model]=\"userinfo\">\r\n    <div class=\"form-group\">\r\n      <label>First Name</label>\r\n\t    <input type=\"text\" name=\"firstName\" [(ngModel)]=\"userinfo.firstName\"  class=\"form-control\" />\r\n\r\n\t   <small class=\"form-text text-danger\" *ngIf=\"userinfoForm.controls?.firstName?.errors\">{{userinfoForm.controls?.firstName?.errors?.notEmpty.message}}<br/></small>\t\r\n    </div>\r\n    <button [disabled]=\"!userinfoForm.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","model":"import {  notEmpty, } from   \"@rxweb/reactive-form-validators\"   \r\n\r\nexport class UserInfo {\r\n\r\n\t@notEmpty() \r\n\tfirstName: string;\r\n\t\r\n\t\r\n}\r\n","modelName":"user-info.model.ts","json":{}}}