{
    "static": {
        "component": "import { Component,OnInit } from \"@angular/core\";\r\nimport { DynamicFormBuildConfig, DynamicFormConfiguration, RxFormBuilder } from \"@rxweb/reactive-form-validators\";\r\n\r\n@Component({\r\n    selector: 'app-dropdown-static',\r\n    templateUrl: './dropdown-static.component.html'\r\n})\r\n\r\n\r\nexport class DropDownStaticComponent implements OnInit {\r\n    serverData: Array<{ [key: string]: any }> = [{        \r\n            name: \"country\",\r\n            type: \"select\",\r\n            source: [{ countryId: 1, countryName: \"India\" }],\r\n            textPropName: 'countryName',\r\n            valuePropName: 'countryId', \r\n            ui: {\r\n                label: 'Country',\r\n                placeholder: 'Select',\r\n                            \r\n            }\r\n    }]\r\n    viewMode:string = \"bootstrap-basic\";\r\n    uiBindings:string[] = [\"country\"];\r\n    dynamicFormBuildConfig: DynamicFormBuildConfig;\r\n    dynamicFormConfiguration: DynamicFormConfiguration;\r\n    constructor(private formBuilder: RxFormBuilder) { }\r\n    ngOnInit()\r\n    {\r\n        this.dynamicFormBuildConfig = this.formBuilder.dynamicForm(this.serverData,this.dynamicFormConfiguration);\r\n    }\r\n}",
        "html": "<div>\r\n    <form [rxDynamicForm]=\"dynamicFormBuildConfig\">\r\n        <rxweb-dynamic-form [viewMode]=\"viewMode\" [controlsConfig]=\"dynamicFormBuildConfig.controlsConfig\"\r\n            [bindings]=\"uiBindings\">\r\n    </rxweb-dynamic-form>    \r\n       </form>         \r\n</div> "
    },
    "cascading": {
        "component": "import { Component,OnInit } from \"@angular/core\";\r\nimport { action,DynamicFormBuildConfig, DynamicFormConfiguration, RxFormBuilder, FormControlConfig } from \"@rxweb/reactive-form-validators\";\r\n\r\n@action('source',[\r\n    {\r\n        keyName:'asyncSource',\r\n        actions : {\r\n            filter:function(){\r\n                let promise = new Promise<any[]>((resolve, reject) => {\r\n                    resolve(this.config.source.filter(t => t.countryId == this.dynamicModel.countryId.value));\r\n                });\r\n                return promise\r\n            }\r\n        }\r\n    },\r\n    {\r\n        keyName:'nonAsyncSource',\r\n        actions: {\r\n            filter:function(){\r\n                if (this.controlsConfig && this.controlsConfig.country.value)\r\n                return this.config.source.filter(t => t.countryId == this.controlsConfig.country.value);\r\n            else\r\n                return [];\r\n            }\r\n        }\r\n    }\r\n])\r\nexport class SourceModel extends FormControlConfig{\r\n    \r\n}\r\n\r\n@Component({\r\n    selector: 'app-dropdown-cascading',\r\n    templateUrl: './dropdown-cascading.component.html'\r\n})\r\n\r\nexport class DropDownCascadingComponent implements OnInit {\r\n    serverData: Array<{ [key: string]: any }> = [{        \r\n        name: \"country\",\r\n        type: \"select\",\r\n        source: [{ countryId: 1, countryName: \"India\" }],\r\n        textPropName: 'countryName',\r\n        valuePropName: 'countryId', \r\n        ui: {\r\n            label: 'Country',\r\n            placeholder: 'Select',\r\n                        \r\n        }\r\n    },\r\n    {\r\n        name: \"state\",\r\n         type: \"select\",\r\n         source: [{ stateId: 1, stateName: \"Gujarat\", countryId: 1 }, { stateId: 2, stateName: \"Delhi\", countryId: 1 },{ stateId: 3, stateName: \"Melbourne\", countryId: 2 }],\r\n         textPropName: 'stateName',\r\n         valuePropName: 'stateId', \r\n         actionKeyNames: [\"nonAsyncSource\"],\r\n         modelName:'source',\r\n         ui: {\r\n            label: 'State',\r\n            placeholder: 'Select'                            \r\n        }\r\n    }]\r\n    viewMode:string = \"bootstrap-basic\";\r\n    uiBindings:string[] = [\"country\",\"state\"];\r\n    dynamicFormBuildConfig: DynamicFormBuildConfig;\r\n    dynamicFormConfiguration: DynamicFormConfiguration;\r\n    constructor(private formBuilder: RxFormBuilder) { }\r\n    ngOnInit()\r\n    {\r\n      this.dynamicFormBuildConfig = this.formBuilder.dynamicForm(this.serverData,this.dynamicFormConfiguration);\r\n    }\r\n}",
        "html": "<div>\r\n    <form [rxDynamicForm]=\"dynamicFormBuildConfig\">\r\n        <rxweb-dynamic-form [viewMode]=\"viewMode\" [controlsConfig]=\"dynamicFormBuildConfig.controlsConfig\"\r\n            [bindings]=\"uiBindings\">\r\n    </rxweb-dynamic-form>    \r\n       </form>         \r\n</div> "
    }
}