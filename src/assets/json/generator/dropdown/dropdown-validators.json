{
    "static": {
        "notes": "ui-bindings",
        "component": "import { Component, OnInit } from \"@angular/core\";\r\nimport { DynamicFormBuildConfig, DynamicFormConfiguration, RxDynamicFormBuilder } from \"@rxweb/reactive-dynamic-forms\";\r\n\r\n@Component({\r\n    selector: 'app-dropdown-static',\r\n    templateUrl: './dropdown-static.component.html'\r\n})\r\n\r\n\r\nexport class DropdownStaticComponent implements OnInit {\r\n\r\n    serverData: Array<{ [key: string]: any }> = [{\r\n        name: \"gender\",\r\n        type: \"select\",\r\n        source: [{ value: 1, text: \"Male\" },{ value: 2, text: \"Female\" }],\r\n        ui: {\r\n            label: 'Gender',\r\n            placeholder: 'Select',\r\n        }\r\n    }]\r\n    \r\n    uiBindings: string[] = [\"gender\"];\r\n    \r\n    dynamicFormBuildConfig: DynamicFormBuildConfig;\r\n    \r\n    constructor(private formBuilder: RxDynamicFormBuilder) { }\r\n    \r\n    ngOnInit() {\r\n        this.dynamicFormBuildConfig = this.formBuilder.formGroup(this.serverData, {});\r\n    }\r\n}",
        "html": "<form [formGroup]=\"dynamicFormBuildConfig.formGroup\">\r\n    <div viewMode=\"basic\" [rxwebDynamicForm]=\"dynamicFormBuildConfig\" [uiBindings]=\"uiBindings\"></div>\r\n</form>",
        "model": null,
        "modelName": null,
        "json": {}
    },
    "sync": {
        "notes": "ui-bindings",
        "component": "import { Component, OnInit } from \"@angular/core\";\r\nimport { DynamicFormBuildConfig, DynamicFormConfiguration, RxDynamicFormBuilder } from \"@rxweb/reactive-dynamic-forms\";\r\nimport { SourceSyncConditionalModel } from './source';\r\n\r\n@Component({\r\n  selector: 'app-dropdown-sync',\r\n  templateUrl: './dropdown-sync.component.html'\r\n})\r\n\r\nexport class DropdownSyncComponent implements OnInit {\r\n\r\n  serverData = [\r\n    {\r\n      name: \"country\", \r\n      type: \"select\", \r\n      source: [{ text: \"India\", value: 1 }, { text: \"US\", value: 2 }, { text: \"Canada\", value: 3 }], \r\n      ui: {\r\n        label: 'Country',\r\n        placeholder: 'select'\r\n      }\r\n    }, \r\n    {\r\n      name: \"state\", \r\n      modelName: 'sourceSync', \r\n      type: \"select\", \r\n      filter: [{ text: \"Gujarat\", value: 1, countryId: 1 }, { text: \"Delhi\", value: 2, countryId: 1 }, { text: \"NY\", value: 3, countryId: 2 }], \r\n      ui: {\r\n        label: 'State',\r\n        placeholder: 'select'\r\n      }\r\n    }\r\n  ]\r\n\r\n  uiBindings: string[] = [\"country\", \"state\"];\r\n\r\n  dynamicFormBuildConfig: DynamicFormBuildConfig;\r\n\r\n  dynamicFormConfiguration: DynamicFormConfiguration;\r\n\r\n  constructor(private formBuilder: RxDynamicFormBuilder) { }\r\n\r\n  ngOnInit() {\r\n    this.dynamicFormConfiguration = {\r\n      controlConfigModels: [{ modelName: 'sourceSync', model: SourceSyncConditionalModel }],\r\n    }\r\n    this.dynamicFormBuildConfig = this.formBuilder.formGroup(this.serverData, this.dynamicFormConfiguration);\r\n  }\r\n\r\n}",
        "html": "<form [formGroup]=\"dynamicFormBuildConfig.formGroup\">\r\n    <div viewMode=\"basic\" [rxwebDynamicForm]=\"dynamicFormBuildConfig\" [uiBindings]=\"uiBindings\"></div>\r\n</form>",
        "model": "import { FormControlConfig } from \"@rxweb/reactive-dynamic-forms\"\r\n\r\nexport class SourceSyncConditionalModel extends FormControlConfig{\r\n\r\n    private _filter: any[];\r\n    \r\n    set filter(value: any[]) {\r\n        this._filter = value;\r\n    }\r\n\r\n    get filter() {\r\n        return this._filter.filter(t => t.countryId == this.controlsConfig.country.value);\r\n    }\r\n}\r\n",
        "modelName": "source.ts",
        "json": {}
    },
    "async": {
        "notes": "ui-bindings",
        "component": "import { Component, OnInit } from \"@angular/core\";\r\nimport { DynamicFormBuildConfig, DynamicFormConfiguration, RxDynamicFormBuilder } from \"@rxweb/reactive-dynamic-forms\";\r\nimport { SourceAsyncConditionalModel } from \"./source\";\r\n\r\n@Component({\r\n  selector: 'app-dropdown-async',\r\n  templateUrl: './dropdown-async.component.html'\r\n})\r\n\r\nexport class DropdownAsyncComponent implements OnInit {\r\n\r\n  serverData: Array<{ [key: string]: any }> = [\r\n    {\r\n      name: \"country\",\r\n      type: \"select\",\r\n      source: [{ text: \"India\", value: 1 }, { text: \"US\", value: 2 }, { text: \"Canada\", value: 3 }],\r\n      ui: {\r\n        label: 'Country',\r\n        placeholder: 'select'\r\n      }\r\n    },\r\n    {\r\n      name: \"state\",\r\n      modelName: 'sourceAsync',\r\n      type: \"select\",\r\n      ui: {\r\n        label: 'State',\r\n        placeholder: 'select'\r\n      }\r\n    }\r\n  ]\r\n  \r\n  uiBindings: string[] = [\"country\", \"state\"];\r\n  \r\n  dynamicFormBuildConfig: DynamicFormBuildConfig;\r\n  \r\n  dynamicFormConfiguration: DynamicFormConfiguration;\r\n  \r\n  constructor(private formBuilder: RxDynamicFormBuilder) { }\r\n  \r\n  ngOnInit() {\r\n  \r\n    this.dynamicFormConfiguration = {\r\n      controlConfigModels: [{ modelName: 'sourceAsync', model: SourceAsyncConditionalModel }],\r\n    }\r\n    this.dynamicFormBuildConfig = this.formBuilder.formGroup(this.serverData, this.dynamicFormConfiguration);\r\n  \r\n  }\r\n}",
        "html": "<form [formGroup]=\"dynamicFormBuildConfig.formGroup\">\r\n    <div viewMode=\"basic\" [rxwebDynamicForm]=\"dynamicFormBuildConfig\" [uiBindings]=\"uiBindings\"></div>\r\n</form>",
        "model": "import { FormControlConfig } from \"@rxweb/reactive-dynamic-forms\"\r\n\r\nexport class SourceAsyncConditionalModel extends FormControlConfig{\r\n\r\n    filter() {\r\n        let promise = new Promise<any>((resolve, reject) => {\r\n            let source = [{ text: \"Gujarat\", value: 1, countryId: 1 }, { text: \"Delhi\", value: 2, countryId: 1 }, { text: \"NY\", value: 3, countryId: 2 }]\r\n            this.source = source.filter(t => t.countryId == this.controlsConfig.country.value);\r\n        });\r\n    }\r\n    \r\n}\r\n",
        "modelName": "source.ts",
        "json": {}
    },
    "value": {
        "notes": "ui-bindings",
        "component": "import { Component,OnInit } from \"@angular/core\";\r\nimport { DynamicFormBuildConfig, DynamicFormConfiguration, RxDynamicFormBuilder } from \"@rxweb/reactive-dynamic-forms\";\r\n\r\n@Component({\r\n    selector: 'app-dropdown-value',\r\n    templateUrl: './dropdown-value.component.html'\r\n})\r\n\r\nexport class DropdownValueComponent implements OnInit {\r\n\r\n    serverData: Array<{ [key: string]: any }> = [{        \r\n            name: \"department\",\r\n            type: \"select\",\r\n            value:1,\r\n            source: [{ departmentId: 1, departmentName: \"Dotnet\" },{ departmentId: 2, departmentName: \"php\" },{ departmentId: 2, departmentName: \"Android\" }],\r\n            textPropName: 'departmentId',\r\n            valuePropName: 'departmentName',\r\n            ui: {\r\n                label: 'Department',\r\n                placeholder: 'Select',\r\n                            \r\n            }\r\n    }]\r\n\r\n    uiBindings:string[] = [\"department\"];\r\n\r\n    dynamicFormBuildConfig: DynamicFormBuildConfig;\r\n\r\n    constructor(private formBuilder: RxDynamicFormBuilder) { }\r\n\r\n    ngOnInit()\r\n    {\r\n        this.dynamicFormBuildConfig = this.formBuilder.formGroup(this.serverData, {});\r\n    }\r\n}",
        "html": "<form [formGroup]=\"dynamicFormBuildConfig.formGroup\">\r\n    <div viewMode=\"basic\" [rxwebDynamicForm]=\"dynamicFormBuildConfig\" [uiBindings]=\"uiBindings\"></div>\r\n</form>",
        "model": null,
        "modelName": null,
        "json": {}
    },
    "multiselect": {
        "notes": "ui-bindings",
        "component": "import { Component, OnInit } from \"@angular/core\";\r\nimport { DynamicFormBuildConfig, DynamicFormConfiguration, RxDynamicFormBuilder } from \"@rxweb/reactive-dynamic-forms\";\r\n\r\n@Component({\r\n    selector: 'app-dropdown-multiselect',\r\n    templateUrl: './dropdown-multiselect.component.html'\r\n})\r\n\r\n\r\nexport class DropdownMultiselectComponent implements OnInit {\r\n\r\n    serverData: Array<{ [key: string]: any }> = [{\r\n        name: \"hobbies\",\r\n        type: \"select\",\r\n        source: [{ value: 1, text: \"Singing\" },{ value: 2, text: \"Dancing\" }, { value: 3, text: \"Travelling\" }, { value: 4, text: \"Cooking\" }],\r\n        multiselect: true,\r\n        ui: {\r\n            label: 'Hobbies',\r\n        }\r\n    }]\r\n\r\n    uiBindings: string[] = [\"hobbies\"];\r\n\r\n    dynamicFormBuildConfig: DynamicFormBuildConfig;\r\n\r\n    constructor(private formBuilder: RxDynamicFormBuilder) { }\r\n    \r\n    ngOnInit() {\r\n        this.dynamicFormBuildConfig = this.formBuilder.formGroup(this.serverData, {});\r\n    }\r\n}",
        "html": "<form [formGroup]=\"dynamicFormBuildConfig.formGroup\">\r\n    <div viewMode=\"basic\" [rxwebDynamicForm]=\"dynamicFormBuildConfig\" [uiBindings]=\"uiBindings\"></div>\r\n</form>",
        "model": null,
        "modelName": null,
        "json": {}
    }
}