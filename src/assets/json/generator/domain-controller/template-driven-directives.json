{"rightSidebarLinks":[{"id":"domain-controller","title":"domain-controller","subLink":null},{"id":"generateadomaincontroller","title":"Generate a Domain Controller","subLink":[]},{"id":"methods","title":"Methods","subLink":[]},{"id":"example","title":"Example","subLink":[]},{"id":"seealso","title":"See Also","subLink":[]}],"title":"DomainController","description":"","validatorType":"template-driven","validationTypeTitle":"Template Driven","type":"simple","category":"rxwebcore","subCategory":null,"linkTitle":"domaincontroller","tabArray":{},"innerHtml":null,"htmlContent":"<p class='showHideElement' >Some entities may involve complex logic while implementation of the methods in the API, When there is a lot of custom business logic required while executing the data objects a <span class='highlighted'>DomainController</span> is made. When a domain controller is made it indicates that the complexity of the controller is high and it generates a seperate domain class where the logic is written and  it is refered in the controller class.</p>\r\n<p class='showHideElement' >The controller must be inherited from the class <span class='highlighted'>BaseDomainController</span> in which the entity name is passed as a parameter. The controller will have a predefined route which include the controller name. For example: <span class='highlighted'>[Route(\"api/Users\")]</span> </p>\r\n<p class='showHideElement' >Users Entity requires a custom logic to be added into it. For example it is having complex data entity implementation   </p>\r\n<blockquote class='showHideElement' ><p>Name of that basic controller must have a suffix \"Controller\". For example: <span class='highlighted'>UsersController</span>.</p></blockquote>\r\n<div class='row page-section' id= 'generateadomaincontroller'>\r\n<div class='col-lg-12'>\r\n<h2>Generate a Domain Controller<a title='Link to this heading' class='link-header'  href='/rxwebcore/domaincontroller/decorators#generateadomaincontroller'><i class='fa fa-link'></i></a></h2>\r\n\r\n<p class='showHideElement' >To create a domain controller, open the <span class='highlighted'>Package Manager Console</span> and run the following command.</p>\r\n<blockquote class='showHideElement' ><p>rxwebcore --controller --domain --main &ltController_Name&gt --uow &ltModule_Name&gt</p></blockquote>\r\n<p class='showHideElement' >Lets consider a scenario where you want to create a <span class='highlighted'>UsersController</span> with high complexity true in the <span class='highlighted'>UsersModule</span>, you have to write:</p>\r\n<blockquote class='showHideElement' ><p>rxwebcore --controller --domain --main Users --uow User</p></blockquote>\r\n<p class='showHideElement' >In the above command by writing --domain indicates its complexity high, Users is the controller name and User is the Module name. It will create a controller <span class='highlighted'>UsersController</span> in <span class='highlighted'>UsersModule</span> in Api folder of the project and <span class='highlighted'>UsersDomain.cs</span> in the Domain folder of the project.</p>\r\n</div></div>\r\n<div class='row page-section' id= 'methods'>\r\n<div class='col-lg-12'>\r\n<h2>Methods<a title='Link to this heading' class='link-header'  href='/rxwebcore/domaincontroller/decorators#methods'><i class='fa fa-link'></i></a></h2>\r\n\r\n<table class=\"table table-bordered\">\r\n<tr><th>Method</th><th>Description</th><th>Return Type</th><th>Request Params</th><th>Request Body</th><th>Response</th></tr>\r\n<tr><td>GetAsync</td><td>Get all the objects of the entity</td><td>object</td><td> - </td><td> - </td><td>complete list of that entity</td></tr>\r\n<tr><td>GetById</td><td>Get Object By Id</td><td>Entity_Name</td><td>Id of that entity which you want to get</td><td> - </td><td>Single entity based on the id</td></tr>\r\n<tr><td>AddValidation</td><td>Adds validation for the particular entity</td><td>string</td><td>entity object</td><td> - </td><td>Added Validation</td></tr>\r\n<tr><td>UpdateValidation</td><td>Updates validation for the particular entity</td><td>string</td><td>entity object</td><td> - </td><td>NoContent()</td></tr>\r\n<tr><td>AddAsync</td><td>Adding objects of the particular entity</td><td>void</td><td>entity object</td><td> - </td><td>NoContent()</td></tr>\r\n<tr><td>UpdateAsync</td><td>Updating objects of the particular entity</td><td>void</td><td>entity object</td><td> - </td><td>NoContent()</td></tr>\r\n<tr><td>DeleteValidation</td><td>Deletes validations for the particular entity</td><td>void</td><td>entity object</td><td> - </td><td>NoContent()</td></tr>\r\n<tr><td>DeleteAsync</td><td>deletes a particular entity</td><td>void</td><td>entity object</td><td> - </td><td>NoContent()</td></tr>\r\n</table>\r\n</div></div>\r\n<div class='row page-section' id= 'example'>\r\n<div class='col-lg-12'>\r\n<h2>Example<a title='Link to this heading' class='link-header'  href='/rxwebcore/domaincontroller/decorators#example'><i class='fa fa-link'></i></a></h2>\r\n\r\n<pre><code class='<span class='highlighted'>js'>\r\n    [ApiController]\r\n    [Route(\"api/[controller]\")]\r\n\tpublic class UsersController : BaseDomainController<User>\r\n    {\r\n        public UsersController(IUserDomain domain):base(domain) {}\r\n    }\r\n</code></pre>\r\n<p class='showHideElement' >The refered </span>IUserDomain<span class='highlighted'> interface will be created  in  </span>UsersDomain.cs<span class='highlighted'> in the Domain folder of the project where the business logic code will use methods of </span>Uow<span class='highlighted'>.</p>\r\n<pre><code class='</span>js'>\r\n    public class UsersDomain : IUsersDomain\r\n    {\r\n        public UsersDomain(IUserUow uow) {\r\n            this.Uow = uow;\r\n        }\r\n        public Task<object> GetAsync(Dictionary<string, object> parameters)\r\n        {\r\n            throw new NotImplementedException();\r\n        }\r\n        public Task<User> GetBy(Dictionary<string, object> parameters)\r\n        {\r\n            throw new NotImplementedException();\r\n        }\r\n        public HashSet<string> AddValidation(User entity)\r\n        {\r\n            return ValidationMessages;\r\n        }\r\n        public async Task AddAsync(User entity)\r\n        {\r\n            await Uow.RegisterNewAsync(entity);\r\n            await Uow.CommitAsync();\r\n        }\r\n        public HashSet<string> UpdateValidation(User entity)\r\n        {\r\n            return ValidationMessages;\r\n        }\r\n        public async Task UpdateAsync(User entity)\r\n        {\r\n            await Uow.RegisterDirtyAsync(entity);\r\n            await Uow.CommitAsync();\r\n        }\r\n        public HashSet<string> DeleteValidation(Dictionary<string, object> parameters)\r\n        {\r\n            return ValidationMessages;\r\n        }\r\n        public Task DeleteAsync(Dictionary<string, object> parameters)\r\n        {\r\n            throw new NotImplementedException();\r\n        }\r\n        public IMasterUow Uow { get; set; }\r\n        private HashSet<string> ValidationMessages { get; set; } = new HashSet<string>();\r\n    }\r\n</code></pre>\r\n</div></div>\r\n<div class='row page-section' id= 'seealso'>\r\n<div class='col-lg-12'>\r\n<h2>See Also<a title='Link to this heading' class='link-header'  href='/rxwebcore/domaincontroller/decorators#seealso'><i class='fa fa-link'></i></a></h2>\r\n\r\n<p class='showHideElement' >Lookup Controller</p>\r\n</div></div>\r\n"}