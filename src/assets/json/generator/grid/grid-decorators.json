{"complete":{"notes":null,"component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from \"@angular/forms\"\r\nimport { RxFormBuilder } from '@rxweb/reactive-form-validators';\r\n\r\nimport { DigitalInfo } from './digital-info.model';\r\n\r\n@Component({\r\n    selector: 'app-grid-complete',\r\n    templateUrl: './grid-complete.component.html'\r\n})\r\nexport class GridCompleteComponent implements OnInit {\r\n    digitalInfoFormGroup: FormGroup\r\n\r\n    constructor(\r\n        private formBuilder: RxFormBuilder    ) { }\r\n\r\n    ngOnInit() {\r\n        let digitalInfo = new DigitalInfo();\r\n        this.digitalInfoFormGroup = this.formBuilder.formGroup(digitalInfo);\r\n    }\r\n}\r\n","html":"<div>\r\n  <form  [formGroup]=\"digitalInfoFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label>SoundRecording GRid</label>\r\n      <input type=\"text\" formControlName=\"soundRecordingGrid\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">If you want to apply conditional validation on 'AudioVisualRecording GRid' or 'Photograph GRid' then you need to add this input to 'A12425GABC1234002M'.<br/></small>\r\n\t <small class=\"form-text text-danger\" *ngIf=\"digitalInfoFormGroup.controls.soundRecordingGrid.errors\">{{digitalInfoFormGroup.controls.soundRecordingGrid.errors.grid?.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>AudioVisualRecording GRid</label>\r\n      <input type=\"text\" formControlName=\"audioVisualRecordingGrid\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">If you want to apply conditional validation on 'AudioVisualRecording GRid' then you need to add 'SoundRecording GRid' field input to 'A12425GABC1234002M'.<br/></small>\r\n      <small class=\"form-text text-muted\">Conditional Expression with type 'function'<br/></small>\r\n\t <small class=\"form-text text-danger\" *ngIf=\"digitalInfoFormGroup.controls.audioVisualRecordingGrid.errors\">{{digitalInfoFormGroup.controls.audioVisualRecordingGrid.errors.grid?.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Photograph GRid</label>\r\n      <input type=\"text\" formControlName=\"photographGrid\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Photograph GRid' then you need to add 'SoundRecording GRid' field input to 'A12425GABC1234002M'.<br/></small>\r\n      <small class=\"form-text text-muted\">Conditional Expression with type 'string'<br/></small>\r\n\t <small class=\"form-text text-danger\" *ngIf=\"digitalInfoFormGroup.controls.photographGrid.errors\">{{digitalInfoFormGroup.controls.photographGrid.errors.grid?.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>GraphicImage GRid</label>\r\n      <input type=\"text\" formControlName=\"graphicImageGrid\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">Shows custom message<br/></small>\r\n\t <small class=\"form-text text-danger\" *ngIf=\"digitalInfoFormGroup.controls.graphicImageGrid.errors\">{{digitalInfoFormGroup.controls.graphicImageGrid.errors.grid?.message}}<br/></small>\t\r\n    </div>\r\n    <button [disabled]=\"!digitalInfoFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","model":"import {  grid, } from \"@rxweb/reactive-form-validators\"\r\n\r\nexport class DigitalInfo {\r\n\r\n\t@grid() \r\n\tsoundRecordingGrid: string;\r\n\r\n\t//If you want to apply conditional expression of type 'function'\r\n\t@grid({conditionalExpression:(x,y) => x.soundRecordingGrid == \"A12425GABC1234002M\"  }) \r\n\taudioVisualRecordingGrid: string;\r\n\r\n\t//If you want to apply conditional expression of type 'string'\r\n\t@grid({conditionalExpression:'x => x.soundRecordingGrid ==\"A12425GABC1234002M\"' }) \r\n\tphotographGrid: string;\r\n\r\n\t@grid({message:'This is Not valid GRid' }) \r\n\tgraphicImageGrid: string;\r\n\r\n}\r\n","modelName":"digital-info.model.ts","json":{}},"conditionalExpressionExampleFunction":{"notes":null,"component":null,"html":null,"model":"@grid({conditionalExpression:(x,y) => x.soundRecordingGrid == \"A12425GABC1234002M\"  }) \r\naudioVisualRecordingGrid: string;\r\n","modelName":null,"json":{}},"conditionalExpression":{"notes":null,"component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from \"@angular/forms\"\r\nimport { RxFormBuilder } from '@rxweb/reactive-form-validators';\r\n\r\nimport { DigitalInfo } from './digital-info.model';\r\n\r\n@Component({\r\n    selector: 'app-grid-conditionalExpression',\r\n    templateUrl: './grid-conditional-expression.component.html'\r\n})\r\nexport class GridConditionalExpressionComponent implements OnInit {\r\n    digitalInfoFormGroup: FormGroup\r\n\r\n    constructor(\r\n        private formBuilder: RxFormBuilder    ) { }\r\n\r\n    ngOnInit() {\r\n        let digitalInfo = new DigitalInfo();\r\n        this.digitalInfoFormGroup = this.formBuilder.formGroup(digitalInfo);\r\n    }\r\n}\r\n","html":"<div>\r\n  <form  [formGroup]=\"digitalInfoFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label>SoundRecording GRid</label>\r\n      <input type=\"text\" formControlName=\"soundRecordingGrid\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">If you want to apply conditional validation on 'AudioVisualRecording GRid' or 'Photograph GRid' then you need to add this input to 'A12425GABC1234002M'.<br/></small>\r\n\t <small class=\"form-text text-danger\" *ngIf=\"digitalInfoFormGroup.controls.soundRecordingGrid.errors\">{{digitalInfoFormGroup.controls.soundRecordingGrid.errors.grid?.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Photograph GRid</label>\r\n      <input type=\"text\" formControlName=\"photographGrid\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Photograph GRid' then you need to add 'SoundRecording GRid' field input to 'A12425GABC1234002M'.<br/></small>\r\n      <small class=\"form-text text-muted\">Conditional Expression with type 'string'<br/></small>\r\n\t <small class=\"form-text text-danger\" *ngIf=\"digitalInfoFormGroup.controls.photographGrid.errors\">{{digitalInfoFormGroup.controls.photographGrid.errors.grid?.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>AudioVisualRecording GRid</label>\r\n      <input type=\"text\" formControlName=\"audioVisualRecordingGrid\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">If you want to apply conditional validation on 'AudioVisualRecording GRid' then you need to add 'SoundRecording GRid' field input to 'A12425GABC1234002M'.<br/></small>\r\n      <small class=\"form-text text-muted\">Conditional Expression with type 'function'<br/></small>\r\n\t <small class=\"form-text text-danger\" *ngIf=\"digitalInfoFormGroup.controls.audioVisualRecordingGrid.errors\">{{digitalInfoFormGroup.controls.audioVisualRecordingGrid.errors.grid?.message}}<br/></small>\t\r\n    </div>\r\n    <button [disabled]=\"!digitalInfoFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","model":"import {  grid, } from \"@rxweb/reactive-form-validators\"\r\n\r\nexport class DigitalInfo {\r\n\r\n\t@grid() \r\n\tsoundRecordingGrid: string;\r\n\r\n\t//If you want to apply conditional expression of type 'string'\r\n\t@grid({conditionalExpression:'x => x.soundRecordingGrid ==\"A12425GABC1234002M\"' }) \r\n\tphotographGrid: string;\r\n\r\n\t//If you want to apply conditional expression of type 'function'\r\n\t@grid({conditionalExpression:(x,y) => x.soundRecordingGrid == \"A12425GABC1234002M\"  }) \r\n\taudioVisualRecordingGrid: string;\r\n\r\n}\r\n","modelName":"digital-info.model.ts","json":{}},"conditionalExpressionExampleString":{"notes":null,"component":null,"html":null,"model":"@grid({conditionalExpression:'x => x.soundRecordingGrid ==\"A12425GABC1234002M\"' }) \r\nphotographGrid: string;\r\n","modelName":null,"json":{}},"messageExample":{"notes":null,"component":null,"html":null,"model":"@grid({message:'This is Not valid GRid' }) \r\ngraphicImageGrid: string;\r\n","modelName":null,"json":{}},"message":{"notes":null,"component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from \"@angular/forms\"\r\nimport { RxFormBuilder } from '@rxweb/reactive-form-validators';\r\n\r\nimport { DigitalInfo } from './digital-info.model';\r\n\r\n@Component({\r\n    selector: 'app-grid-message',\r\n    templateUrl: './grid-message.component.html'\r\n})\r\nexport class GridMessageComponent implements OnInit {\r\n    digitalInfoFormGroup: FormGroup\r\n\r\n    constructor(\r\n        private formBuilder: RxFormBuilder    ) { }\r\n\r\n    ngOnInit() {\r\n        let digitalInfo = new DigitalInfo();\r\n        this.digitalInfoFormGroup = this.formBuilder.formGroup(digitalInfo);\r\n    }\r\n}\r\n","html":"<div>\r\n  <form  [formGroup]=\"digitalInfoFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label>GraphicImage GRid</label>\r\n      <input type=\"text\" formControlName=\"graphicImageGrid\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">Shows custom message<br/></small>\r\n\t <small class=\"form-text text-danger\" *ngIf=\"digitalInfoFormGroup.controls.graphicImageGrid.errors\">{{digitalInfoFormGroup.controls.graphicImageGrid.errors.grid?.message}}<br/></small>\t\r\n    </div>\r\n    <button [disabled]=\"!digitalInfoFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","model":"import {  grid, } from \"@rxweb/reactive-form-validators\"\r\n\r\nexport class DigitalInfo {\r\n\r\n\t@grid({message:'This is Not valid GRid' }) \r\n\tgraphicImageGrid: string;\r\n\r\n}\r\n","modelName":"digital-info.model.ts","json":{}},"dynamic":{"notes":null,"component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from \"@angular/forms\"\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { RxFormBuilder } from '@rxweb/reactive-form-validators';\r\nimport { FormBuilderConfiguration,} from '@rxweb/reactive-form-validators';\r\n\r\nimport { DigitalInfo } from './digital-info.model';\r\n\r\n@Component({\r\n    selector: 'app-grid-dynamic',\r\n    templateUrl: './grid-dynamic.component.html'\r\n})\r\nexport class GridDynamicComponent implements OnInit {\r\n    digitalInfoFormGroup: FormGroup\r\n\r\n    constructor(\r\n        private formBuilder: RxFormBuilder,private http: HttpClient    ) { }\r\n\r\n    ngOnInit() {\r\n        let digitalInfo = new DigitalInfo();\r\n        let formBuilderConfiguration = new FormBuilderConfiguration();\r\n\t\tthis.http.get('assets/examples/reactive-form-validators/decorators/grid/dynamic/dynamic.json').subscribe(dynamic => {\r\n            formBuilderConfiguration.dynamicValidation = JSON.parse(JSON.stringify(dynamic));\r\n\t\t\tthis.digitalInfoFormGroup = this.formBuilder.formGroup(digitalInfo,formBuilderConfiguration);\r\n        })\r\n    }\r\n}\r\n","html":"<div>\r\n  <form  *ngIf=\"digitalInfoFormGroup\"  [formGroup]=\"digitalInfoFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label>SoundRecording GRid</label>\r\n      <input type=\"text\" formControlName=\"soundRecordingGrid\" class=\"form-control\"   />\r\n      <small class=\"form-text text-muted\">If you want to apply conditional validation on 'AudioVisualRecording GRid' or 'Photograph GRid' then you need to add this input to 'A12425GABC1234002M'.<br/></small>\r\n      <small class=\"form-text text-danger\" *ngIf=\"digitalInfoFormGroup.controls.soundRecordingGrid.errors\">{{digitalInfoFormGroup.controls.soundRecordingGrid.errors.grid.message}}<br/></small>\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Photograph GRid</label>\r\n      <input type=\"text\" formControlName=\"photographGrid\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Photograph GRid' then you need to add 'SoundRecording GRid' field input to 'A12425GABC1234002M'.<br/></small>\r\n      <small class=\"form-text text-muted\">Conditional Expression with type 'string'<br/></small>\r\n      <small class=\"form-text text-danger\" *ngIf=\"digitalInfoFormGroup.controls.photographGrid.errors\">{{digitalInfoFormGroup.controls.photographGrid.errors.grid.message}}<br/></small>\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>GraphicImage GRid</label>\r\n      <input type=\"text\" formControlName=\"graphicImageGrid\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">Shows custom message<br/></small>\r\n      <small class=\"form-text text-danger\" *ngIf=\"digitalInfoFormGroup.controls.graphicImageGrid.errors\">{{digitalInfoFormGroup.controls.graphicImageGrid.errors.grid.message}}<br/></small>\r\n    </div>\r\n    <button [disabled]=\"!digitalInfoFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","model":"import {  grid,prop, } from \"@rxweb/reactive-form-validators\"\r\n\r\nexport class DigitalInfo {\r\n\r\n\t@prop()\r\n\tsoundRecordingGrid: string;\r\n\r\n\t@prop()\r\n\tphotographGrid: string;\r\n\r\n\t@prop()\r\n\tgraphicImageGrid: string;\r\n\r\n}\r\n","modelName":"digital-info.model.ts","json":{"dynamic.json":"{\"soundRecordingGrid\":{\"grid\":true},\"photographGrid\":{\"grid\":{\"conditionalExpression\":\"x => x.soundRecordingGrid ==\\\"A12425GABC1234002M\\\"\"}},\"graphicImageGrid\":{\"grid\":{\"message\":\"This is Not valid GRid\"}}}"}},"add":{"notes":null,"component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from \"@angular/forms\"\r\nimport { RxFormBuilder } from '@rxweb/reactive-form-validators';\r\n\r\nimport { DigitalInfo } from './digital-info.model';\r\n\r\n@Component({\r\n    selector: 'app-grid-add',\r\n    templateUrl: './grid-add.component.html'\r\n})\r\nexport class GridAddComponent implements OnInit {\r\n    digitalInfoFormGroup: FormGroup\r\n\r\n    constructor(\r\n        private formBuilder: RxFormBuilder    ) { }\r\n\r\n    ngOnInit() {\r\n        let digitalInfo = new DigitalInfo();\r\n        this.digitalInfoFormGroup = this.formBuilder.formGroup(digitalInfo);\r\n    }\r\n}\r\n","html":"<div>\r\n  <form  [formGroup]=\"digitalInfoFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label>SoundRecording Grid</label>\r\n      <input type=\"text\" formControlName=\"soundRecordingGrid\" class=\"form-control\"  />\r\n\t <small class=\"form-text text-danger\" *ngIf=\"digitalInfoFormGroup.controls.soundRecordingGrid.errors\">{{digitalInfoFormGroup.controls.soundRecordingGrid.errors.grid?.message}}<br/></small>\t\r\n    </div>\r\n    <button [disabled]=\"!digitalInfoFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","model":"import {  grid, } from \"@rxweb/reactive-form-validators\"\r\n\r\nexport class DigitalInfo {\r\n\r\n\t@grid() \r\n\tsoundRecordingGrid: string;\r\n\r\n}\r\n","modelName":"digital-info.model.ts","json":{}},"edit":{"notes":null,"component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from \"@angular/forms\"\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { RxFormBuilder } from '@rxweb/reactive-form-validators';\r\n\r\nimport { User } from './user.model';\r\n\r\n@Component({\r\n    selector: 'app-grid-edit',\r\n    templateUrl: './grid-edit.component.html'\r\n})\r\nexport class GridEditComponent implements OnInit {\r\n    userFormGroup: FormGroup\r\n\r\n    constructor(\r\n        private formBuilder: RxFormBuilder,private http: HttpClient    ) { }\r\n\r\n    ngOnInit() {\r\n        this.http.get('assets/examples/reactive-form-validators/decorators/grid/edit/user-data.json').subscribe(user => {\r\n            this.userFormGroup = this.formBuilder.formGroup<User>(User,user);\r\n        })\r\n    }\r\n}\r\n","html":"<div>\r\n  <form  *ngIf=\"userFormGroup\"  [formGroup]=\"userFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label>SoundRecording Grid</label>\r\n      <input type=\"text\" formControlName=\"soundRecordingGrid\" class=\"form-control\"  />\r\n\t <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.soundRecordingGrid.errors\">{{userFormGroup.controls.soundRecordingGrid.errors.grid?.message}}<br/></small>\t\r\n    </div>\r\n    <button [disabled]=\"!userFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","model":"import {  grid, } from \"@rxweb/reactive-form-validators\"\r\n\r\nexport class User {\r\n\r\n\t@grid() \r\n\tsoundRecordingGrid: string;\r\n\r\n}\r\n","modelName":"user.model.ts","json":{"user-data.json":"{\"soundRecordingGrid\":\"A12425GABC1234002M\"}"}}}