{"rightSidebarLinks":[{"id":"page-level","title":"page-level","subLink":null},{"id":"settingmultilingualcomponentname","title":"Setting Multilingual component name","subLink":[]},{"id":"multilingualjsondata","title":"Multilingual Json Data","subLink":[]},{"id":"addingdirectives","title":"Adding Directives","subLink":[]}],"title":"Page Level Rendering","description":"","validatorType":"template-driven","validationTypeTitle":"Template Driven","type":"simple","gitDocPath":"https://github.com/rxweb/rxweb.io/edit/master/docs/angular/localization/page-level.md","category":"page-level","subCategory":null,"linkTitle":"page-level","tabArray":{},"innerHtml":null,"htmlContent":"<p class='showHideElement' >After the global setup is completed and the multilingual data is resolved before navigating to the mentioned url. The User Interface is achieved with the help of the directives provided by <span class='highlighted'>@rxweb/multilingual</span> package.</p>\r\n<div class='row page-section' id= 'settingmultilingualcomponentname'>\r\n<div class='col-lg-12'>\r\n<h2>Setting Multilingual component name<a title='Link to this heading' class='link-header' href='/page-level/page-level/template-driven/directives#settingmultilingualcomponentname'><i class='fa fa-link'></i></a></h2>\r\n\r\n<p class='showHideElement' >First we need to add the component name in <span class='highlighted'>@multilingual</span> of the component file. </p>\r\n<p class='showHideElement' >For retrieving the component specific multilingual data, The component name is provided in the <span class='highlighted'>@multilingual</span> decorator.</p>\r\n<div component=\"app-code\" key=\"page-level-multilingual-component\"></div>\r\n</div></div>\r\n<div class='row page-section' id= 'multilingualjsondata'>\r\n<div class='col-lg-12'>\r\n<h2>Multilingual Json Data<a title='Link to this heading' class='link-header' href='/page-level/page-level/template-driven/directives#multilingualjsondata'><i class='fa fa-link'></i></a></h2>\r\n\r\n<p class='showHideElement' >The second step is to add directives on the Html, Lets consider a scenario where you want to display multilingual data in the login component and the multilingual data for language code <span class='highlighted'>EN</span> is resolved from the <span class='highlighted'>loginComponent-en.json</span> from the global resolver as mentioned in the previous documentation. Likewise if your application supports french data and the user loggen in has language code <span class='highlighted'>FR</span>, the multilingual data is resolved from <span class='highlighted'>loginComponent-fr.json</span>.</p>\r\n<p class='showHideElement' >To render the multilingual data on the user interface, the data stored in these files have key and value based upon the directive. For example if you want to render data into label and placeholder. The key of the multilingual data must be <span class='highlighted'>password_p</span> and <span class='highlighted'>password_t</span>. Here p stands for placeholder and t stands for text. The </p>\r\n<p class='showHideElement' ><span class='highlighted'>loginComponent-en.json</span> file is as below: </p>\r\n<div component=\"app-code\" key=\"page-level-json-component\"></div>\r\n</div></div>\r\n<div class='row page-section' id= 'addingdirectives'>\r\n<div class='col-lg-12'>\r\n<h2>Adding Directives<a title='Link to this heading' class='link-header' href='/page-level/page-level/template-driven/directives#addingdirectives'><i class='fa fa-link'></i></a></h2>\r\n\r\n<p class='showHideElement' >The third and final step is to add directives in the Html template of the component. <span class='highlighted'>rxText</span> is used for rendering text data and <span class='highlighted'>rxPlaceholder</span> is used for rendering data in the placeholder.</p>\r\n<p class='showHideElement' >The Html template for the login component is as below :</p>\r\n<div component=\"app-code\" key=\"page-level-template-component\"></div>\r\n</div></div>\r\n"}