{"rightSidebarLinks":[{"id":"rxformbuilder","title":"RxFormBuilder","subLink":null},{"id":"group","title":"group","subLink":[{"title":"Create the FormGroup","id":"createtheformgroup","thirdLevelLink":[]},{"title":"Dynamically Create a FormGroup with Dynamic Validation Rules","id":"dynamicallycreateaformgroupwithdynamicvalidationrules","thirdLevelLink":[]}]},{"id":"formgroup","title":"formGroup","subLink":[{"title":"Create a FormGroup through Model without instance","id":"createaformgroupthroughmodelwithoutinstance","thirdLevelLink":[]},{"title":"Create a FormGroup through Model instance","id":"createaformgroupthroughmodelinstance","thirdLevelLink":[]},{"title":"Create a FormGroup with server data and server values should be mapped with model properties","id":"createaformgroupwithserverdataandservervaluesshouldbemappedwithmodelproperties","thirdLevelLink":[]}]}],"title":"RxFormBuilder","description":"","validatorType":"validators","validationTypeTitle":"Validators","type":"simple","category":"api","subCategory":"","linkTitle":"RxFormBuilder","tabArray":{},"innerHtml":null,"htmlContent":"<p class='showHideElement' >You can create a FormGroup through this service. This provides a group method and formGroup method. Both are used for creating a FormGroup. Both can be used in different cases.</p>\r\n<p class='showHideElement' >Let's see in which cases we can use which method.</p>\r\n<div class='row page-section' id= 'group'>\r\n<div class='col-lg-12'>\r\n<h1>group<a title='Link to this heading' class='link-header' href='/api/RxFormBuilder/validators#group'><i class='fa fa-link'></i></a></h1>\r\n\r\n<p class='showHideElement' >This provides all feature of Angular FormBuilder <span class='highlighted'>group</span> method as well as some other features which is important while creating complex forms, like if we want to create a FormGroup dynamically or we don't want pre-configure the validators. The validation rules are coming from the server and bind the validation rules runtime on the respective FormControl.</p>\r\n<p class='showHideElement' >Here, we discuss three cases which can be achieved through <span class='highlighted'>group</span> method</p>\r\n<p class='showHideElement' >Before diving into the code, lets first understand the <span class='highlighted'>group</span> method defination.</p>\r\n<p class='showHideElement' >The group method accepts the json object which will convert ino the <span class='highlighted'>FormControl</span>, <span class='highlighted'>FormGroup</span> or <span class='highlighted'>FormArray</span> as per the specified value and the second parameter is used for dynamic validation which we discuss end of this documentation.</p>\r\n</div></div>\r\n<div class='row page-section' id= 'createtheformgroup'>\r\n<div class='col-lg-12'>\r\n<h3>Create the FormGroup<a title='Link to this heading' class='link-header' href='/api/RxFormBuilder/validators#createtheformgroup'><i class='fa fa-link'></i></a></h3>\r\n\r\n<p class='showHideElement' >We discuss the simillar approach which we are doing through the Angular FormBuilder. But the only one difference is you don't need to create a nested FormGroup without calling the <span class='highlighted'>group</span> method.</p>\r\n<p class='showHideElement' >Here, we create a FormControl, nested FormGroup and nested FormArray inside the FormGroup. See the below code</p>\r\n</div></div>\r\n<div class='row page-section' id= 'dynamicallycreateaformgroupwithdynamicvalidationrules'>\r\n<div class='col-lg-12'>\r\n<h3>Dynamically Create a FormGroup with Dynamic Validation Rules<a title='Link to this heading' class='link-header' href='/api/RxFormBuilder/validators#dynamicallycreateaformgroupwithdynamicvalidationrules'><i class='fa fa-link'></i></a></h3>\r\n\r\n<p class='showHideElement' >Here we create a FormGroup dynamically and apply the validation rule of respective FormControl. For more understanding first we see the JSON data which comming from the server, For better understanding let's give a name of User object. This user object have some validation rules which is also coming from the server.</p>\r\n<p class='showHideElement' >Let's see the user object as below:</p>\r\n<p class='showHideElement' >See dynamic validation rules below:</p>\r\n<p class='showHideElement' >Now, For dynamic server validation rules we can make a call to server or put a JSON object of validation rules. </p>\r\n<p class='showHideElement' >Here we are putting static JSON object of validation rules, See the below code:</p>\r\n</div></div>\r\n<div class='row page-section' id= 'formgroup'>\r\n<div class='col-lg-12'>\r\n<h1>formGroup<a title='Link to this heading' class='link-header' href='/api/RxFormBuilder/validators#formgroup'><i class='fa fa-link'></i></a></h1>\r\n\r\n<p class='showHideElement' >If you are using decorator based validation approach then your FormGroup will be created through this method. This you many ways to create the FormGroup. We discuss one by one all approches.</p>\r\n<p class='showHideElement' >The most important thing in decorator based validation is you have to define a model first afterthat you can create the FormGroup.</p>\r\n<p class='showHideElement' >Let's create a User model:</p>\r\n</div></div>\r\n<div class='row page-section' id= 'createaformgroupthroughmodelwithoutinstance'>\r\n<div class='col-lg-12'>\r\n<h3>Create a FormGroup through Model without instance<a title='Link to this heading' class='link-header' href='/api/RxFormBuilder/validators#createaformgroupthroughmodelwithoutinstance'><i class='fa fa-link'></i></a></h3>\r\n\r\n<p class='showHideElement' >This scenario can be used in add form.</p>\r\n</div></div>\r\n<div class='row page-section' id= 'createaformgroupthroughmodelinstance'>\r\n<div class='col-lg-12'>\r\n<h3>Create a FormGroup through Model instance<a title='Link to this heading' class='link-header' href='/api/RxFormBuilder/validators#createaformgroupthroughmodelinstance'><i class='fa fa-link'></i></a></h3>\r\n\r\n</div></div>\r\n<div class='row page-section' id= 'createaformgroupwithserverdataandservervaluesshouldbemappedwithmodelproperties'>\r\n<div class='col-lg-12'>\r\n<h3>Create a FormGroup with server data and server values should be mapped with model properties<a title='Link to this heading' class='link-header' href='/api/RxFormBuilder/validators#createaformgroupwithserverdataandservervaluesshouldbemappedwithmodelproperties'><i class='fa fa-link'></i></a></h3>\r\n\r\n<p class='showHideElement' >This can be used in edit form where the values are coming from the server and we have to create the form as well as the validation rules can be applied based upon validation decorator configured on the property of the User Model.</p>\r\n<p class='showHideElement' >As per the above code, You have to pass the two parameter first parameter is User model and the second is the server json data. The server data JSON object properties should be the same as User model properties.</p>\r\n<div component=\"app-example-runner\" ref-component=\"app-formbuilderconfiguration-complete\"></div>\r\n</div></div>\r\n"}