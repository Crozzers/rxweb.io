{"rightSidebarLinks":[{"id":"performance","title":"Performance","subLink":null},{"id":"performance","title":"Performance","subLink":[{"title":"Memory Cache","id":"memorycache","thirdLevelLink":[]},{"title":"Response Compression","id":"responsecompression","thirdLevelLink":[]}]}],"title":"Performance","description":"","validatorType":"decorators","validationTypeTitle":"Decorators","type":"simple","gitDocPath":"https://github.com/rxweb/rxweb.io/edit/master/docs/rx-web-core/fundamentals/performance.md","category":"rxwebcore","subCategory":null,"linkTitle":"performance","tabArray":{},"innerHtml":null,"htmlContent":"<div class='row page-section' id= 'performance'>\r\n<div class='col-lg-12'>\r\n<h2>Performance<a title='Link to this heading' class='link-header' href='/rxwebcore/performance#performance'><i class='fa fa-link'></i></a></h2>\r\n\r\n<p class='showHideElement' ><span class='highlighted'>IServiceCollection</span> provides methods using which the performance of the application can be well maintained. In our project we have used method of this interface for implemeting high performance in the application. They are :</p>\r\n <ol class=\"bullet-list\">\r\n  <li>AddMemoryCache</li> \r\n  <li>AddResponseCompression</li>\r\n</ol>   \r\n</div></div>\r\n<div class='row page-section' id= 'memorycache'>\r\n<div class='col-lg-12'>\r\n<h2>Memory Cache<a title='Link to this heading' class='link-header' href='/rxwebcore/performance#memorycache'><i class='fa fa-link'></i></a></h2>\r\n\r\n<p class='showHideElement' >Used for Memory caching</p>\r\n</div></div>\r\n<div class='row page-section' id= 'responsecompression'>\r\n<div class='col-lg-12'>\r\n<h2>Response Compression<a title='Link to this heading' class='link-header' href='/rxwebcore/performance#responsecompression'><i class='fa fa-link'></i></a></h2>\r\n\r\n<p class='showHideElement' >Reducing size of files can reduce the payload and increase the application performance. Natively compressed assets such as images(PNG) and files having much smaller size(less than 150-1000 bytes) should not be compressed.     </p>\r\n<div class='model-ts'><pre><code>\r\npublic static void AddPerformance(this IServiceCollection serviceCollection)\r\n        {\r\n            serviceCollection.AddMemoryCache();\r\n            serviceCollection.AddResponseCompression(options =>\r\n            {\r\n                options.Providers.Add<GzipCompressionProvider>();\r\n                options.MimeTypes = ResponseCompressionDefaults.MimeTypes.Concat(new[] { \"image/svg+xml\" });\r\n            });\r\n            serviceCollection.Configure<GzipCompressionProviderOptions>(options =>\r\n            {\r\n                options.Level = CompressionLevel.Fastest;\r\n            });\r\n        }\r\n</code></pre></div>\r\n<p class='showHideElement' >This method is made in the <span class='highlighted'>Performance.cs</span> file in the bootstrap folder of the api folder.</p>\r\n</div></div>\r\n"}