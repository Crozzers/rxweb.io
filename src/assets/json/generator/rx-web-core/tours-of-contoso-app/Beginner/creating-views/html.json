{"rightSidebarLinks":[{"id":"creating-views","title":"Creating Views","subLink":null},{"id":"views","title":"Views","subLink":[]},{"id":"proswhileusingviews","title":"Pros while using views","subLink":[]},{"id":"realtimescenario","title":"Real time scenario","subLink":[]}],"title":"Creating Views","description":"","validatorType":"decorators","validationTypeTitle":"Decorators","type":"simple","gitDocPath":"https://github.com/rxweb/rxweb.io/edit/master/docs/rx-web-core/tours-of-contoso-app/Beginner/creating-views.md","category":"beginner","subCategory":null,"linkTitle":"overview","tabArray":{},"innerHtml":null,"htmlContent":"<div class='row page-section' id= 'views'>\r\n<div class='col-lg-12'>\r\n<h2>Views<a title='Link to this heading' class='link-header' href='/beginner/overview#views'><i class='fa fa-link'></i></a></h2>\r\n\r\n<p class='showHideElement' ><span class='highlighted'>Views</span> are needed when we want to recieve our desired resultset in other form like storing data in int form but displaying in the varchar form, displaying data in a dropdown etc. <span class='highlighted'>Materialized view</span> is a database object (kind of virtual table) based on the result-set of any SQL query. Materialized views can be preferred, when you need data integrity that don't need to be up to date to the very second.</p>\r\n<blockquote class='showHideElement' ><p>When you have limited number of records (500 - 3K), then view is a better option. </p></blockquote>\r\n</div></div>\r\n<div class='row page-section' id= 'proswhileusingviews'>\r\n<div class='col-lg-12'>\r\n<h2>Pros while using views<a title='Link to this heading' class='link-header' href='/beginner/overview#proswhileusingviews'><i class='fa fa-link'></i></a></h2>\r\n\r\n<ul>\r\n  <li><strong>Security</strong> - Each user can be given permission to access the database only through a small set of views that contain the specific data the user is authorized to see, thus restricting the user's access to stored data.</li>\r\n  <li><strong>Query Simplicity</strong> - Views help simplify complex queries. If you have any frequently used complex query, you can create a view based on it so that you can reference to the view by using a simple SELECT statement instead of typing the query all over again.</li>\r\n  <li><strong>Data Integrity</strong> - If data is accessed and entered through a view, the DBMS can automatically check the data to ensure that it meets the specified integrity constraints.</li>\r\n</ul>\r\n</div></div>\r\n<div class='row page-section' id= 'realtimescenario'>\r\n<div class='col-lg-12'>\r\n<h2>Real time scenario<a title='Link to this heading' class='link-header' href='/beginner/overview#realtimescenario'><i class='fa fa-link'></i></a></h2>\r\n\r\n<p class='showHideElement' >If we consider our <span class='highlighted'>Contoso Application</span>, displaying students and course records is very frequent in the application. In the previous step, we have created the Students and Course table and now we want to retrieve those records. For that, we will create the views.</p>\r\n<p class='showHideElement' >Generally we deal with these below mentioned real-time scenarios in case of retrieving the stored information where making materialized view can be helpful.</p>\r\n<strong>Displaying list of records</strong>\r\n<p class='showHideElement' >There are cases when we want to display a list of students and their enrolled course name on the UI. For retriving that information we can use a materialized view. In such cases, view should be named as <span class='highlighted'>vCourses</span> or <span class='highlighted'>vStudents</span>.</p>\r\n<blockquote class='showHideElement' ><p>Here, abbreviation <strong><span class='highlighted'>v</span></strongstand for the word view. This maintain a consistency in the naming convention all over the application and to properly differenciate between a table and a view.</p></blockquote>\r\n<div class='model-ts'><pre><code>\r\nCREATE VIEW [dbo].[vStudents]\r\nAS\r\nSELECT    Students.RollNumber, Students.StudentName, Students.EmailId, Courses.CourseName\r\nFROM      Students, Courses\r\nWHERE     Students.CourseId = Courses.CourseId\r\n</code></pre></div>\r\n<p class='showHideElement' >Based on the above created view, below result set will be fetched.</p>\r\n<table class=\"table table-bordered\">\r\n<tr><th>RollNumber</th><th>StudentName</th><th>EmailId</th><th>CourseName</th></tr>\r\n<tr><td>1002</td><td>John Doe</td><td>john.doe@contoso.com</td><td>B. Tech.</td></tr>\r\n<tr><td>1001</td><td>Alison Miller</td><td>alison.miller@contoso.com</td><td>MBA</td></tr>\r\n<tr><td>1003</td><td>Scarlett Joan</td><td>scarlett.joan@contoso.com</td><td>MBBS</td></tr>\r\n</table>\r\n<strong>Displaying any specific record while editing</strong>\r\n<p class='showHideElement' >While editting a record, we may need to display complete or some of the information for a specific record only. Here separate views are made for displaying list and editing a particular record because their might be a situation where there is a difference in displaying those columns. </p>\r\n<p class='showHideElement' >Let us consider a situation, i have to edit a student's details. In such cases, view should be named as <span class='highlighted'>vStudentRecords</span> (i.e. prefixing it with abbreviation <span class='highlighted'>v</span> and suffixing it with the word <span class='highlighted'>Records</span>).</p>\r\n<div class='model-ts'><pre><code>\r\nCREATE VIEW [dbo].[vStudentRecords]\r\nAS\r\nSELECT    Students.StudentName, Students.RollNumber, Students.Age, Students.Gender, Students.EmailId, Courses.CourseName\r\nFROM      Students, Courses\r\nWHERE     Students.CourseId = Courses.CourseId\r\nGO\r\n</code></pre></div>\r\n<p class='showHideElement' >Based on the above created view, below result set will be fetched.</p>\r\n<table class=\"table table-bordered\">\r\n<tr><th>StudentName</th><th>RollNumber</th><th>Age</th><th>Gender</th><th>EmailId</th><th>CourseId</th></tr>\r\n<tr><td>John Doe</td><td>1002</td><td>20</td><td>Male</td><td>john.doe@contoso.com</td><td>B. Tech.</td></tr>\r\n<tr><td>Alison Miller</td><td>1001</td><td>21</td><td>Male</td><td>alison.miller@contoso.com</td><td>MBA</td></tr>\r\n<tr><td>Scarlett Joan</td><td>1003</td><td>19</td><td>Female</td><td>scarlett.joan@contoso.com</td><td>MBBS</td></tr>\r\n</table>\r\n<strong>Binding data in a dropdown</strong>\r\n<p class='showHideElement' >There are some columns which needs to be displayed in a dropdown while adding a new record or editing an existing record through UI. For that also we can use views to display any column records based on any condition.</p>\r\n<p class='showHideElement' >Let us consider a situation, i have to display all the names of courses in a dropdown while adding a new student, so that student can select the course in which he want to entroll. In these cases, view should be named as <span class='highlighted'>vCourseLookups</span> (i.e. prefixing it with abbreviation <span class='highlighted'>v</span> and suffixing it with the word <span class='highlighted'>Lookups</span>).</p>\r\n<div class='model-ts'><pre><code>\r\nCREATE VIEW [dbo].[vCourseLookups]\r\nAS\r\nSELECT    CourseId, CourseName\r\nFROM      Courses\r\nGO\r\n</code></pre></div>\r\n<p class='showHideElement' >Based on the above created view, below result set will be fetched.</p>\r\n<table class=\"table table-bordered\">\r\n<tr><th>CourseId</th><th>CourseName</th></tr>\r\n<tr><td>1</td><td>B. Tech.</td></tr>\r\n<tr><td>2</td><td>M. Tech.</td></tr>\r\n<tr><td>3</td><td>MBBS</td></tr>\r\n<tr><td>4</td><td>CA</td></tr>\r\n<tr><td>5</td><td>MBA</td></tr>\r\n</table>\r\n</div></div>\r\n"}