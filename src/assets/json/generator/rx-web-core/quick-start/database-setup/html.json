{"rightSidebarLinks":[{"id":"database-setup","title":"Database Setup","subLink":null},{"id":"generatingpocomodels","title":"Generating POCO models","subLink":[]}],"title":"Database Setup","description":"","validatorType":"decorators","validationTypeTitle":"Decorators","type":"simple","gitDocPath":"https://github.com/rxweb/rxweb.io/edit/master/docs/rx-web-core/quick-start/database-setup.md","category":"quick-start","subCategory":"","linkTitle":"database-setup","tabArray":{},"innerHtml":null,"htmlContent":"<p class='showHideElement' >Database setup required two blank database(one for main connection and other for log connection) created before running the command for database setup in the package manager console. The first step is to run the init command for the cofiguration initialization in the project. For more information about the example of how to setup the database server, please visit the documentation of <a class=\"redirect-link\" target=\"_blank\" href=\"https://docs.rxweb.io/rx-web-core/working-with-data-model/database-provider\">Database Provider</a></p>\r\n<div class='model-ts command-ts'><pre><code class='command'>\r\n rxwebcore --init\r\n</code></pre></div>\r\n<p class='showHideElement' >Provide the connection string of main and log database in appsettings.json in the key <span class='highlighted'>ConnectionString</span>. The sample connection string of the main and log database is as below :</p>\r\n<b>Windows based authentication connection string :</b>\r\n<p style=\"font-style:italic;\">Example :  data source=PC0001\\\\MSSQL2016;initial catalog=HumanResourceApplicationDb;persist security info=True; MultipleActiveResultSets=True;App=EntityFramework\"</p>\r\n<b>SQL user based authentication connection string :</b>\r\n<p style=\"font-style:italic;\">Example : data source=PC0001\\\\MSSQL2016;initial catalog=HumanResourceApplicationDb;persist security info=True;User Id=sa;Password=Admin;MultipleActiveResultSets=True;App=EntityFramework\"</p>\r\n<p class='showHideElement' >After the connection strings are provided as the value of the connection name. Run the following command in the package manager console </p>\r\n<div class='model-ts command-ts'><pre><code class='command'>\r\n rxwebcore --database-setup\r\n</code></pre></div>\r\n<blockquote class='showHideElement' ><p>This will create default tables in the log and main database connection which have their own roles as described in the <a class=\"redirect-link\" target=\"_blank\" href=\"https://docs.rxweb.io/rx-web-core/quick-start/quick-start\">Quick Start</a></p></blockquote>\r\n<div class='row page-section' id= 'generatingpocomodels'>\r\n<div class='col-lg-12'>\r\n<h1 class=title-level-1>Generating POCO models</h1>\r\n\r\n<p class='showHideElement' >The default tables are automatically generated by using the above command, the next step is to create POCO models in the models class library of your project. For this you need to run the command to generate model classes by providing the connection name as below :</p>\r\n<div class='model-ts command-ts'><pre><code class='command'>\r\n rxwebcore --models --main\r\n</code></pre></div>\r\n<p class='showHideElement' >For more details about creation of model classes, please refer <a class=\"redirect-link\" target=\"_blank\" href=\"https://docs.rxweb.io/rx-web-core/working-with-data-model/generating-data-models\">Generating Models</a> </p>\r\n<p class='showHideElement' >At the last, build the project and run the code, it will display the swagger UI in which you can test the API created.</p>\r\n</div></div>\r\n"}