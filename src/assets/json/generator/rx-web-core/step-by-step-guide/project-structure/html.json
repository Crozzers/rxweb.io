{"rightSidebarLinks":[{"id":"project-structure","title":"Project Structure","subLink":null},{"id":"projectstructure","title":"Project Structure","subLink":[]},{"id":"models","title":"Models","subLink":[]},{"id":"boundedcontext","title":"BoundedContext","subLink":[]},{"id":"unitofwork","title":"Unit Of Work","subLink":[]},{"id":"infrastructure","title":"Infrastructure","subLink":[]},{"id":"domain","title":"Domain","subLink":[]},{"id":"api","title":"Api","subLink":[]},{"id":"githubissues","title":"Project Structure Github Issues","subLink":null}],"title":"Project Structure","description":"","validatorType":"decorators","validationTypeTitle":"Decorators","type":"simple","category":"step-by-step-guide","subCategory":null,"linkTitle":"projectstructure","tabArray":{},"innerHtml":null,"htmlContent":"<div class='row page-section' id= 'projectstructure'>\r\n<div class='col-lg-12'>\r\n<h2>Project Structure<a title='Link to this heading' class='link-header' href='/step-by-step-guide/projectstructure#projectstructure'><i class='fa fa-link'></i></a></h2>\r\n\r\n<p class='showHideElement' >As RxWeb follows the practices of <span class='highlighted'>Clean Architecture</span>, Based upon this the project structure is divided into several layers of Models, domain services, Application core and API which adds the practices of seperation of concerns for simplification and maintanable code. </p>\r\n<p class='showHideElement' >The project solution contains six projects. They are : </p>\r\n<p class='showHideElement' >1. Models</p>\r\n<p class='showHideElement' >2. BoundedContext </p>\r\n<p class='showHideElement' >3. UnitOfWork</p>\r\n<p class='showHideElement' >4. Infrastructure</p>\r\n<p class='showHideElement' >5. Domain</p>\r\n<p class='showHideElement' >6. Api</p>\r\n</div></div>\r\n<div class='row page-section' id= 'models'>\r\n<div class='col-lg-12'>\r\n<h2>Models<a title='Link to this heading' class='link-header' href='/step-by-step-guide/projectstructure#models'><i class='fa fa-link'></i></a></h2>\r\n\r\n<p class='showHideElement' >The primary purpose of this project is to define POCO models/Enums/Interfaces which can be used in application wide. Some of the files/folders are already defined. Some of these folders and files are defined when you create the project. Let's see how many folders/files are available initially.</p>\r\n<table class=\"table table-bordered\">\r\n  <tr>\r\n    <th>\r\n<p class='showHideElement' >      Folder Name</p>\r\n    </th>\r\n    <th>\r\n<p class='showHideElement' >      Description</p>\r\n    </th>\r\n  </tr>\r\n  <tbody>\r\n    <tr>\r\n      <td>\r\n<p class='showHideElement' >        DbEntities</p>\r\n      </td>\r\n      <td>\r\n<p class='showHideElement' >        All Database tables are transformed into the POCO models.</p>\r\n      </td>\r\n    </tr>\r\n    <tr>\r\n      <td>\r\n<p class='showHideElement' >        ExtendedModels</p>\r\n      </td>\r\n      <td>\r\n<p class='showHideElement' >        You can extend your POCO models, for example : <span class='highlighted'>User</span> model contains the property of <span class='highlighted'>Password</span>, but you want compare password property as well. The <span class='highlighted'>ComparePassword</span> property you can define in the extended model of <span class='highlighted'>User' with the </span>[NotMapped]<span class='highlighted'> annotation otherwise entity framework core throws an error as the </span>ComparePassword<span class='highlighted'> property is not in the table of </span>User<span class='highlighted'>. </p>\r\n      </td>\r\n    </tr>\r\n    <tr>\r\n      <td>\r\n<p class='showHideElement' >        ViewModels</p>\r\n      </td>\r\n      <td>\r\n<p class='showHideElement' >        In this folder you can define your custom model, which you want to use that model application wide.</p>\r\n      </td>\r\n    </tr>\r\n    <tr>\r\n      <td>\r\n<p class='showHideElement' >        Enums</p>\r\n      </td>\r\n      <td>\r\n<p class='showHideElement' >        You can define enums based upon your need and some of the enums are automatically generated which are defined in the table of </span>ApplicationObjectTypes<span class='highlighted'> and the respective respective reference values are stored in the </span>ApplicationObjects<span class='highlighted'>. for more information about these table you can refer the 'Database Information' page.</p>\r\n      </td>\r\n    </tr>\r\n</table>\r\n</div></div>\r\n<div class='row page-section' id= 'boundedcontext'>\r\n<div class='col-lg-12'>\r\n<h2>BoundedContext<a title='Link to this heading' class='link-header' href='/step-by-step-guide/projectstructure#boundedcontext'><i class='fa fa-link'></i></a></h2>\r\n\r\n<p class='showHideElement' >This project contains BoundedContexts which are made based upon the defined modules. Each context can work independently based upon its </p>\r\n<p class='showHideElement' >concept. It has <span class='highlighted'>MainSqlDbContext</span> which is used to resolve the database connection based upon the configuration of the app setting through the  GetConnection method of <span class='highlighted'>BaseDbContext</span>. For performing multitenancy and connection resilency <span class='highlighted'>BaseBoundedDbContext</span> is used. The Bounded context will inherit from <span class='highlighted'>BaseBoundedDbContext</span> for resolving database configurations.</p>\r\n</div></div>\r\n<div class='row page-section' id= 'unitofwork'>\r\n<div class='col-lg-12'>\r\n<h2>Unit Of Work<a title='Link to this heading' class='link-header' href='/step-by-step-guide/projectstructure#unitofwork'><i class='fa fa-link'></i></a></h2>\r\n\r\n<p class='showHideElement' >This project contains <span class='highlighted'>Uow</span> class for its respective BoundedContext to follow repository pattern which provides methods through which the data can be manipulated. It has <span class='highlighted'>BaseUow</span> which uses the <span class='highlighted'>IRepositoryProvider</span> and the <span class='highlighted'>IDbContext</span> to provide the <span class='highlighted'>CoreUnitOfWork</span> methods to the particular domain. Each domain contains a folder having Uow classes which are used in the controllers.   </p>\r\n</div></div>\r\n<div class='row page-section' id= 'infrastructure'>\r\n<div class='col-lg-12'>\r\n<h2>Infrastructure<a title='Link to this heading' class='link-header' href='/step-by-step-guide/projectstructure#infrastructure'><i class='fa fa-link'></i></a></h2>\r\n\r\n<p class='showHideElement' >This project covers methods of necessary actions and implementation which are used application wide like determining user access and access permission, email and sms provider, authorize token etc  </p>\r\n<p class='showHideElement' >It contains default generated files which include:</p>\r\n<p class='showHideElement' >* Proving application token using <span class='highlighted'>ApplicationTokenProvider</span>.</p>\r\n<p class='showHideElement' >* Get UserClaim of logged user with <span class='highlighted'>AccessPermissionHandler</span>.</p>\r\n<p class='showHideElement' >* Authorizing token using <span class='highlighted'>TokenAuthorizer</span>.</p>\r\n<p class='showHideElement' >* Module wise access of a user using <span class='highlighted'>UserAccessConfigInfo</span>.</p>\r\n</div></div>\r\n<div class='row page-section' id= 'domain'>\r\n<div class='col-lg-12'>\r\n<h2>Domain<a title='Link to this heading' class='link-header' href='/step-by-step-guide/projectstructure#domain'><i class='fa fa-link'></i></a></h2>\r\n\r\n<p class='showHideElement' >Domain project contains Domain services which are made whenever <span class='highlighted'>high complexity</span> APIs are made. This means that whenever a domain controller is made, it will make a domain class  for adding custom <span class='highlighted'>business logic</span> of the domain which will be generated in the Domain project under its module's folder and its reference will be given in the controller.</p>\r\n</div></div>\r\n<div class='row page-section' id= 'api'>\r\n<div class='col-lg-12'>\r\n<h2>Api<a title='Link to this heading' class='link-header' href='/step-by-step-guide/projectstructure#api'><i class='fa fa-link'></i></a></h2>\r\n\r\n<p class='showHideElement' >The Api project is the .Net core based web application which is the start of the project. It contains application settings, Controllers, necessery injected services like security, performance etc.</p>\r\n<p class='showHideElement' >* <span class='highlighted'>app.settings.json</span> is the json configuration of the application in which database <span class='highlighted'>connection string</span>, connection resilency configuration, MultiTenant details, security and other details are stored.</p>\r\n<p class='showHideElement' >* <span class='highlighted'>Controllers</span> folder contains rest APIs.</p>\r\n<p class='showHideElement' >  It has <span class='highlighted'>Core</span> folder having </p>\r\n<p class='showHideElement' >  1) <span class='highlighted'>Authentication</span> Controller : Used for login(Verifying user), token generation.</p>\r\n<p class='showHideElement' >  2) <span class='highlighted'>Authorize</span> Controller : Used for get access modules(acess permissions, logout and refresh token)  </p>\r\n<p class='showHideElement' >* Bootstrap contains implementations of <span class='highlighted'>ConfigurationOptions</span>, <span class='highlighted'>Performance</span>, <span class='highlighted'>Security</span>, <span class='highlighted'>Validations</span> etc </p>\r\n</div></div>\r\n<div class=\"row page-section\" id=\"githubissues\">\r\n<div class=\"col-lg-12\">\r\n<div component=\"app-github-issue\"></div>\r\n</div>\r\n</div>\r\n<div component=\"app-contribution\"></div>\r\n"}