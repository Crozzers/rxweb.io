{"rightSidebarLinks":[{"id":"read","title":"Read","subLink":null},{"id":"read","title":"Read","subLink":[]},{"id":"all","title":"All","subLink":[]},{"id":"allasync","title":"AllAsync","subLink":[]},{"id":"allinclude","title":"AllInclude","subLink":[]},{"id":"allincludeasync","title":"AllIncludeAsync","subLink":[]},{"id":"count","title":"Count","subLink":[]},{"id":"findby","title":"FindBy","subLink":[]},{"id":"findbyasync","title":"FindByAsync","subLink":[]},{"id":"findbyinclude","title":"FindByInclude","subLink":[]},{"id":"findbyincludeasync","title":"FindByIncludeAsync","subLink":[]},{"id":"findbykey","title":"FindByKey","subLink":[]},{"id":"findbykeyasync","title":"FindByKeyAsync","subLink":[]},{"id":"first","title":"First","subLink":[]},{"id":"firstasync","title":"FirstAsync","subLink":[]},{"id":"firstordefault","title":"FirstOrDefault","subLink":[]},{"id":"firstordefaultasync","title":"FirstOrDefaultAsync","subLink":[]},{"id":"last","title":"Last","subLink":[]},{"id":"lastasync","title":"LastAsync","subLink":[]},{"id":"lastordefault","title":"LastOrDefault","subLink":[]},{"id":"lastordefaultasync","title":"LastOrDefaultAsync","subLink":[]},{"id":"queryable","title":"Queryable","subLink":[]},{"id":"single","title":"Single","subLink":[]},{"id":"singleasync","title":"SingleAsync","subLink":[]},{"id":"singleordefault","title":"SingleOrDefault","subLink":[]},{"id":"singleordefaultasync","title":"SingleOrDefaultAsync","subLink":[]}],"title":"Read","description":"","validatorType":"decorators","validationTypeTitle":"Decorators","type":"simple","gitDocPath":"https://github.com/rxweb/rxweb.io/edit/master/docs/rx-web-core/working-with-data-model/data-operations/read.md","category":"working-with-data-model","subCategory":null,"linkTitle":"read","tabArray":{},"innerHtml":null,"htmlContent":"<div class='row page-section' id= 'read'>\r\n<div class='col-lg-12'>\r\n<h1 class=title-level-1>Read</h1>\r\n\r\n<p class='showHideElement' >The repository methods works on single responsibilty principle that states that objects should have only one responsibilty. In our case the Repository methods are mainly used for performing read operations which allows us to seperate the load of read and write operations which results into high speed and performance.</p>\r\n<p class='showHideElement' >It contains methods which are used to fetch the records depending upon many scenarios such as All,Include, FindByInclude, FindByKey, Single,SingleOrDefault etc which are much similar to LINQ methods of c#.</p>\r\n<p class='showHideElement' >Here are the examples of repository methods which <span class='highlighted'>rxwebcore</span> using UserModule where we want to see the possible ways of performing read operations on <span class='highlighted'>User</span>'s DbSet.</p>\r\n</div></div>\r\n<div class='row page-section' id= 'all'>\r\n<div class='col-lg-12'>\r\n<h1 class=title-level-1>All</h1>\r\n\r\n<p class='showHideElement' >It is used when you want to retreive all the records of the entity.</p>\r\n<div class='model-ts'><pre><code>\r\npublic IEnumerable&ltUser&gt Get() \r\n{\r\n  return UserUow.Repository&ltUser&gt().All();\r\n}\r\n</code></pre></div>\r\n</div></div>\r\n<div class='row page-section' id= 'allasync'>\r\n<div class='col-lg-12'>\r\n<h1 class=title-level-1>AllAsync</h1>\r\n\r\n<p class='showHideElement' >It is used when you want to retreive all the records of the entity asynchronously.</p>\r\n<div class='model-ts'><pre><code>\r\n    public async Task&ltIEnumerable&ltUser&gt&gt AllAsync()\r\n    {\r\n        return await UserUow.Repository&ltUser&gt().AllAsync();\r\n    }\r\n</code></pre></div>\r\n</div></div>\r\n<div class='row page-section' id= 'allinclude'>\r\n<div class='col-lg-12'>\r\n<h1 class=title-level-1>AllInclude</h1>\r\n\r\n<p class='showHideElement' >It is used when you want include data of the reference entity in the result set. </p>\r\n<div class='model-ts'><pre><code>\r\n    public IEnumerable&ltUser&gt AllInclude()\r\n    {\r\n        return UserUow.Repository&ltUser&gt().AllInclude(t =&gt t.CompanyMaster);\r\n    }\r\n</code></pre></div>\r\n</div></div>\r\n<div class='row page-section' id= 'allincludeasync'>\r\n<div class='col-lg-12'>\r\n<h1 class=title-level-1>AllIncludeAsync</h1>\r\n\r\n<p class='showHideElement' >It is used when you want include data of the reference entity in the result set asynchronously. </p>\r\n<div class='model-ts'><pre><code>\r\n    public async Task&ltIEnumerable&ltUser&gt&gt AllIncludeAsync()\r\n    {\r\n        return await UserUow.Repository&ltUser&gt().AllInclude(t =&gt t.CompanyMaster);\r\n    }\r\n</code></pre></div>\r\n</div></div>\r\n<div class='row page-section' id= 'count'>\r\n<div class='col-lg-12'>\r\n<h1 class=title-level-1>Count</h1>\r\n\r\n<p class='showHideElement' >It is used to get count of data in the list of entity based upon condition.</p>\r\n<div class='model-ts'><pre><code>\r\n    public int Count()\r\n    {\r\n        var count = UserUow.Repository&ltUser&gt().Count(a =&gt a.LastName == \"Christian\");\r\n        return count;\r\n    }\r\n</code></pre></div>\r\n</div></div>\r\n<div class='row page-section' id= 'findby'>\r\n<div class='col-lg-12'>\r\n<h1 class=title-level-1>FindBy</h1>\r\n\r\n<p class='showHideElement' >It is used to find the element based upon condition.</p>\r\n<div class='model-ts'><pre><code>\r\n    public IEnumerable&ltUser&gt FindBy()\r\n    {\r\n        return UserUow.Repository&ltUser&gt().FindBy(t =&gt t.LastName == \"Christian\"); ;\r\n    }\r\n</code></pre></div>\r\n</div></div>\r\n<div class='row page-section' id= 'findbyasync'>\r\n<div class='col-lg-12'>\r\n<h1 class=title-level-1>FindByAsync</h1>\r\n\r\n<p class='showHideElement' >It is used to find the element based upon condition asynchronously.</p>\r\n<div class='model-ts'><pre><code>\r\n    public async Task&ltIEnumerable&ltUser&gt&gt FindByAsync()\r\n    {\r\n        return await UserUow.Repository&ltUser&gt().FindByAsync(t =&gt t.LastName == \"Doe\");\r\n    }\r\n</code></pre></div>\r\n</div></div>\r\n<div class='row page-section' id= 'findbyinclude'>\r\n<div class='col-lg-12'>\r\n<h1 class=title-level-1>FindByInclude</h1>\r\n\r\n<p class='showHideElement' >It is used to find the element based upon condition and include data of reference entity into the resultset.</p>\r\n<div class='model-ts'><pre><code>\r\n    public IEnumerable&ltUser&gt FindByInclude()\r\n    {\r\n        return UserUow.Repository&ltUser&gt().FindByInclude(t =&gt t.LastName == \"Doe\", t =&gt t.CompanyMaster);\r\n    }\r\n</code></pre></div>\r\n</div></div>\r\n<div class='row page-section' id= 'findbyincludeasync'>\r\n<div class='col-lg-12'>\r\n<h1 class=title-level-1>FindByIncludeAsync</h1>\r\n\r\n<p class='showHideElement' >It is used to find the element based upon condition and include data of reference entity into the resultset asynchronously.</p>\r\n<div class='model-ts'><pre><code>\r\n    public async Task&ltIEnumerable&ltUser&gt&gt FindByIncludeAsync()\r\n    {\r\n        return await UserUow.Repository&ltUser&gt().FindByIncludeAsync(t =&gt t.LastName == \"Doe\", t =&gt t.CompanyMaster);\r\n    }\r\n</code></pre></div>\r\n</div></div>\r\n<div class='row page-section' id= 'findbykey'>\r\n<div class='col-lg-12'>\r\n<h1 class=title-level-1>FindByKey</h1>\r\n\r\n<p class='showHideElement' >It is used to find element based upon the key.</p>\r\n<div class='model-ts'><pre><code>\r\n    public User FindByKey()\r\n    {\r\n        return UserUow.Repository&ltUser&gt().FindByKey(2);\r\n    }\r\n</code></pre></div>\r\n</div></div>\r\n<div class='row page-section' id= 'findbykeyasync'>\r\n<div class='col-lg-12'>\r\n<h1 class=title-level-1>FindByKeyAsync</h1>\r\n\r\n<p class='showHideElement' >It is used to find element based upon the key asynchronously.</p>\r\n<div class='model-ts'><pre><code>\r\n    public async Task&ltUser&gt FindByKeyAsync()\r\n    {\r\n        return await UserUow.Repository&ltUser&gt().FindByKeyAsync(2);\r\n    }\r\n</code></pre></div>\r\n</div></div>\r\n<div class='row page-section' id= 'first'>\r\n<div class='col-lg-12'>\r\n<h1 class=title-level-1>First</h1>\r\n\r\n<p class='showHideElement' >It retrieves the first element in the list based on the given condition.</p>\r\n<div class='model-ts'><pre><code>\r\n    public User First()\r\n    {\r\n        return UserUow.Repository&ltUser&gt().First(a =&gt a.LastName == \"Doe\");\r\n    }\r\n</code></pre></div>\r\n</div></div>\r\n<div class='row page-section' id= 'firstasync'>\r\n<div class='col-lg-12'>\r\n<h1 class=title-level-1>FirstAsync</h1>\r\n\r\n<p class='showHideElement' >It retrieves the first element in the list which fulfiles the given condition asynchronously.</p>\r\n<div class='model-ts'><pre><code>\r\n    public async Task&ltUser&gt FirstAsync()\r\n    {\r\n        return await UserUow.Repository&ltUser&gt().FirstAsync(a =&gt a.LastName == \"Doe\");\r\n    }\r\n</code></pre></div>\r\n</div></div>\r\n<div class='row page-section' id= 'firstordefault'>\r\n<div class='col-lg-12'>\r\n<h1 class=title-level-1>FirstOrDefault</h1>\r\n\r\n<p class='showHideElement' >It retrieves the first element in the list which fulfiles the given condition if not then returns the default value as resultset .</p>\r\n<div class='model-ts'><pre><code>\r\n    public User FirstOrDefault()\r\n    {\r\n        return UserUow.Repository&ltUser&gt().FirstOrDefault(a =&gt a.LastName == \"Doe\");\r\n    }\r\n</code></pre></div>\r\n</div></div>\r\n<div class='row page-section' id= 'firstordefaultasync'>\r\n<div class='col-lg-12'>\r\n<h1 class=title-level-1>FirstOrDefaultAsync</h1>\r\n\r\n<p class='showHideElement' >It retrieves the first element in the list which fulfiles the given condition if not then returns the default value as resultset asynchronously.</p>\r\n<div class='model-ts'><pre><code>\r\n    public async Task&ltUser&gt FirstOrDefaultAsync()\r\n    {\r\n        return await UserUow.Repository&ltUser&gt().FirstOrDefaultAsync(a =&gt a.LastName == \"Doe\");\r\n    }\r\n</code></pre></div>\r\n</div></div>\r\n<div class='row page-section' id= 'last'>\r\n<div class='col-lg-12'>\r\n<h1 class=title-level-1>Last</h1>\r\n\r\n<p class='showHideElement' >It retrieves the last element in the list which fulfiles the given condition.</p>\r\n<div class='model-ts'><pre><code>\r\n    public User Last()\r\n    {\r\n        return UserUow.Repository&ltUser&gt().Last(a =&gt a.LastName == \"Christian\");\r\n    }\r\n</code></pre></div>\r\n</div></div>\r\n<div class='row page-section' id= 'lastasync'>\r\n<div class='col-lg-12'>\r\n<h1 class=title-level-1>LastAsync</h1>\r\n\r\n<p class='showHideElement' >It retrieves the last element in the list which fulfiles the given condition asynchronously.</p>\r\n<div class='model-ts'><pre><code>\r\n    public async Task&ltUser&gt LastAsync()\r\n    {\r\n        return await UserUow.Repository&ltUser&gt().LastAsync(a =&gt a.LastName == \"Christian\");\r\n    }\r\n</code></pre></div>\r\n</div></div>\r\n<div class='row page-section' id= 'lastordefault'>\r\n<div class='col-lg-12'>\r\n<h1 class=title-level-1>LastOrDefault</h1>\r\n\r\n<p class='showHideElement' >It retrieves the last element in the list which fulfiles the given condition if not then returns the default value as resultset.</p>\r\n<div class='model-ts'><pre><code>\r\n    public User LastOrDefault()\r\n    {\r\n        return UserUow.Repository&ltUser&gt().LastOrDefault(a =&gt a.LastName == \"Doe\");\r\n    }\r\n</code></pre></div>\r\n</div></div>\r\n<div class='row page-section' id= 'lastordefaultasync'>\r\n<div class='col-lg-12'>\r\n<h1 class=title-level-1>LastOrDefaultAsync</h1>\r\n\r\n<p class='showHideElement' >It retrieves the last element in the list which fulfiles the given condition if not then returns the default value as resultset asynchronously.</p>\r\n<div class='model-ts'><pre><code>\r\n    public async Task&ltUser&gt LastOrDefaultAsync()\r\n    {\r\n        return await UserUow.Repository&ltUser&gt().LastOrDefaultAsync(a =&gt a.LastName == \"Doe\");\r\n    }\r\n</code></pre></div>\r\n</div></div>\r\n<div class='row page-section' id= 'queryable'>\r\n<div class='col-lg-12'>\r\n<h1 class=title-level-1>Queryable</h1>\r\n\r\n<p class='showHideElement' >It is used to design a raw query to retrieve the required resultset.</p>\r\n<div class='model-ts'><pre><code>\r\n    public IQueryable&ltUser&gt Queryable()\r\n    {\r\n        return UserUow.Repository&ltUser&gt().Queryable().Where(a =&gt a.LastName == \"Doe\");\r\n    }\r\n</code></pre></div>\r\n</div></div>\r\n<div class='row page-section' id= 'single'>\r\n<div class='col-lg-12'>\r\n<h1 class=title-level-1>Single</h1>\r\n\r\n<p class='showHideElement' >It retrieves the single element in the list which fulfiles the given condition.</p>\r\n<div class='model-ts'><pre><code>\r\n    public User Single()\r\n    {\r\n        return UserUow.Repository&ltUser&gt().Single(a =&gt a.FirstName == \"John\");\r\n    }\r\n</code></pre></div>\r\n</div></div>\r\n<div class='row page-section' id= 'singleasync'>\r\n<div class='col-lg-12'>\r\n<h1 class=title-level-1>SingleAsync</h1>\r\n\r\n<p class='showHideElement' >It retrieves the single element in the list which fulfiles the given condition asynchronously.</p>\r\n<div class='model-ts'><pre><code>\r\n    public async Task&ltUser&gt SingleAsync()\r\n    {\r\n        return await UserUow.Repository&ltUser&gt().SingleAsync(a =&gt a.FirstName == \"John\");\r\n    }\r\n</code></pre></div>\r\n</div></div>\r\n<div class='row page-section' id= 'singleordefault'>\r\n<div class='col-lg-12'>\r\n<h1 class=title-level-1>SingleOrDefault</h1>\r\n\r\n<p class='showHideElement' >It retrieves the single element in the list which fulfiles the given condition if not then returns the default value as resultset.</p>\r\n<div class='model-ts'><pre><code>\r\n    public User SingleOrDefault()\r\n    {\r\n        return UserUow.Repository&ltUser&gt().SingleOrDefault(a =&gt a.FirstName == \"terrance\");\r\n    }\r\n</code></pre></div>\r\n</div></div>\r\n<div class='row page-section' id= 'singleordefaultasync'>\r\n<div class='col-lg-12'>\r\n<h1 class=title-level-1>SingleOrDefaultAsync</h1>\r\n\r\n<p class='showHideElement' >It retrieves the single element in the list which fulfiles the given condition if not then returns the default value as resultset asynchronously.</p>\r\n<div class='model-ts'><pre><code>\r\n    public async Task&ltUser&gt SingleOrDefaultAsync()\r\n    {\r\n        return await UserUow.Repository&ltUser&gt().SingleOrDefaultAsync(a =&gt a.FirstName == \"terrance\");\r\n    }\r\n</code></pre></div>\r\n</div></div>\r\n"}