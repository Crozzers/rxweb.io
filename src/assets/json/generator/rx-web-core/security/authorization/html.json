{"rightSidebarLinks":[{"id":"authorization","title":"Authorization","subLink":null},{"id":"authorization","title":"Authorization","subLink":[]},{"id":"rolebasedauthorization.","title":"Role Based Authorization.","subLink":[{"title":"Access","id":"access","thirdLevelLink":[]},{"title":"AllowAnonymous","id":"allowanonymous","thirdLevelLink":[]}]},{"id":"githubissues","title":"Authorization Github Issues","subLink":null}],"title":"Authorization","description":"","validatorType":"decorators","validationTypeTitle":"Decorators","type":"simple","gitDocPath":null,"category":"security","subCategory":null,"linkTitle":"authorization","tabArray":{},"innerHtml":null,"htmlContent":"<div class='row page-section' id= 'authorization'>\r\n<div class='col-lg-12'>\r\n<h2>Authorization<a title='Link to this heading' class='link-header' href='/security/authorization#authorization'><i class='fa fa-link'></i></a></h2>\r\n\r\n<p class='showHideElement' ><span class='highlighted'>Authorization</span> is a method of adjudging which user is able to do what. It uses <span class='highlighted'>authentication</span> for identifying the user, It is done using role based authorization mechanism through which the access modules of the user is determined based upon role where rules are maintained in the database.</p>\r\n</div></div>\r\n<div class='row page-section' id= 'rolebasedauthorization.'>\r\n<div class='col-lg-12'>\r\n<h2>Role Based Authorization.<a title='Link to this heading' class='link-header' href='/security/authorization#rolebasedauthorization.'><i class='fa fa-link'></i></a></h2>\r\n\r\n<p class='showHideElement' >Role based authorization is a mechanism through which we determine that which user can have which acess for what module. For example, the admin user has the right to add elements, read elements, edit elements and delete elements and a non admin user has some specific rights based upon the user permissions which is managed in <span class='highlighted'>RolePermissions</span> table where Role is defined from <span class='highlighted'>Roles</span>.</p>\r\n<p class='showHideElement' >Roles Table:</p>\r\n<table class=\"table table-bordered\">\r\n<tr><th>RoleId</th><th>RoleName</th></tr>\r\n<tr><td>1</td><td>Admin</td></tr>\r\n<tr><td>2</td><td>HR</td></tr>\r\n</table>\r\n<p class='showHideElement' >RolePermissions Table:</p>\r\n<table class=\"table table-bordered\">\r\n<tr><th>RolePermissionId</th><th>RoleId</th><th>RoleId</th><th>RoleId</th><th>RoleId</th></tr>\r\n<tr><td>1</td><td>1</td><td>True</td><td>True</td><td>True</td><td>True</td></tr>\r\n<tr><td>2</td><td>2</td><td>True</td><td>False</td><td>False</td><td>False</td></tr>\r\n</table>\r\n<p class='showHideElement' >Based upon the RoleId and ApplicationModuleId it will retrieve the information about which user has how much access of which module based upon the role defined in Roles Table. </p>\r\n<p class='showHideElement' >The application module in <span class='highlighted'>RolePermissions</span> table is a FK reference from <span class='highlighted'>ApplicationModules</span> table</p>\r\n<p class='showHideElement' >ApplicationModules Table:</p>\r\n<table class=\"table table-bordered\">\r\n<tr><th>ApplicationModuleId</th><th>ModuleMasterId</th><th>ParentApplicationModuleId</th></tr>\r\n<tr><td>1</td><td>1</td><td>1</td></tr>\r\n</table>\r\n<p class='showHideElement' >The Module is defined in <span class='highlighted'>ModuleMasters</span> Table</p>\r\n<p class='showHideElement' >ModuleMasters Table: </p>\r\n<table class=\"table table-bordered\">\r\n<tr><th>ModuleMasterId</th><th>ModuleMasterName</th><th>StatusId</th></tr>\r\n<tr><td>1</td><td>Resource</td><td>1</td></tr>\r\n</table>\r\n</div></div>\r\n<div class='row page-section' id= 'access'>\r\n<div class='col-lg-12'>\r\n<h2>Access<a title='Link to this heading' class='link-header' href='/security/authorization#access'><i class='fa fa-link'></i></a></h2>\r\n\r\n<p class='showHideElement' >It is done using <span class='highlighted'>Access</span> in which id of the application module is passed. Through which it will execute authorization based upon which the user rights are determined.</p>\r\n<div class='model-ts'><pre><code>\r\n    [ApiController]\r\n    [Route(\"api/[controller]\")]\r\n\t[Access(1)]\r\n\tpublic class UsersController : BaseController<User,vUsers,vUserRecords>\r\n    {\r\n        public UsersController(IUserUow uow):base(uow) {}\r\n    }\r\n</code></pre></div>\r\n<p class='showHideElement' >To add authorization in the controller using access, the following command is used:</p>\r\n<blockquote class='showHideElement' ><p>-- rxwebcore --controller --basic --main Users --uow --User --access 1</p></blockquote>\r\n<p class='showHideElement' >In this command <span class='highlighted'>Users</span> is the controller name, <span class='highlighted'>User</span> is the module and 1 is the application module Id retrieved from the database. </p>\r\n</div></div>\r\n<div class='row page-section' id= 'allowanonymous'>\r\n<div class='col-lg-12'>\r\n<h2>AllowAnonymous<a title='Link to this heading' class='link-header' href='/security/authorization#allowanonymous'><i class='fa fa-link'></i></a></h2>\r\n\r\n<p class='showHideElement' >When you want to by-pass the controller without any authorization when you want any user to access the specific action. For example: If you have a scenario where you want to by-pass the post action of registeration.</p>\r\n<p class='showHideElement' >As per the below scenario it will allow any user to access this <span class='highlighted'>Post</span> method and allow new user to register.  </p>\r\n<div class='model-ts'><pre><code>\r\n    [ApiController]\r\n    [Route(\"api/[controller]\")]\r\n\t[AllowAnonymous]\r\n\tpublic class UserController : BaseController<User,vUser,vUserRecord>\r\n    {\r\n        public UserController(IUserUow uow):base(uow) {}\r\n    }\r\n</code></pre></div>\r\n</div></div>\r\n<div class=\"row page-section\" id=\"githubissues\">\r\n<div class=\"col-lg-12\">\r\n<div component=\"app-github-issue\"></div>\r\n</div>\r\n</div>\r\n<div component=\"app-contribution\"></div>\r\n"}