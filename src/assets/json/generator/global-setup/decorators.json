{"rightSidebarLinks":[{"id":"global-setup","title":"global-setup","subLink":null},{"id":"installingthepackage","title":"Installing the Package","subLink":[]},{"id":"registerthemodule","title":"Register the Module","subLink":[]},{"id":"createserviceforresolvingthemultilingualdataandregisteritglobally","title":"Create Service for resolving the Multilingual Data and register it globally","subLink":[]},{"id":"addingcanactivateontheroutesoftheapplication","title":"Adding CanActivate on the routes of the application","subLink":[]}],"title":"Global Setup","description":"","validatorType":"decorators","validationTypeTitle":"Decorators","type":"simple","gitDocPath":"https://github.com/rxweb/rxweb.io/edit/master/docs/angular/localization/global-setup.md","category":"global-setup","subCategory":"","linkTitle":"global-setup","tabArray":{},"innerHtml":null,"htmlContent":"<p class='showHideElement' >For resolving multilingual data based upon the user's navigation requires a global setup based upon which the multilingual data is resolved first and after the component is navigated. The component specific and global multilingual data are stored in the localization folder of assets folder. </p>\r\n<blockquote class='showHideElement' ><p>The created file must be there in a naming convention having name of the component and the language code of the json file. For Example, if it is global it should be <span class='highlighted'>global-en.json</span> and if it is component specific it should be <span class='highlighted'>StudentAddComponent-en.json</span></p></blockquote>\r\n<p class='showHideElement' >Let's understand the step by step flow for the global setup for resolving multilingual data before the page navigation using <span class='highlighted'>CanActivate</span>.</p>\r\n<div class='row page-section' id= 'installingthepackage'>\r\n<div class='col-lg-12'>\r\n<h2>Installing the Package<a title='Link to this heading' class='link-header'  href='/global-setup/global-setup/decorators#installingthepackage'><i class='fa fa-link'></i></a></h2>\r\n\r\n<p class='showHideElement' >To install the package, run the below command</p>\r\n<div component=\"app-code\" key=\"global-setup-installation-component\"></div> \r\n</div></div>\r\n<div class='row page-section' id= 'registerthemodule'>\r\n<div class='col-lg-12'>\r\n<h2>Register the Module<a title='Link to this heading' class='link-header'  href='/global-setup/global-setup/decorators#registerthemodule'><i class='fa fa-link'></i></a></h2>\r\n\r\n<p class='showHideElement' >Register the <span class='highlighted'>RxLocalizationModule</span> in the app module </p>\r\n<div component=\"app-code\" key=\"global-setup-module-component\"></div> \r\n</div></div>\r\n<div class='row page-section' id= 'createserviceforresolvingthemultilingualdataandregisteritglobally'>\r\n<div class='col-lg-12'>\r\n<h2>Create Service for resolving the Multilingual Data and register it globally<a title='Link to this heading' class='link-header'  href='/global-setup/global-setup/decorators#createserviceforresolvingthemultilingualdataandregisteritglobally'><i class='fa fa-link'></i></a></h2>\r\n\r\n<p class='showHideElement' >To resolve the multilingual data using CanActivate we need to create a BaseMultilingualResolver and declare it as provider into the app module. </p>\r\n<div component=\"app-code\" key=\"global-setup-baseActivate-component\"></div>\r\n<p class='showHideElement' >In the above described code, the BaseMultilingualResolver makes a <span class='highlighted'>http</span> call to the assets folder and resolve the multilingual data based upon the language that is stored in the browser storage whenever the user logs in. For that we need to pass the component name in the <span class='highlighted'>@multilingual</span> decorator so that based upon the component name it will resolve the component specific data from that particular json. If the component name is not mentioned, it will resolve the data based upon the global json file based upon the language code.  </p>\r\n</div></div>\r\n<div class='row page-section' id= 'addingcanactivateontheroutesoftheapplication'>\r\n<div class='col-lg-12'>\r\n<h2>Adding CanActivate on the routes of the application<a title='Link to this heading' class='link-header'  href='/global-setup/global-setup/decorators#addingcanactivateontheroutesoftheapplication'><i class='fa fa-link'></i></a></h2>\r\n\r\n<p class='showHideElement' >While configurating the routes of the applications, the <span class='highlighted'>BaseMultilingualResolver</span> is passed in CanActivate, By doing this whenever the user will navigate to the path by initially resolving the component data.</p>\r\n<div component=\"app-code\" key=\"global-setup-canActivate-component\"></div>\r\n</div></div>\r\n"}