{"complete":{"notes":[],"component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup,Validators } from \"@angular/forms\"\r\nimport { User } from './user.model';\r\n\r\n@Component({\r\n    selector: 'app-patternAsync-complete-template-driven-validation-directives',\r\n    templateUrl: './pattern-async-complete.component.html'\r\n})\r\nexport class PatternAsyncCompleteTemplateDrivenValidationDirectivesComponent implements OnInit {\r\n    user: User\r\n\t\r\n    constructor(\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n       this.user= new User()\r\n    }\r\n}\r\n","html":"<div>\r\n  <form #userForm = \"ngForm\" [rxwebForm]=\"userForm\" [model]=\"user\">\r\n    <div class=\"form-group\">\r\n      <label>User Name</label>\r\n\t    <input type=\"text\" name=\"userName\" [(ngModel)]=\"user.userName\"  class=\"form-control\" [rxpatternAsync]=\"{'expression':{'onlyAlpha': '/^[A-Za-z]+$/'}}\"/>\r\n\r\n      <small class=\"form-text text-muted\">It checked that username match alpha regex or not<br/></small>\r\n\t   <small class=\"form-text text-danger\" *ngIf=\"userForm.controls?.userName?.errors\">{{userForm.controls?.userName?.errors?.pattern.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Zip Code</label>\r\n\t    <input type=\"text\" name=\"zipCode\" [(ngModel)]=\"user.zipCode\"  class=\"form-control\" [rxpatternAsync]=\"{'expression':{'zipCode':'/^[0-9]{5}(?:-[0-9]{4})?$/' },'message':'Zip code should match 12345 or 12345-6789'}\"/>\r\n\r\n      <small class=\"form-text text-muted\">It checked that zipcode match zipcode regex or not <br/></small>\r\n      <small class=\"form-text text-muted\">Shows custom message<br/></small>\r\n\t   <small class=\"form-text text-danger\" *ngIf=\"userForm.controls?.zipCode?.errors\">{{userForm.controls?.zipCode?.errors?.pattern.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Pin Code</label>\r\n\t    <input type=\"text\" name=\"pinCode\" [(ngModel)]=\"user.pinCode\"  class=\"form-control\" [rxpatternAsync]=\"{'expression':{'pinCode':'/^[1-9][0-9]{5}$/' },'messageKey':'patternMessageKey'}\"/>\r\n\r\n      <small class=\"form-text text-muted\">Shows custom message based on message key<br/></small>\r\n\t   <small class=\"form-text text-danger\" *ngIf=\"userForm.controls?.pinCode?.errors\">{{userForm.controls?.pinCode?.errors?.pattern.message}}<br/></small>\t\r\n    </div>\r\n    <button [disabled]=\"!userForm.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","model":"\r\nexport class User {\r\n\r\n\tuserName: string;\r\n\t\r\n\t\r\n\tzipCode: string;\r\n\t\r\n\t\r\n\tpinCode: string;\r\n\t\r\n\t\r\n}\r\n","modelName":"user.model.ts","json":{}},"expressionExample":{"notes":null,"component":null,"html":null,"model":"[patternAsync]=\"{'expression':{'onlyAlpha': /^[A-Za-z]+$/}\"","modelName":null,"json":{}},"expression":{"notes":[],"component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup,Validators } from \"@angular/forms\"\r\nimport { User } from './user.model';\r\n\r\n@Component({\r\n    selector: 'app-patternAsync-expression-template-driven-validation-directives',\r\n    templateUrl: './pattern-async-expression.component.html'\r\n})\r\nexport class PatternAsyncExpressionTemplateDrivenValidationDirectivesComponent implements OnInit {\r\n    user: User\r\n\t\r\n    constructor(\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n       this.user= new User()\r\n    }\r\n}\r\n","html":"<div>\r\n  <form #userForm = \"ngForm\" [rxwebForm]=\"userForm\" [model]=\"user\">\r\n    <div class=\"form-group\">\r\n      <label>User Name</label>\r\n\t    <input type=\"text\" name=\"userName\" [(ngModel)]=\"user.userName\"  class=\"form-control\" [rxpatternAsync]=\"{'expression':{'onlyAlpha': '/^[A-Za-z]+$/'}}\"/>\r\n\r\n      <small class=\"form-text text-muted\">It checked that username match alpha regex or not<br/></small>\r\n\t   <small class=\"form-text text-danger\" *ngIf=\"userForm.controls?.userName?.errors\">{{userForm.controls?.userName?.errors?.pattern.message}}<br/></small>\t\r\n    </div>\r\n    <button [disabled]=\"!userForm.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","model":"\r\nexport class User {\r\n\r\n\tuserName: string;\r\n\t\r\n\t\r\n}\r\n","modelName":"user.model.ts","json":{}},"messageExample":{"notes":null,"component":null,"html":null,"model":"[patternAsync]=\"{'expression':{'zipCode':/^[0-9]{5?:-[0-9]{4?$/ ,'message':'Zip code should match 12345 or 12345-6789'}\"","modelName":null,"json":{}},"message":{"notes":[],"component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup,Validators } from \"@angular/forms\"\r\nimport { User } from './user.model';\r\n\r\n@Component({\r\n    selector: 'app-patternAsync-message-template-driven-validation-directives',\r\n    templateUrl: './pattern-async-message.component.html'\r\n})\r\nexport class PatternAsyncMessageTemplateDrivenValidationDirectivesComponent implements OnInit {\r\n    user: User\r\n\t\r\n    constructor(\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n       this.user= new User()\r\n    }\r\n}\r\n","html":"<div>\r\n  <form #userForm = \"ngForm\" [rxwebForm]=\"userForm\" [model]=\"user\">\r\n    <div class=\"form-group\">\r\n      <label>Zip Code</label>\r\n\t    <input type=\"text\" name=\"zipCode\" [(ngModel)]=\"user.zipCode\"  class=\"form-control\" [rxpatternAsync]=\"{'expression':{'zipCode':'/^[0-9]{5}(?:-[0-9]{4})?$/' },'message':'Zip code should match 12345 or 12345-6789'}\"/>\r\n\r\n      <small class=\"form-text text-muted\">It checked that zipcode match zipcode regex or not <br/></small>\r\n      <small class=\"form-text text-muted\">Shows custom message<br/></small>\r\n\t   <small class=\"form-text text-danger\" *ngIf=\"userForm.controls?.zipCode?.errors\">{{userForm.controls?.zipCode?.errors?.pattern.message}}<br/></small>\t\r\n    </div>\r\n    <button [disabled]=\"!userForm.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","model":"\r\nexport class User {\r\n\r\n\tzipCode: string;\r\n\t\r\n\t\r\n}\r\n","modelName":"user.model.ts","json":{}},"messageKeyExample":{"notes":null,"component":null,"html":null,"model":"[patternAsync]=\"{'expression':{'pinCode':/^[1-9][0-9]{5$/ ,'messageKey':'patternMessageKey'}\"","modelName":null,"json":{}},"messageKey":{"notes":[],"component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup,Validators } from \"@angular/forms\"\r\nimport { User } from './user.model';\r\n\r\n@Component({\r\n    selector: 'app-patternAsync-messageKey-template-driven-validation-directives',\r\n    templateUrl: './pattern-async-message-key.component.html'\r\n})\r\nexport class PatternAsyncMessageKeyTemplateDrivenValidationDirectivesComponent implements OnInit {\r\n    user: User\r\n\t\r\n    constructor(\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n       this.user= new User()\r\n    }\r\n}\r\n","html":"<div>\r\n  <form #userForm = \"ngForm\" [rxwebForm]=\"userForm\" [model]=\"user\">\r\n    <div class=\"form-group\">\r\n      <label>Pin Code</label>\r\n\t    <input type=\"text\" name=\"pinCode\" [(ngModel)]=\"user.pinCode\"  class=\"form-control\" [rxpatternAsync]=\"{'expression':{'pinCode':'/^[1-9][0-9]{5}$/' },'messageKey':'patternMessageKey'}\"/>\r\n\r\n      <small class=\"form-text text-muted\">Shows custom message based on message key<br/></small>\r\n\t   <small class=\"form-text text-danger\" *ngIf=\"userForm.controls?.pinCode?.errors\">{{userForm.controls?.pinCode?.errors?.pattern.message}}<br/></small>\t\r\n    </div>\r\n    <button [disabled]=\"!userForm.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","model":"\r\nexport class User {\r\n\r\n\tpinCode: string;\r\n\t\r\n\t\r\n}\r\n","modelName":"user.model.ts","json":{}},"add":{"notes":[],"component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup,Validators } from \"@angular/forms\"\r\nimport { User } from './user.model';\r\n\r\n@Component({\r\n    selector: 'app-patternAsync-add-template-driven-validation-directives',\r\n    templateUrl: './pattern-async-add.component.html'\r\n})\r\nexport class PatternAsyncAddTemplateDrivenValidationDirectivesComponent implements OnInit {\r\n    user: User\r\n\t\r\n    constructor(\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n       this.user= new User()\r\n    }\r\n}\r\n","html":"<div>\r\n  <form #userForm = \"ngForm\" [rxwebForm]=\"userForm\" [model]=\"user\">\r\n    <div class=\"form-group\">\r\n      <label>User Name</label>\r\n\t    <input type=\"text\" name=\"userName\" [(ngModel)]=\"user.userName\"  class=\"form-control\" [rxpatternAsync]=\"{'expression':{'onlyAlpha': '/^[A-Za-z]+$/'}}\"/>\r\n\r\n      <small class=\"form-text text-muted\">It checked that username match alpha regex or not<br/></small>\r\n\t   <small class=\"form-text text-danger\" *ngIf=\"userForm.controls?.userName?.errors\">{{userForm.controls?.userName?.errors?.pattern.message}}<br/></small>\t\r\n    </div>\r\n    <button [disabled]=\"!userForm.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","model":"\r\nexport class User {\r\n\r\n\tuserName: string;\r\n\t\r\n\t\r\n}\r\n","modelName":"user.model.ts","json":{}}}