{"rightSidebarLinks":[{"id":"multilingual","title":"multilingual","subLink":null},{"id":"localizingthedata","title":"Localizing The Data","subLink":[]}],"title":"multilingual","description":"","validatorType":"template-driven","validationTypeTitle":"Template Driven","type":"simple","gitDocPath":"https://github.com/rxweb/rxweb.io/edit/master/docs/angular/learn/multilingual.md","category":"learn","subCategory":null,"linkTitle":"multilingual","tabArray":{},"innerHtml":null,"htmlContent":"<div class='row page-section' id= 'localizingthedata'>\r\n<div class='col-lg-12'>\r\n<h2>Localizing The Data<a title='Link to this heading' class='link-header' href='/learn/multilingual/template-driven/directives#localizingthedata'><i class='fa fa-link'></i></a></h2>\r\n\r\n<p class='showHideElement' >This guide consists of integrating the internationalization in the application which gives the benefit to the user to access the application according to his locale. This will be achieved using @rxweb/translate decorator based approach to render the data according to the user's language.</p>\r\n<p class='showHideElement' >1) Register the <span class='highlighted'>RxTranslateModule</span> globally in the application root module</p>\r\n<div component=\"app-code\" key=\"multilingual-add-model\"></div>\r\n<p class='showHideElement' >2) Setting the translate decorator in the component</p>\r\n<p class='showHideElement' >Passing the @translate decorator into the component along with the translation name to render the multilingual data</p>\r\n<div component=\"app-code\" key=\"multilingual-add-component\"></div>\r\n<p class='showHideElement' >3) Render the data based upon the json keys </p>\r\n<p class='showHideElement' >After forming the json rendering the data into the html based upon the translation object</p>\r\n<div component=\"app-code\" key=\"multilingual-add-html\"></div>\r\n<div class=\"container\">\r\n</div>\r\n</div></div>\r\n"}