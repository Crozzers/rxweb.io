{
    "complete": {
      "notes": [],
      "component": "import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from \"@angular/forms\"\r\nimport { RxFormBuilder, RxwebValidators } from '@rxweb/reactive-form-validators';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { environment } from 'src/environments/environment';\r\n@Component({\r\n  selector: 'app-oneOfAsync-complete-validator',\r\n  templateUrl: './one-of-complete.component.html'\r\n})\r\nexport class oneOfAsyncCompleteValidatorComponent implements OnInit {\r\n  employeeInfoFormGroup: FormGroup\r\n  projectDomains: string[] = [];\r\n  qualifications: string[] = [];\r\n  hobbies: string[] = [];\r\n  skills: string[] = [];\r\n  languages: string[] = [];\r\n\r\n  constructor(\r\n    private formBuilder: RxFormBuilder, private http: HttpClient) { }\r\n\r\n  qualificationsArray: string[] = [\"Secondary\", \"Senior Secondary\", \"B.Tech.\", \"M.Tech.\", \"B.C.A.\", \"M.C.A.\"];\r\n  skillsArray: string[] = [\"MVC\", \"AngularJS\", \"Angular 5\", \"C#\", \"Web Api\", \"SQL Server\"];\r\n  hobbiesArray: string[] = [\"Drawing\", \"Singing\", \"Dancing\", \"Travelling\", \"Sports\"];\r\n  projectDomainsArray: string[] = [\"ECommerce\", \"Banking\", \"Educational\", \"Gaming\"];\r\n  languagesArray: string[] = [\"English\", \"Spanish\", \"French\", \"German\", \"Chinese\"];\r\n\r\n  ngOnInit() {\r\n    this.employeeInfoFormGroup = this.formBuilder.group({\r\n      department: [''],\r\n      projectDomains: ['', RxwebValidators.oneOfAsync({ matchValues: [\"ECommerce\", \"Banking\", \"Educational\", \"Gaming\"] })})],\r\n      qualifications: ['', RxwebValidators.oneOfAsync({ matchValues: [\"Secondary\", \"Senior Secondary\", \"B.Tech\", \"M.Tech\", \"B.C.A.\", \"M.C.A.\"], conditionalExpression: (x, y) => x.department == 'DotNet' })})],\r\n      skills: ['', RxwebValidators.oneOfAsync({ matchValues: [\"MVC\", \"AngularJS\", \"Angular 5\", \"C#\", \"Web Api\", \"SQL Server\"], conditionalExpression: \"x => x.department =='DotNet'\" })})],\r\n      hobbies: ['', RxwebValidators.oneOfAsync({ matchValues: [\"Drawing\", \"Singing\", \"Dancing\", \"Travelling\", \"Sports\"], message: \"Please select atleast 1 hobby\" })})],\r\n      languages: ['', RxwebValidators.oneOfAsync({ matchValues: [\"English\", \"Spanish\", \"French\"], messageKey: 'oneOfAsyncMessageKey' })})]\r\n    });\r\n  }\r\n\r\n  addProjectDomain(element: any, index: number) {\r\n    var indexOf = this.projectDomains.indexOf(element.value);\r\n    element.checked ? this.projectDomains.push(element.value) : this.projectDomains.splice(indexOf, 1);\r\n    this.employeeInfoFormGroup.controls.projectDomains.setValue(this.projectDomains);\r\n  }\r\n\r\n  addQualification(element: any, index: number) {\r\n    var indexOf = this.qualifications.indexOf(element.value);\r\n    element.checked ? this.qualifications.push(element.value) : this.qualifications.splice(indexOf, 1);\r\n    this.employeeInfoFormGroup.controls.qualifications.setValue(this.qualifications);\r\n  }\r\n\r\n  addSkill(element: any, index: number) {\r\n    var indexOf = this.skills.indexOf(element.value);\r\n    element.checked ? this.skills.push(element.value) : this.skills.splice(indexOf, 1);\r\n    this.employeeInfoFormGroup.controls.skills.setValue(this.skills);\r\n  }\r\n\r\n  addHobby(element: any, index: number) {\r\n    var indexOf = this.hobbies.indexOf(element.value);\r\n    element.checked ? this.hobbies.push(element.value) : this.hobbies.splice(indexOf, 1);\r\n    this.employeeInfoFormGroup.controls.hobbies.setValue(this.hobbies);\r\n  }\r\n\r\n  addLanguage(element: any, index: number) {\r\n    var indexOf = this.languages.indexOf(element.value);\r\n    element.checked ? this.languages.push(element.value) : this.languages.splice(indexOf, 1);\r\n    this.employeeInfoFormGroup.controls.languages.setValue(this.languages);\r\n  }\r\n}",
      "html": "<div>\r\n  <form [formGroup]=\"employeeInfoFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label>Department</label>\r\n      <input type=\"text\" formControlName=\"department\" class=\"form-control\" placeholder=\"Enter any department\" />\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Project Domains</label>\r\n      <div class=\"form-check\" *ngFor=\"let tag of projectDomainsArray; let i = index;\">\r\n        <h4>\r\n          <input (click)=\"addProjectDomain($event.target,i)\" type=\"checkbox\" value=\"{{tag}}\" /> {{tag}}\r\n        </h4>\r\n      </div>\r\n      <br>\r\n      <small class=\"form-text text-danger\" *ngIf=\"employeeInfoFormGroup.controls.projectDomains.errors\">{{employeeInfoFormGroup.controls.projectDomains.errors.oneOf.message}}<br></small>\r\n      <small class=\"form-text text-muted\">You must select atleast one option.</small>\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Qualifications</label>\r\n      <div class=\"form-check\" *ngFor=\"let tag of qualificationsArray; let i = index;\">\r\n        <h4>\r\n          <input (click)=\"addQualification($event.target,i)\" type=\"checkbox\" value=\"{{tag}}\" /> {{tag}}\r\n        </h4>\r\n      </div>\r\n      <br>\r\n      <small class=\"form-text text-danger\" *ngIf=\"employeeInfoFormGroup.controls.qualifications.errors\">{{employeeInfoFormGroup.controls.qualifications.errors.oneOf.message}}<br></small>\r\n      <small class=\"form-text text-muted\">To apply the validation on 'Qualifications' field, enter 'DotNet' in 'Department' field</small><br>\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Skills</label><small>( With Conditional Expression )</small><br>\r\n      <div class=\"form-check\" *ngFor=\"let tag of skillsArray; let i = index;\">\r\n        <h4>\r\n          <input (click)=\"addSkill($event.target,i)\" type=\"checkbox\" value=\"{{tag}}\" /> {{tag}}\r\n        </h4>\r\n      </div>\r\n      <br>\r\n      <small class=\"form-text text-danger\" *ngIf=\"employeeInfoFormGroup.controls.skills.errors\">{{employeeInfoFormGroup.controls.skills.errors.oneOf.message}}<br></small>\r\n      <small class=\"form-text text-muted\">To apply the validation on 'Skills' field, enter 'DotNet' in 'Department' field</small><br>\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Hobbies</label>\r\n      <div class=\"form-check\" *ngFor=\"let tag of hobbiesArray; let i = index;\">\r\n        <h4>\r\n          <input (click)=\"addHobby($event.target,i)\" type=\"checkbox\" value=\"{{tag}}\" /> {{tag}}\r\n        </h4>\r\n      </div>\r\n      <br>\r\n      <small class=\"form-text text-danger\" *ngIf=\"employeeInfoFormGroup.controls.hobbies.errors\">{{employeeInfoFormGroup.controls.hobbies.errors.oneOf.message}}<br></small>\r\n      <small class=\"form-text text-muted\">Shows custom message</small><br>\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Languages</label>\r\n      <div class=\"form-check\" *ngFor=\"let tag of languagesArray\">\r\n        <h4>\r\n          <input (click)=\"addLanguage($event.target)\" type=\"checkbox\" value=\"{{tag}}\" /> {{tag}}\r\n        </h4>\r\n      </div>\r\n      <br>\r\n      <small class=\"form-text text-muted\">oneOfAsync validation using messageKey.</small><br>\r\n      <small class=\"form-text text-danger\" *ngIf=\"employeeInfoFormGroup.controls?.languages?.errors\">{{employeeInfoFormGroup.controls.languages.errors.oneOf.message}}</small><br>\r\n    </div>\r\n    <button [disabled]=\"!employeeInfoFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n    </div>",
      "model": null,
      "modelName": null,
      "json": null
      },
    "matchValuesExample": {
      "notes": null,
      "component": null,
      "html": null,
      "model": "RxwebValidators.oneOfAsync({matchValues:[\"ECommerce\", \"Banking\",\"Educational\",\"Gaming\"]})",
      "modelName": null,
      "json": null
    },
    "matchValues": {
      "notes": [],
      "component": "import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from \"@angular/forms\"\r\nimport { RxFormBuilder, RxwebValidators } from '@rxweb/reactive-form-validators';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { environment } from 'src/environments/environment';\r\n@Component({\r\n    selector: 'app-oneOfAsync-matchValues-validator',\r\n    templateUrl: './one-of-match-values.component.html'\r\n})\r\nexport class oneOfAsyncMatchValuesValidatorComponent implements OnInit {\r\n    employeeInfoFormGroup: FormGroup\r\n    projectDomains: string[] = [];\r\n\r\n    constructor(\r\n        private formBuilder: RxFormBuilder ,private http: HttpClient) { }\r\n\r\n        projectDomainsArray: string[] = [\"ECommerce\", \"Banking\", \"Educational\", \"Gaming\"];\r\n      \r\n        ngOnInit() {\r\n            this.employeeInfoFormGroup = this.formBuilder.group({\r\n                projectDomains:['', RxwebValidators.oneOfAsync({matchValues:[\"ECommerce\", \"Banking\",\"Educational\",\"Gaming\"]})})]\r\n            });\r\n        }\r\n\r\n        addProjectDomain(element: any, index: number) {\r\n          var indexOf = this.projectDomains.indexOf(element.value);\r\n          element.checked ? this.projectDomains.push(element.value) : this.projectDomains.splice(indexOf, 1);\r\n          this.employeeInfoFormGroup.controls.projectDomains.setValue(this.projectDomains);\r\n        }\r\n}\r\n",
      "html": "<div>\r\n    <form [formGroup]=\"employeeInfoFormGroup\">\r\n      <div class=\"form-group\">\r\n        <label>Project Domains</label>\r\n        <div class=\"form-check\" *ngFor=\"let tag of projectDomainsArray; let i = index;\">\r\n          <h4>\r\n            <input (click)=\"addProjectDomain($event.target,i)\"  type=\"checkbox\" value=\"{{tag}}\" /> {{tag}}\r\n          </h4>\r\n        </div>\r\n        <br>\r\n        <small class=\"form-text text-danger\" *ngIf=\"employeeInfoFormGroup.controls.projectDomains.errors\">{{employeeInfoFormGroup.controls.projectDomains.errors.oneOf.message}}<br></small>\r\n        <small class=\"form-text text-muted\">You must select atleast one option.</small>\r\n      </div>\r\n      <button [disabled]=\"!employeeInfoFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n    </form>\r\n  </div>",
      "model": null,
      "modelName": null,
      "json": null
    },
    "messageExample": {
      "notes": null,
      "component": null,
      "html": null,
      "model": "RxwebValidators.oneOfAsync({matchValues:[\"Drawing\", \"Singing\",\"Dancing\",\"Travelling\",\"Sports\"],message: \"Please select atleast 1 hobby\"})",
      "modelName": null,
      "json": null
    },
    "message": {
      "notes": [],
      "component": "import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from \"@angular/forms\"\r\nimport { RxFormBuilder, RxwebValidators } from '@rxweb/reactive-form-validators';\r\nimport { environment } from 'src/environments/environment';\r\nimport { HttpClient } from '@angular/common/http';\r\n\r\n@Component({\r\n    selector: 'app-oneOfAsync-message-validator',\r\n    templateUrl: './one-of-message.component.html'\r\n})\r\nexport class oneOfAsyncMessageValidatorComponent implements OnInit {\r\n    employeeInfoFormGroup: FormGroup\r\n    hobbies: string[] = [];\r\n\r\n    constructor(\r\n        private formBuilder: RxFormBuilder, private http: HttpClient) { }\r\n\r\n    hobbiesArray: string[] = [\"Drawing\", \"Singing\", \"Dancing\", \"Travelling\", \"Sports\"];\r\n\r\n    ngOnInit() {\r\n        this.employeeInfoFormGroup = this.formBuilder.group({\r\n            hobbies: ['', RxwebValidators.oneOfAsync({ matchValues: [\"Drawing\", \"Singing\", \"Dancing\", \"Travelling\", \"Sports\"], message: \"Please select atleast 1 hobby\" })})]\r\n        });\r\n    }\r\n\r\n    addHobby(element: any, index: number) {\r\n        var indexOf = this.hobbies.indexOf(element.value);\r\n        element.checked ? this.hobbies.push(element.value) : this.hobbies.splice(indexOf, 1);\r\n        this.employeeInfoFormGroup.controls.hobbies.setValue(this.hobbies);\r\n    }\r\n}\r\n",
      "html": "<div>\r\n    <form [formGroup]=\"employeeInfoFormGroup\">\r\n      <div class=\"form-group\">\r\n        <label>Hobbies</label>\r\n        <div class=\"form-check\" *ngFor=\"let tag of hobbiesArray; let i = index;\">\r\n            <h4>\r\n              <input (click)=\"addHobby($event.target,i)\" type=\"checkbox\" value=\"{{tag}}\" /> {{tag}}\r\n            </h4>\r\n          </div>\r\n          <br>\r\n          <small class=\"form-text text-danger\" *ngIf=\"employeeInfoFormGroup.controls.hobbies.errors\">{{employeeInfoFormGroup.controls.hobbies.errors.oneOf.message}}<br></small>\r\n        <small class=\"form-text text-muted\">Shows custom message</small><br>\r\n      </div>\r\n      <button [disabled]=\"!employeeInfoFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n    </form>\r\n    </div>",
      "model": null,
      "modelName": null,
      "json": null
    },
    "messageKeyExample": {
      "notes": null,
      "component": null,
      "html": null,
      "model": "RxwebValidators.oneOfAsync({ matchValues: [\"English\", \"Spanish\", \"French\", \"German\", \"Chinese\"], messageKey: 'oneOfAsyncMessageKey' })",
      "modelName": null,
      "json": null
    },
    "messageKey": {
      "notes": [],
      "component": "import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from \"@angular/forms\"\r\nimport { RxFormBuilder, RxwebValidators } from '@rxweb/reactive-form-validators';\r\n\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { environment } from 'src/environments/environment';\r\n\r\n@Component({\r\n  selector: 'app-oneOfAsync-messageKey-validator',\r\n  templateUrl: './one-of-message-key.component.html'\r\n})\r\nexport class oneOfAsyncMessageKeyValidatorComponent implements OnInit {\r\n  employeeInfoFormGroup: FormGroup\r\n  languages: string[] = [];\r\n\r\n  constructor(\r\n    private formBuilder: RxFormBuilder, private http: HttpClient) { }\r\n\r\n  languagesArray: string[] = [\"English\", \"Spanish\", \"French\", \"German\", \"Chinese\"];\r\n\r\n  ngOnInit() {\r\n    this.employeeInfoFormGroup = this.formBuilder.group({\r\n      languages: ['', RxwebValidators.oneOfAsync({ matchValues: [\"English\", \"Spanish\", \"French\", \"German\", \"Chinese\"], messageKey: 'oneOfAsyncMessageKey' })})]\r\n    });\r\n  }\r\n\r\n  addLanguage(element: any, index: number) {\r\n    var indexOf = this.languages.indexOf(element.value);\r\n    element.checked ? this.languages.push(element.value) : this.languages.splice(indexOf, 1);\r\n    this.employeeInfoFormGroup.controls.languages.setValue(this.languages);\r\n  }\r\n}",
      "html": "<div>\r\n  <form [formGroup]=\"employeeInfoFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label>Languages</label>\r\n      <div class=\"form-check\" *ngFor=\"let tag of languagesArray\">\r\n        <h4>\r\n          <input (click)=\"addLanguage($event.target)\" type=\"checkbox\" value=\"{{tag}}\" /> {{tag}}\r\n        </h4>\r\n      </div>\r\n      <br>\r\n      <small class=\"form-text text-muted\">oneOfAsync validation using messageKey.</small><br>\r\n      <small class=\"form-text text-danger\" *ngIf=\"employeeInfoFormGroup.controls.languages.errors\">{{employeeInfoFormGroup.controls.languages.errors.oneOf.message}}</small><br>\r\n    </div>\r\n    <button [disabled]=\"!employeeInfoFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>",
      "model": null,
      "modelName": null,
      "json": null
    },
    "conditionalExpressionExampleFunction": {
      "notes": null,
      "component": null,
      "html": null,
      "model": "RxwebValidators.oneOfAsync({matchValues:[\"Secondary\",\"Senior Secondary\",\"B.Tech\",\"M.Tech\",\"B.C.A.\",\"M.C.A.\"], conditionalExpression: (x,y) => x.department =='DotNet'})",
      "modelName": null,
      "json": null
    },
    "conditionalExpression": {
      "notes": [],
      "component": "import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from \"@angular/forms\"\r\nimport { RxFormBuilder, RxwebValidators } from '@rxweb/reactive-form-validators';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { environment } from 'src/environments/environment';\r\n@Component({\r\n  selector: 'app-oneOfAsync-conditionalExpression-validator',\r\n  templateUrl: './one-of-conditional-expression.component.html'\r\n})\r\nexport class oneOfAsyncConditionalExpressionValidatorComponent implements OnInit {\r\n  employeeInfoFormGroup: FormGroup;\r\n  qualifications: string[] = [];\r\n  skills: string[] = [];\r\n\r\n  constructor(\r\n    private formBuilder: RxFormBuilder, private http: HttpClient) { }\r\n\r\n  qualificationsArray: string[] = [\"Secondary\", \"Senior Secondary\", \"B.Tech.\", \"M.Tech.\", \"B.C.A.\", \"M.C.A.\"];\r\n  skillsArray: string[] = [\"MVC\", \"AngularJS\", \"Angular 5\", \"C#\", \"Web Api\", \"SQL Server\"];\r\n\r\n  ngOnInit() {\r\n    this.employeeInfoFormGroup = this.formBuilder.group({\r\n      department: [''],\r\n      qualifications: ['', RxwebValidators.oneOfAsync({ matchValues: [\"Secondary\", \"Senior Secondary\", \"B.Tech\", \"M.Tech\", \"B.C.A.\", \"M.C.A.\"], conditionalExpression: (x, y) => x.department == 'DotNet' })})],\r\n      skills: ['', RxwebValidators.oneOfAsync({ matchValues: [\"MVC\", \"AngularJS\", \"Angular 5\", \"C#\", \"Web Api\", \"SQL Server\"], conditionalExpression: \"x => x.department =='DotNet'\" })})]\r\n    });\r\n  }\r\n\r\n  addQualification(element: any, index: number) {\r\n    var indexOf = this.qualifications.indexOf(element.value);\r\n    element.checked ? this.qualifications.push(element.value) : this.qualifications.splice(indexOf, 1);\r\n    this.employeeInfoFormGroup.controls.qualifications.setValue(this.qualifications);\r\n  }\r\n\r\n  addSkill(element: any, index: number) {\r\n    var indexOf = this.skills.indexOf(element.value);\r\n    element.checked ? this.skills.push(element.value) : this.skills.splice(indexOf, 1);\r\n    this.employeeInfoFormGroup.controls.skills.setValue(this.skills);\r\n  }\r\n\r\n}\r\n",
      "html": "<div>\r\n    <form [formGroup]=\"employeeInfoFormGroup\">\r\n      <div class=\"form-group\">\r\n        <label>Department</label>\r\n        <input type=\"text\" formControlName=\"department\" class=\"form-control\" placeholder=\"Enter any department\" />\r\n      </div>\r\n      <div class=\"form-group\">\r\n        <label>Qualifications</label>\r\n        <div class=\"form-check\" *ngFor=\"let tag of qualificationsArray; let i = index;\">\r\n          <h4>\r\n            <input (click)=\"addQualification($event.target,i)\"  type=\"checkbox\" value=\"{{tag}}\" /> {{tag}}\r\n          </h4>\r\n        </div>\r\n        <br>\r\n        <small class=\"form-text text-danger\" *ngIf=\"employeeInfoFormGroup.controls.qualifications.errors\">{{employeeInfoFormGroup.controls.qualifications.errors.oneOf.message}}<br></small>\r\n        <small class=\"form-text text-muted\" >To apply the validation on 'Qualifications' field, enter 'DotNet' in 'Department' field</small><br>\r\n      </div>\r\n      <div class=\"form-group\">\r\n        <label>Skills</label><small>( With Conditional Expression )</small><br>\r\n        <div class=\"form-check\" *ngFor=\"let tag of skillsArray; let i = index;\">\r\n          <h4>\r\n            <input (click)=\"addSkill($event.target,i)\" type=\"checkbox\" value=\"{{tag}}\" /> {{tag}}\r\n          </h4>\r\n        </div>\r\n        <br>\r\n        <small class=\"form-text text-danger\" *ngIf=\"employeeInfoFormGroup.controls.skills.errors\">{{employeeInfoFormGroup.controls.skills.errors.oneOf.message}}<br></small>\r\n        <small class=\"form-text text-muted\" >To apply the validation on 'Skills' field, enter 'DotNet' in 'Department' field</small><br>\r\n      </div>\r\n      <button [disabled]=\"!employeeInfoFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n    </form>\r\n    </div>",
      "model": null,
      "modelName": null,
      "json": null
    },
    "conditionalExpressionExampleString": {
      "notes": null,
      "component": null,
      "html": null,
      "model": "RxwebValidators.oneOfAsync({matchValues: [\"MVC\", \"AngularJS\",\"Angular 5\",\"C#\",\"Web Api\",\"SQL Server\"], conditionalExpression: \"x => x.department =='DotNet'\"})",
      "modelName": null,
      "json": null
    },
    "dynamic": {
      "notes": [],
      "component": "import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup, FormBuilder } from \"@angular/forms\"\r\nimport { RxwebValidators } from '@rxweb/reactive-form-validators';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { FormBuilderConfiguration, RxFormBuilder } from '@rxweb/reactive-form-validators';\r\nimport { environment } from 'src/environments/environment';\r\n@Component({\r\n  selector: 'app-oneOfAsync-dynamic-validator',\r\n  templateUrl: './one-of-dynamic.component.html'\r\n})\r\nexport class oneOfAsyncDynamicValidatorComponent implements OnInit {\r\n\r\n  employeeInfoFormGroup: FormGroup\r\n  projectDomains: string[] = [];\r\n  hobbies: string[] = [];\r\n  skills: string[] = [];\r\n  languages: string[] = [];\r\n  constructor(\r\n    private formBuilder: RxFormBuilder, private http: HttpClient) { }\r\n\r\n  skillsArray: string[] = [\"MVC\", \"AngularJS\", \"Angular 5\", \"C#\", \"Web Api\", \"SQL Server\"];\r\n  hobbiesArray: string[] = [\"Drawing\", \"Singing\", \"Dancing\", \"Travelling\", \"Sports\"];\r\n  projectDomainsArray: string[] = [\"ECommerce\", \"Banking\", \"Educational\", \"Gaming\"];\r\n  languagesArray: string[] = [\"English\", \"Spanish\", \"French\", \"German\", \"Chinese\"];\r\n\r\n  ngOnInit() {\r\n    let formBuilderConfiguration = new FormBuilderConfiguration();\r\n    this.http.get('assets/examples/reactive-form-validators/validators/oneOfAsync/dynamic/dynamic.json?v=' + environment.appVersion).subscribe(dynamic => {\r\n      formBuilderConfiguration.dynamicValidation = JSON.parse(JSON.stringify(dynamic));\r\n      var employeeInfo = { department: '', projectDomains: '', skills: '', hobbies: '', languages: '' }\r\n      this.employeeInfoFormGroup = this.formBuilder.group(employeeInfo, formBuilderConfiguration);\r\n    })\r\n  }\r\n\r\n  addProjectDomain(element: any, index: number) {\r\n    var indexOf = this.projectDomains.indexOf(element.value);\r\n    element.checked ? this.projectDomains.push(element.value) : this.projectDomains.splice(indexOf, 1);\r\n    this.employeeInfoFormGroup.controls.projectDomains.setValue(this.projectDomains);\r\n  }\r\n\r\n  addSkill(element: any, index: number) {\r\n    var indexOf = this.skills.indexOf(element.value);\r\n    element.checked ? this.skills.push(element.value) : this.skills.splice(indexOf, 1);\r\n    this.employeeInfoFormGroup.controls.skills.setValue(this.skills);\r\n  }\r\n\r\n  addHobby(element: any, index: number) {\r\n    var indexOf = this.hobbies.indexOf(element.value);\r\n    element.checked ? this.hobbies.push(element.value) : this.hobbies.splice(indexOf, 1);\r\n    this.employeeInfoFormGroup.controls.hobbies.setValue(this.hobbies);\r\n  }\r\n\r\n  addLanguage(element: any, index: number) {\r\n    var indexOf = this.languages.indexOf(element.value);\r\n    element.checked ? this.languages.push(element.value) : this.languages.splice(indexOf, 1);\r\n    this.employeeInfoFormGroup.controls.languages.setValue(this.languages);\r\n  }\r\n}",
      "html": "<div>\r\n  <form *ngIf=\"employeeInfoFormGroup\" [formGroup]=\"employeeInfoFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label>Department</label>\r\n      <input type=\"text\" formControlName=\"department\" class=\"form-control\" placeholder=\"Enter any department\" />\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Project Domains</label>\r\n      <div class=\"form-check\" *ngFor=\"let tag of projectDomainsArray; let i = index;\">\r\n        <h4>\r\n          <input (click)=\"addProjectDomain($event.target,i)\" type=\"checkbox\" value=\"{{tag}}\" /> {{tag}}\r\n        </h4>\r\n      </div>\r\n      <br>\r\n      <small class=\"form-text text-danger\" *ngIf=\"employeeInfoFormGroup.controls.projectDomains.errors\">{{employeeInfoFormGroup.controls.projectDomains.errors.oneOf.message}}<br></small>\r\n      <small class=\"form-text text-muted\">You must select atleast 1 option.</small>\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Skills</label><small>( With Conditional Expression )</small><br>\r\n      <div class=\"form-check\" *ngFor=\"let tag of skillsArray; let i = index;\">\r\n        <h4>\r\n          <input (click)=\"addSkill($event.target,i)\" type=\"checkbox\" value=\"{{tag}}\" /> {{tag}}\r\n        </h4>\r\n      </div>\r\n      <br>\r\n      <small class=\"form-text text-danger\" *ngIf=\"employeeInfoFormGroup.controls.skills.errors\">{{employeeInfoFormGroup.controls.skills.errors.oneOf.message}}<br></small>\r\n      <small class=\"form-text text-muted\">To apply the validation on 'Skills' field, enter 'DotNet' in 'Department' field</small><br>\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Hobbies</label>\r\n      <div class=\"form-check\" *ngFor=\"let tag of hobbiesArray; let i = index;\">\r\n        <h4>\r\n          <input (click)=\"addHobby($event.target,i)\" type=\"checkbox\" value=\"{{tag}}\" /> {{tag}}\r\n        </h4>\r\n      </div>\r\n      <br>\r\n      <small class=\"form-text text-danger\" *ngIf=\"employeeInfoFormGroup.controls.hobbies.errors\">{{employeeInfoFormGroup.controls.hobbies.errors.oneOf.message}}<br></small>\r\n      <small class=\"form-text text-muted\">Shows custom message</small><br>\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Languages</label>\r\n      <div class=\"form-check\" *ngFor=\"let tag of languagesArray\">\r\n        <h4>\r\n          <input (click)=\"addLanguage($event.target)\" type=\"checkbox\" value=\"{{tag}}\" /> {{tag}}\r\n        </h4>\r\n      </div>\r\n      <br>\r\n      <small class=\"form-text text-muted\">oneOfAsync validation using messageKey.</small><br>\r\n      <small class=\"form-text text-danger\" *ngIf=\"employeeInfoFormGroup.controls.languages.errors\">{{employeeInfoFormGroup.controls.languages.errors.oneOf.message}}</small><br>\r\n    </div>\r\n    <button [disabled]=\"!employeeInfoFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>",
      "model": null,
      "modelName": null,
      "json": {
        "dynamic.json": "{\r\n  \"department\": {\r\n    \"oneOfAsync\": false\r\n  },\r\n  \"projectDomains\": {\r\n    \"oneOfAsync\": {\r\n      \"matchValues\": [ \"ECommerce\", \"Banking\", \"Educational\", \"Gaming\" ]\r\n    }\r\n  },\r\n  \"skills\": {\r\n    \"oneOfAsync\": {\r\n      \"matchValues\": [ \"MVC\", \"AngularJS\", \"Angular 5\", \"C#\", \"Web Api\", \"SQL Server\" ],\r\n      \"conditionalExpression\": \"x => x.department ==\\\"DotNet\\\"\"\r\n    }\r\n  },\r\n  \"hobbies\": {\r\n    \"oneOfAsync\": {\r\n      \"matchValues\": [ \"Drawing\", \"Singing\", \"Dancing\", \"Travelling\", \"Sports\" ],\r\n      \"message\": \"Please select atleast one hobby.\"\r\n    }\r\n  },\r\n  \"languages\": {\r\n    \"oneOfAsync\": {\r\n      \"matchValues\": [ \"English\", \"Spanish\", \"French\", \"German\", \"Chinese\" ],\r\n      \"messageKey\": \"oneOfAsyncMessageKey\"\r\n    }\r\n  }\r\n}"
      }
    },
    "add": {
      "notes": [],
      "component": "import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from \"@angular/forms\"\r\nimport { RxFormBuilder, RxwebValidators } from '@rxweb/reactive-form-validators';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { environment } from 'src/environments/environment';\r\n@Component({\r\n    selector: 'app-oneOfAsync-add-validator',\r\n    templateUrl: './one-of-add.component.html'\r\n})\r\nexport class oneOfAsyncAddValidatorComponent implements OnInit {\r\n    employeeInfoFormGroup: FormGroup\r\n\r\n    projectDomains:string[] = [];\r\n \r\n    constructor(\r\n        private formBuilder: RxFormBuilder ,private http: HttpClient) { }\r\n\r\n        projectDomainsArray: string[] = [\"ECommerce\", \"Banking\", \"Educational\", \"Gaming\"];\r\n      \r\n        ngOnInit() {\r\n            this.employeeInfoFormGroup = this.formBuilder.group({\r\n                department:[''],\r\n                projectDomains:['', RxwebValidators.oneOfAsync({matchValues:[\"ECommerce\", \"Banking\",\"Educational\",\"Gaming\"]})})], \r\n            });\r\n        }\r\n\r\n        addProjectDomain(element: any, index: number) {\r\n          var indexOf = this.projectDomains.indexOf(element.value);\r\n          element.checked ? this.projectDomains.push(element.value) : this.projectDomains.splice(indexOf, 1);\r\n          this.employeeInfoFormGroup.controls.projectDomains.setValue(this.projectDomains);\r\n        }\r\n}\r\n",
      "html": "<div>\r\n    <form [formGroup]=\"employeeInfoFormGroup\">\r\n      <div class=\"form-group\">\r\n        <label>Project Domains</label>\r\n        <div class=\"form-check\" *ngFor=\"let tag of projectDomainsArray; let i = index;\">\r\n          <h4>\r\n            <input (click)=\"addProjectDomain($event.target,i)\"  type=\"checkbox\" value=\"{{tag}}\" /> {{tag}}\r\n          </h4>\r\n        </div>\r\n        <br>\r\n        <small class=\"form-text text-danger\" *ngIf=\"employeeInfoFormGroup.controls.projectDomains.errors\">{{employeeInfoFormGroup.controls.projectDomains.errors.oneOf.message}}<br></small>\r\n        <small class=\"form-text text-muted\">You must select atleast 1 option.</small>\r\n      </div>\r\n      <button [disabled]=\"!employeeInfoFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n    </form>\r\n  </div>\r\n",
      "model": null,
      "modelName": null,
      "json": null
    }
  }
  