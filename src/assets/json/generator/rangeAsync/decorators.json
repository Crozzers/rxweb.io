{"rightSidebarLinks":[{"id":"rangeasync","title":"rangeAsync","subLink":null},{"id":"whentouse","title":"When to use","subLink":[]},{"id":"basicrangeasyncvalidation","title":"Basic rangeAsync Validation","subLink":[]},{"id":"validatorconfig","title":"ValidatorConfig","subLink":[]},{"id":"allowdecimalvalues","title":"Allow Decimal Values","subLink":[{"title":"maximumNumber","id":"maximumnumber","thirdLevelLink":[]},{"title":"message","id":"message","thirdLevelLink":[]},{"title":"messageKey","id":"messagekey","thirdLevelLink":[]},{"title":"minimumNumber","id":"minimumnumber","thirdLevelLink":[]}]},{"id":"completerangeasyncexample","title":"Complete rangeAsync Example","subLink":[]}],"title":"rangeAsync","description":"rangeAsync validation  decorators  will check that the entered value is in the specified rangeAsync.","validatorType":"decorators","validationTypeTitle":"Decorators","type":"tabs","gitDocPath":"https://github.com/rxweb/rxweb.io/edit/master/docs/angular/reactive-forms/reactive-form-validators/async-validators/rangeAsync.md","category":"async-validators","subCategory":"Numeric","linkTitle":"rangeAsync","tabArray":{"basic-operations":[{"tabName":"Add","tabGroupContent":null,"content":"<div component=\"app-code\" key=\"rangeAsync-add-component\"></div> \r\n<p class='showHideElement' >Next, we need to write html code.</p>\r\n<div component=\"app-code\" key=\"rangeAsync-add-html\"></div> \r\n<div component=\"app-example-runner\" ref-component=\"app-rangeAsync-add\"></div>\r\n"},{"tabName":"Edit","tabGroupContent":null,"content":"<div component=\"app-code\" key=\"rangeAsync-edit-component\"></div>\r\n<p class='showHideElement' >The below code is `employee-info-data.json` for getting data from the server </p>\r\n<div component=\"app-code\" key=\"rangeAsync-edit-json\"></div> \r\n<p class='showHideElement' >Next, we need to write html code.</p>\r\n<div component=\"app-code\" key=\"rangeAsync-edit-html\"></div> \r\n<div component=\"app-example-runner\" ref-component=\"app-rangeAsync-edit\"></div>\r\n"}],"complete":[{"tabName":"Example","tabGroupContent":null,"content":"<div component=\"app-example-runner\" ref-component=\"app-rangeAsync-complete\"></div>\r\n"},{"tabName":"Model","tabGroupContent":null,"content":"<div component=\"app-code\" key=\"rangeAsync-complete-model\"></div> \r\n"},{"tabName":"Component","tabGroupContent":null,"content":"<div component=\"app-code\" key=\"rangeAsync-complete-component\"></div> \r\n"},{"tabName":"Html","tabGroupContent":null,"content":"<div component=\"app-code\" key=\"rangeAsync-complete-html\"></div> \r\n"}]},"innerHtml":null,"htmlContent":"<div class=\"title-bar top_title\"><p>rangeAsync</p></div> <div class=\"title-bar\"><p>rangeAsync validation  decorator  will check that the entered value is in the specified range asynchronously.</p></div>\r\n<div class='row page-section' id= 'whentouse'>\r\n<div class='col-lg-12'>\r\n<h2 class='showHideElement' >When to use<a title='Link to this heading' class='link-header'  href='/async-validators/rangeAsync/decorators#whentouse'><i class='fa fa-link'></i></a></h2>\r\n\r\n<p class='showHideElement' >Suppose you want to create a employeeInfo form, which contains field of employeeAge, employeeExperience, salary and you want the user to enter value in a specified range asynchronously. Here depending upon the requirement these scenarios may arise.</p>\r\n<ol class='showHideElement'>\r\n <li>Adding value which you want to restrict number in the property. The minimum number is 18 and maximum number is 60.</li> \r\n <li>Apply rangeAsync validation based on matched condition in the form, like if the age is greater than ‘25’ then the employeeExperience value should be between 2 to 20.</li>\r\n <li>Adding Custom Message on Salary Field.</li>\r\n <li>Shows the custom message on <span class='highlighted'>Number of Projects</span> field by using <span class='highlighted'>messageKey</span> property.</li>\r\n <data-scope scope=\"['decorator','validator']\">\r\n <li>Apply rangeAsync validation dynamically based on server rules.</li>\r\n </data-scope>\r\n</ol>\r\n<p class='showHideElement' >Let’s see how rangeAsync decorator fulfil the need.</p>\r\n</div></div>\r\n<div class='row page-section' id= 'basicrangeasyncvalidation'>\r\n<div class='col-lg-12'>\r\n<h2>Basic rangeAsync Validation<a title='Link to this heading' class='link-header'  href='/async-validators/rangeAsync/decorators#basicrangeasyncvalidation'><i class='fa fa-link'></i></a></h2>\r\n\r\n<p class='showHideElement' >First we need to create employeeInfo model class define a property of employeeAge in the model to achieve the functional need of point 1.</p>\r\n<div component=\"app-code\" key=\"rangeAsync-add-model\"></div> \r\n<p class='showHideElement' >Through Angular FormBuilder service we create FormGroup in the component.</p>\r\n<p class='showHideElement' >Here we have covered Add and Edit form operations. </p>\r\n<div component=\"app-tabs\" key=\"basic-operations\"></div>\r\n</div></div>\r\n<div class='row page-section' id= 'validatorconfig'>\r\n<div class='col-lg-12'>\r\n<h2>ValidatorConfig<a title='Link to this heading' class='link-header'  href='/async-validators/rangeAsync/decorators#validatorconfig'><i class='fa fa-link'></i></a></h2>\r\n\r\n<p class='showHideElement' >Type : <span class='highlighted'>Observable</span></p>\r\n<p class='showHideElement' >validator config is used to dynamically resolve the value of the property according to the server rules by using the keyword <span class='highlighted'>of</span> as below </p>\r\n<p class='showHideElement' >Below options are not mandatory to use in the <span class='highlighted'>@rangeAsync({validatorConfig:of({&ltproperty_name&gt:&ltvalue&gt})})</span> decorator. If needed then use the below options.</p>\r\n<table class=\"table table-bordered table-striped showHideElement\">\r\n<tr><th>Option</th><th>Description</th></tr>\r\n<tr><td><a (click)='scrollTo(\"#maximumNumber\")' title=\"maximumNumber\">maximumNumber</a></td><td> Maximum number is for define a maximum number of rangeAsync.</td></tr>\r\n<tr><td><a (click)='scrollTo(\"#message\")' title=\"message\">message</a></td><td>To override the global configuration message and set the custom error message on respective FormControl</td></tr>\r\n<tr><td><a (click)='scrollTo(\"#messageKey\")' title=\"messageKey\">messageKey</a></td><td>messageKey property of BaseConfig can be used when the user wants to show a different custom validation message on some of their fields. User can define a custom messageKey globally by defining it in ReactiveFormConfig and set it in the message property of the validation.</td></tr>\r\n<tr><td><a (click)='scrollTo(\"#minimumNumber\")' title=\"minimumnumber\">minimumNumber</a></td><td> Minimum number is for define a minimum number of rangeAsync.</td></tr>\r\n</table>\r\n</div></div>\r\n<div class='row page-section' id= 'allowdecimalvalues'>\r\n<div class='col-lg-12'>\r\n<h2>Allow Decimal Values<a title='Link to this heading' class='link-header' href='/async-validators/rangeAsync#allowdecimalvalues'><i class='fa fa-link'></i></a></h2>\r\n\r\n<p class='showHideElement' >To allow decimal values in rangeAsync validation, you need to add <span class='highlighted'>@numeric</span> decorator on the field name along with setting rangeAsync decorator and set the <span class='highlighted'>allowDecimal</span> property of numeric decorator <span class='highlighted'>true</span>.</p>\r\n<div component=\"app-code\" key=\"rangeAsync-allowDecimalExample-model\"></div> \r\n<div component=\"app-example-runner\" ref-component=\"app-rangeAsync-allowDecimal\" title=\"rangeAsync decorator with allowDecimal\" key=\"allowDecimal\"></div>\r\n</div></div>\r\n<div class='row page-section' id= 'maximumnumber'>\r\n<div class='col-lg-12'>\r\n<h2>maximumNumber<a title='Link to this heading' class='link-header'  href='/async-validators/rangeAsync/decorators#maximumnumber'><i class='fa fa-link'></i></a></h2>\r\n\r\n<p class='showHideElement' >Type :  <span class='highlighted'>string</span> </p>\r\n<p class='showHideElement' >Maximum number is for define a maximum number of rangeAsync</p>\r\n<div component=\"app-code\" key=\"rangeAsync-maximumNumberExample-model\"></div> \r\n<div component=\"app-example-runner\" ref-component=\"app-rangeAsync-maximumNumber\" title=\"rangeAsync decorator with maximumNumber\" key=\"maximumNumber\"></div>\r\n</div></div>\r\n<div class='row page-section' id= 'message'>\r\n<div class='col-lg-12'>\r\n<h2>message<a title='Link to this heading' class='link-header'  href='/async-validators/rangeAsync/decorators#message'><i class='fa fa-link'></i></a></h2>\r\n\r\n<p class='showHideElement' >Type :  <span class='highlighted'>string</span> </p>\r\n<p class='showHideElement' >To override the global configuration message and set the custom message on respective FormControl.</p>\r\n<div component=\"app-code\" key=\"rangeAsync-messageExample-model\"></div> \r\n<div component=\"app-example-runner\" ref-component=\"app-rangeAsync-message\" title=\"rangeAsync decorator with message\" key=\"message\"></div>\r\n</div></div>\r\n<div class='row page-section' id= 'messagekey'>\r\n<div class='col-lg-12'>\r\n<h2>messageKey<a title='Link to this heading' class='link-header'  href='/async-validators/rangeAsync/decorators#messagekey'><i class='fa fa-link'></i></a></h2>\r\n\r\n<p class='showHideElement' >Type : <span class='highlighted'>string</span></p>\r\n<p class='showHideElement' >messageKey property of BaseConfig can be used when the user wants to show a different custom validation message on some of their fields. User can define a custom messageKey globally by defining it in ReactiveFormConfig and set it in the message property of the validation.</p>\r\n<div component=\"app-code\" key=\"rangeAsync-messageKeyExample-model\"></div> \r\n<div component=\"app-example-runner\" ref-component=\"app-rangeAsync-messageKey\" title=\"rangeAsync decorator with messageKey\" key=\"messageKey\"></div>\r\n</div></div>\r\n<div class='row page-section' id= 'minimumnumber'>\r\n<div class='col-lg-12'>\r\n<h2>minimumNumber<a title='Link to this heading' class='link-header'  href='/async-validators/rangeAsync/decorators#minimumnumber'><i class='fa fa-link'></i></a></h2>\r\n\r\n<p class='showHideElement' >Type :  <span class='highlighted'>string</span> </p>\r\n<p class='showHideElement' >Minimum number is for define a minimum number of rangeAsync</p>\r\n<div component=\"app-code\" key=\"rangeAsync-minimumNumberExample-model\"></div> \r\n<div component=\"app-example-runner\" ref-component=\"app-rangeAsync-minimumNumber\" title=\"rangeAsync decorator with minimumNumber\" key=\"minimumNumber\"></div>\r\n</div></div>\r\n<div class='row page-section' id= 'completerangeasyncexample'>\r\n<div class='col-lg-12'>\r\n<h2>Complete rangeAsync Example<a title='Link to this heading' class='link-header'  href='/async-validators/rangeAsync/decorators#completerangeasyncexample'><i class='fa fa-link'></i></a></h2>\r\n\r\n<p class='showHideElement' >This Complete rangeAsync example which includes all the rangeAsyncConfig properties will fulfil the requirement of scenarios 1, 2 and 3.</p>\r\n<div component=\"app-tabs\" key=\"complete\"></div>\r\n</div></div>\r\n"}