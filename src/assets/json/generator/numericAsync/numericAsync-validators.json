{"complete":{"notes":[],"component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup, FormBuilder } from \"@angular/forms\"\r\nimport { RxwebValidators ,NumericValueType} from '@rxweb/reactive-form-validators';\r\n\r\n@Component({\r\n    selector: 'app-numericAsync-complete-validator',\r\n    templateUrl: './numeric-async-complete.component.html'\r\n})\r\nexport class NumericAsyncCompleteValidatorComponent implements OnInit {\r\n    userInfoFormGroup: FormGroup\r\n\r\n\t\t\t\tdataTypes = [ \"Real\", \"Integer\",];\r\n\t\r\n\t\r\n\t\r\n\t\r\n\t\r\n\t\r\n\tconstructor(\r\n        private formBuilder: FormBuilder )\r\n\t{ }\r\n\r\n    ngOnInit() {\r\n        this.userInfoFormGroup = this.formBuilder.group({\r\n            dataType:['',], \r\n            negativeNumber:['', RxwebValidators.numericAsync({acceptValue:NumericValueType.NegativeNumber })], \r\n            totalAmount:['', RxwebValidators.numericAsync({isFormat:true })], \r\n            decimalNumber:['', RxwebValidators.numericAsync({allowDecimal:true })], \r\n            positiveNumber:['', RxwebValidators.numericAsync({message:'{{0}} is not a positive number' })], \r\n            positiveNonDecimalNumber:['', RxwebValidators.numericAsync({messageKey:'numericMessageKey' })], \r\n        });\r\n    }\r\n}\r\n","html":"<div>\r\n  <form  [formGroup]=\"userInfoFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label>Data Type</label>\r\n      <select formControlName=\"dataType\" class=\"form-control\">\r\n\t\t<option [value]=\"item\" *ngFor=\"let item of dataTypes\">{{item}}</option>\r\n      </select>\r\n     <small class=\"form-text text-danger\" *ngIf=\"userInfoFormGroup.controls.dataType.errors\">{{userInfoFormGroup.controls.dataType.errors.numericAsync.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Negative Number</label>\r\n      <input type=\"text\" formControlName=\"negativeNumber\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">you can enter only a negative number<br/></small>\r\n     <small class=\"form-text text-danger\" *ngIf=\"userInfoFormGroup.controls.negativeNumber.errors\">{{userInfoFormGroup.controls.negativeNumber.errors.numericAsync.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Total Amount</label>\r\n      <input type=\"text\" formControlName=\"totalAmount\" class=\"form-control\"  />\r\n     <small class=\"form-text text-danger\" *ngIf=\"userInfoFormGroup.controls.totalAmount.errors\">{{userInfoFormGroup.controls.totalAmount.errors.numericAsync.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Decimal Number</label>\r\n      <input type=\"text\" formControlName=\"decimalNumber\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">you can enter only a positive decimal number<br/></small>\r\n     <small class=\"form-text text-danger\" *ngIf=\"userInfoFormGroup.controls.decimalNumber.errors\">{{userInfoFormGroup.controls.decimalNumber.errors.numericAsync.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Positive Number</label>\r\n      <input type=\"text\" formControlName=\"positiveNumber\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">you can enter only a positive number<br/></small>\r\n      <small class=\"form-text text-muted\">Shows custom message.<br/></small>\r\n     <small class=\"form-text text-danger\" *ngIf=\"userInfoFormGroup.controls.positiveNumber.errors\">{{userInfoFormGroup.controls.positiveNumber.errors.numericAsync.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Positive Non Decimal Number</label>\r\n      <input type=\"text\" formControlName=\"positiveNonDecimalNumber\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">Shows custom message based on message key<br/></small>\r\n     <small class=\"form-text text-danger\" *ngIf=\"userInfoFormGroup.controls.positiveNonDecimalNumber.errors\">{{userInfoFormGroup.controls.positiveNonDecimalNumber.errors.numericMessageKey.message}}<br/></small>\t\t\r\n    </div>\r\n    <button [disabled]=\"!userInfoFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","model":null,"modelName":null,"json":{}},"acceptValueExample":{"notes":null,"component":null,"html":null,"model":"RxwebValidators.numericAsync({acceptValue:NumericValueType.NegativeNumber });\r\n","modelName":null,"json":{}},"acceptValue":{"notes":[],"component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup, FormBuilder } from \"@angular/forms\"\r\nimport { RxwebValidators ,NumericValueType} from '@rxweb/reactive-form-validators';\r\n\r\n@Component({\r\n    selector: 'app-numericAsync-acceptValue-validator',\r\n    templateUrl: './numeric-async-accept-value.component.html'\r\n})\r\nexport class NumericAsyncAcceptValueValidatorComponent implements OnInit {\r\n    userInfoFormGroup: FormGroup\r\n\r\n\tconstructor(\r\n        private formBuilder: FormBuilder )\r\n\t{ }\r\n\r\n    ngOnInit() {\r\n        this.userInfoFormGroup = this.formBuilder.group({\r\n            negativeNumber:['', RxwebValidators.numericAsync({acceptValue:NumericValueType.NegativeNumber })], \r\n        });\r\n    }\r\n}\r\n","html":"<div>\r\n  <form  [formGroup]=\"userInfoFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label>Negative Number</label>\r\n      <input type=\"text\" formControlName=\"negativeNumber\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">you can enter only a negative number<br/></small>\r\n     <small class=\"form-text text-danger\" *ngIf=\"userInfoFormGroup.controls.negativeNumber.errors\">{{userInfoFormGroup.controls.negativeNumber.errors.numericAsync.message}}<br/></small>\t\r\n    </div>\r\n    <button [disabled]=\"!userInfoFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","model":null,"modelName":null,"json":{}},"isFormatExample":{"notes":null,"component":null,"html":null,"model":"RxwebValidators.numericAsync({isFormat:true });\r\n","modelName":null,"json":{}},"isFormat":{"notes":[],"component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup, FormBuilder } from \"@angular/forms\"\r\nimport { RxwebValidators ,NumericValueType} from '@rxweb/reactive-form-validators';\r\n\r\n@Component({\r\n    selector: 'app-numericAsync-isFormat-validator',\r\n    templateUrl: './numeric-async-is-format.component.html'\r\n})\r\nexport class NumericAsyncIsFormatValidatorComponent implements OnInit {\r\n    userInfoFormGroup: FormGroup\r\n\r\n\tconstructor(\r\n        private formBuilder: FormBuilder )\r\n\t{ }\r\n\r\n    ngOnInit() {\r\n        this.userInfoFormGroup = this.formBuilder.group({\r\n            totalAmount:['', RxwebValidators.numericAsync({isFormat:true })], \r\n        });\r\n    }\r\n}\r\n","html":"<div>\r\n  <form  [formGroup]=\"userInfoFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label>Total Amount</label>\r\n      <input type=\"text\" formControlName=\"totalAmount\" class=\"form-control\"  />\r\n     <small class=\"form-text text-danger\" *ngIf=\"userInfoFormGroup.controls.totalAmount.errors\">{{userInfoFormGroup.controls.totalAmount.errors.numericAsync.message}}<br/></small>\t\r\n    </div>\r\n    <button [disabled]=\"!userInfoFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","model":null,"modelName":null,"json":{}},"allowDecimalExample":{"notes":null,"component":null,"html":null,"model":"RxwebValidators.numericAsync({allowDecimal:true });\r\n","modelName":null,"json":{}},"allowDecimal":{"notes":[],"component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup, FormBuilder } from \"@angular/forms\"\r\nimport { RxwebValidators ,NumericValueType} from '@rxweb/reactive-form-validators';\r\n\r\n@Component({\r\n    selector: 'app-numericAsync-allowDecimal-validator',\r\n    templateUrl: './numeric-async-allow-decimal.component.html'\r\n})\r\nexport class NumericAsyncAllowDecimalValidatorComponent implements OnInit {\r\n    userInfoFormGroup: FormGroup\r\n\r\n\tconstructor(\r\n        private formBuilder: FormBuilder )\r\n\t{ }\r\n\r\n    ngOnInit() {\r\n        this.userInfoFormGroup = this.formBuilder.group({\r\n            decimalNumber:['', RxwebValidators.numericAsync({allowDecimal:true })], \r\n        });\r\n    }\r\n}\r\n","html":"<div>\r\n  <form  [formGroup]=\"userInfoFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label>Decimal Number</label>\r\n      <input type=\"text\" formControlName=\"decimalNumber\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">you can enter only a positive decimal number<br/></small>\r\n     <small class=\"form-text text-danger\" *ngIf=\"userInfoFormGroup.controls.decimalNumber.errors\">{{userInfoFormGroup.controls.decimalNumber.errors.numericAsync.message}}<br/></small>\t\r\n    </div>\r\n    <button [disabled]=\"!userInfoFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","model":null,"modelName":null,"json":{}},"messageExample":{"notes":null,"component":null,"html":null,"model":"RxwebValidators.numericAsync({message:'{{0}} is not a positive number' });\r\n","modelName":null,"json":{}},"message":{"notes":[],"component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup, FormBuilder } from \"@angular/forms\"\r\nimport { RxwebValidators ,NumericValueType} from '@rxweb/reactive-form-validators';\r\n\r\n@Component({\r\n    selector: 'app-numericAsync-message-validator',\r\n    templateUrl: './numeric-async-message.component.html'\r\n})\r\nexport class NumericAsyncMessageValidatorComponent implements OnInit {\r\n    userInfoFormGroup: FormGroup\r\n\r\n\tconstructor(\r\n        private formBuilder: FormBuilder )\r\n\t{ }\r\n\r\n    ngOnInit() {\r\n        this.userInfoFormGroup = this.formBuilder.group({\r\n            positiveNumber:['', RxwebValidators.numericAsync({message:'{{0}} is not a positive number' })], \r\n        });\r\n    }\r\n}\r\n","html":"<div>\r\n  <form  [formGroup]=\"userInfoFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label>Positive Number</label>\r\n      <input type=\"text\" formControlName=\"positiveNumber\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">you can enter only a positive number<br/></small>\r\n      <small class=\"form-text text-muted\">Shows custom message.<br/></small>\r\n     <small class=\"form-text text-danger\" *ngIf=\"userInfoFormGroup.controls.positiveNumber.errors\">{{userInfoFormGroup.controls.positiveNumber.errors.numericAsync.message}}<br/></small>\t\r\n    </div>\r\n    <button [disabled]=\"!userInfoFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","model":null,"modelName":null,"json":{}},"messageKeyExample":{"notes":null,"component":null,"html":null,"model":"RxwebValidators.numericAsync({messageKey:'numericMessageKey' });\r\n","modelName":null,"json":{}},"messageKey":{"notes":[],"component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup, FormBuilder } from \"@angular/forms\"\r\nimport { RxwebValidators ,NumericValueType} from '@rxweb/reactive-form-validators';\r\n\r\n@Component({\r\n    selector: 'app-numericAsync-messageKey-validator',\r\n    templateUrl: './numeric-async-message-key.component.html'\r\n})\r\nexport class NumericAsyncMessageKeyValidatorComponent implements OnInit {\r\n    userInfoFormGroup: FormGroup\r\n\r\n\tconstructor(\r\n        private formBuilder: FormBuilder )\r\n\t{ }\r\n\r\n    ngOnInit() {\r\n        this.userInfoFormGroup = this.formBuilder.group({\r\n            positiveNonDecimalNumber:['', RxwebValidators.numericAsync({messageKey:'numericMessageKey' })], \r\n        });\r\n    }\r\n}\r\n","html":"<div>\r\n  <form  [formGroup]=\"userInfoFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label>Positive Non Decimal Number</label>\r\n      <input type=\"text\" formControlName=\"positiveNonDecimalNumber\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">Shows custom message based on message key<br/></small>\r\n     <small class=\"form-text text-danger\" *ngIf=\"userInfoFormGroup.controls.positiveNonDecimalNumber.errors\">{{userInfoFormGroup.controls.positiveNonDecimalNumber.errors.numericMessageKey.message}}<br/></small>\t\t\r\n    </div>\r\n    <button [disabled]=\"!userInfoFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","model":null,"modelName":null,"json":{}},"dynamic":{"notes":[],"component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup, FormBuilder } from \"@angular/forms\"\r\nimport { RxwebValidators ,NumericValueType} from '@rxweb/reactive-form-validators';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { FormBuilderConfiguration,RxFormBuilder} from '@rxweb/reactive-form-validators';\r\nimport { environment } from 'src/environments/environment';\r\n\r\n@Component({\r\n    selector: 'app-numericAsync-dynamic-validator',\r\n    templateUrl: './numeric-async-dynamic.component.html'\r\n})\r\nexport class NumericAsyncDynamicValidatorComponent implements OnInit {\r\n    userInfoFormGroup: FormGroup\r\n\r\n\t\t\t\tdataTypes = [ \"Real\", \"Integer\",];\r\n\t\r\n\t\r\n\t\r\n\t\r\n\t\r\n\t\r\n\tconstructor(\r\n        private formBuilder: RxFormBuilder , private http: HttpClient )\r\n\t{ }\r\n\r\n    ngOnInit() {\r\n\t\tlet formBuilderConfiguration = new FormBuilderConfiguration();\r\n\t\tthis.http.get('assets/examples/reactive-form-validators/validators/numericAsync/dynamic/dynamic.json?v='+environment.appVersion).subscribe(dynamic => {\r\n\t\t\tformBuilderConfiguration.dynamicValidation = JSON.parse(JSON.stringify(dynamic));\r\n\t\t\tvar userInfo = { dataType:'', negativeNumber:'', totalAmount:'', decimalNumber:'', positiveNumber:'', positiveNonDecimalNumber:'',  }\r\n\t\t\tthis.userInfoFormGroup = this.formBuilder.group(userInfo,formBuilderConfiguration);\r\n\t\t})\r\n    }\r\n}\r\n","html":"<div>\r\n  <form  *ngIf=\"userInfoFormGroup\"  [formGroup]=\"userInfoFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label>Data Type</label>\r\n      <select formControlName=\"dataType\" class=\"form-control\">\r\n\t\t<option [value]=\"item\" *ngFor=\"let item of dataTypes\">{{item}}</option>\r\n      </select>\r\n      <small class=\"form-text text-danger\" *ngIf=\"userInfoFormGroup.controls.dataType.errors\">{{userInfoFormGroup.controls.dataType.errors.numericAsync.message}}<br/></small>\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Negative Number</label>\r\n      <input type=\"text\" formControlName=\"negativeNumber\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">you can enter only a negative number<br/></small>\r\n     <small class=\"form-text text-danger\" *ngIf=\"userInfoFormGroup.controls.negativeNumber.errors\">{{userInfoFormGroup.controls.negativeNumber.errors.numericAsync.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Total Amount</label>\r\n      <input type=\"text\" formControlName=\"totalAmount\" class=\"form-control\"  />\r\n     <small class=\"form-text text-danger\" *ngIf=\"userInfoFormGroup.controls.totalAmount.errors\">{{userInfoFormGroup.controls.totalAmount.errors.numericAsync.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Decimal Number</label>\r\n      <input type=\"text\" formControlName=\"decimalNumber\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">you can enter only a positive decimal number<br/></small>\r\n     <small class=\"form-text text-danger\" *ngIf=\"userInfoFormGroup.controls.decimalNumber.errors\">{{userInfoFormGroup.controls.decimalNumber.errors.numericAsync.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Positive Number</label>\r\n      <input type=\"text\" formControlName=\"positiveNumber\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">you can enter only a positive number<br/></small>\r\n      <small class=\"form-text text-muted\">Shows custom message.<br/></small>\r\n     <small class=\"form-text text-danger\" *ngIf=\"userInfoFormGroup.controls.positiveNumber.errors\">{{userInfoFormGroup.controls.positiveNumber.errors.numericAsync.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Positive Non Decimal Number</label>\r\n      <input type=\"text\" formControlName=\"positiveNonDecimalNumber\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">Shows custom message based on message key<br/></small>\r\n     <small class=\"form-text text-danger\" *ngIf=\"userInfoFormGroup.controls.positiveNonDecimalNumber.errors\">{{userInfoFormGroup.controls.positiveNonDecimalNumber.errors.numericMessageKey.message}}<br/></small>\t\t\r\n    </div>\r\n    <button [disabled]=\"!userInfoFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","model":null,"modelName":null,"json":{"dynamic.json":"{\"dataType\":{},\"negativeNumber\":{\"numericAsync\":{\"acceptValue\":\"NumericValueType.NegativeNumber\"}},\"totalAmount\":{\"numericAsync\":{\"isFormat\":\"true\"}},\"decimalNumber\":{\"numericAsync\":{\"allowDecimal\":\"true\"}},\"positiveNumber\":{\"numericAsync\":{\"message\":\"{{0}} is not a positive number\"}},\"positiveNonDecimalNumber\":{\"numericAsync\":{\"messageKey\":\"numericMessageKey\"}}}"}},"add":{"notes":[],"component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup, FormBuilder } from \"@angular/forms\"\r\nimport { RxwebValidators ,NumericValueType} from '@rxweb/reactive-form-validators';\r\n\r\n@Component({\r\n    selector: 'app-numericAsync-add-validator',\r\n    templateUrl: './numeric-async-add.component.html'\r\n})\r\nexport class NumericAsyncAddValidatorComponent implements OnInit {\r\n    userInfoFormGroup: FormGroup\r\n\r\n\tconstructor(\r\n        private formBuilder: FormBuilder )\r\n\t{ }\r\n\r\n    ngOnInit() {\r\n        this.userInfoFormGroup = this.formBuilder.group({\r\n            integerNumber:['', RxwebValidators.numericAsync({acceptValue:NumericValueType.PositiveNumber  ,allowDecimal:false })], \r\n        });\r\n    }\r\n}\r\n","html":"<div>\r\n  <form  [formGroup]=\"userInfoFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label>Integer Number</label>\r\n      <input type=\"text\" formControlName=\"integerNumber\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">you can enter only a non decimal positive number<br/></small>\r\n     <small class=\"form-text text-danger\" *ngIf=\"userInfoFormGroup.controls.integerNumber.errors\">{{userInfoFormGroup.controls.integerNumber.errors.numericAsync.message}}<br/></small>\t\r\n    </div>\r\n    <button [disabled]=\"!userInfoFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","model":null,"modelName":null,"json":{}}}