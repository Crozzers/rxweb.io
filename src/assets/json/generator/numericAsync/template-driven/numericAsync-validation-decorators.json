{"complete":{"notes":[],"component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup,Validators } from \"@angular/forms\"\r\nimport { UserInfo } from './user-info.model';\r\n\r\n@Component({\r\n    selector: 'app-numericAsync-complete-template-driven-validation-decorators',\r\n    templateUrl: './numeric-async-complete.component.html'\r\n})\r\nexport class NumericAsyncCompleteTemplateDrivenValidationDecoratorsComponent implements OnInit {\r\n    userinfo: UserInfo\r\n\t\t\t\t\tdataTypes = [ \"Real\", \"Integer\",];\r\n\r\n    constructor(\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n       this.userinfo= new UserInfo()\r\n    }\r\n}\r\n","html":"<div>\r\n  <form #userinfoForm = \"ngForm\" [rxwebForm]=\"userinfoForm\" [model]=\"userinfo\">\r\n    <div class=\"form-group\">\r\n      <label>Data Type</label>\r\n      <select name=\"dataType\" [(ngModel)]=\"userinfo.dataType\"  class=\"form-control\" >\r\n\t\t<option [value]=\"item\" *ngFor=\"let item of dataTypes\">{{item}}</option>\r\n      </select>\r\n\r\n\t   <small class=\"form-text text-danger\" *ngIf=\"userinfoForm.controls?.dataType?.errors\">{{userinfoForm.controls?.dataType?.errors?.numericAsync.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Negative Number</label>\r\n\t    <input type=\"text\" name=\"negativeNumber\" [(ngModel)]=\"userinfo.negativeNumber\"  class=\"form-control\" />\r\n\r\n      <small class=\"form-text text-muted\">you can enter only a negative number<br/></small>\r\n\t   <small class=\"form-text text-danger\" *ngIf=\"userinfoForm.controls?.negativeNumber?.errors\">{{userinfoForm.controls?.negativeNumber?.errors?.numericAsync.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Total Amount</label>\r\n\t    <input type=\"text\" name=\"totalAmount\" [(ngModel)]=\"userinfo.totalAmount\"  class=\"form-control\" />\r\n\r\n\t   <small class=\"form-text text-danger\" *ngIf=\"userinfoForm.controls?.totalAmount?.errors\">{{userinfoForm.controls?.totalAmount?.errors?.numericAsync.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Decimal Number</label>\r\n\t    <input type=\"text\" name=\"decimalNumber\" [(ngModel)]=\"userinfo.decimalNumber\"  class=\"form-control\" />\r\n\r\n      <small class=\"form-text text-muted\">you can enter only a positive decimal number<br/></small>\r\n\t   <small class=\"form-text text-danger\" *ngIf=\"userinfoForm.controls?.decimalNumber?.errors\">{{userinfoForm.controls?.decimalNumber?.errors?.numericAsync.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Positive Number</label>\r\n\t    <input type=\"text\" name=\"positiveNumber\" [(ngModel)]=\"userinfo.positiveNumber\"  class=\"form-control\" />\r\n\r\n      <small class=\"form-text text-muted\">you can enter only a positive number<br/></small>\r\n      <small class=\"form-text text-muted\">Shows custom message.<br/></small>\r\n\t   <small class=\"form-text text-danger\" *ngIf=\"userinfoForm.controls?.positiveNumber?.errors\">{{userinfoForm.controls?.positiveNumber?.errors?.numericAsync.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Positive Non Decimal Number</label>\r\n\t    <input type=\"text\" name=\"positiveNonDecimalNumber\" [(ngModel)]=\"userinfo.positiveNonDecimalNumber\"  class=\"form-control\" />\r\n\r\n      <small class=\"form-text text-muted\">Shows custom message based on message key<br/></small>\r\n\t   <small class=\"form-text text-danger\" *ngIf=\"userinfoForm.controls?.positiveNonDecimalNumber?.errors\">{{userinfoForm.controls?.positiveNonDecimalNumber?.errors?.numericAsync.message}}<br/></small>\t\r\n    </div>\r\n    <button [disabled]=\"!userinfoForm.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","model":"import {  numericAsync,prop, NumericValueType, } from   \"@rxweb/reactive-form-validators\"   \r\n\r\nexport class UserInfo {\r\n\r\n\t@prop()\r\n\tdataType: string;\r\n\r\n\t@numericAsync({acceptValue:NumericValueType.NegativeNumber }) \r\n\tnegativeNumber: number;\r\n\t\r\n\t\r\n\t@numericAsync({isFormat:true }) \r\n\ttotalAmount: number;\r\n\t\r\n\t\r\n\t@numericAsync({allowDecimal:true }) \r\n\tdecimalNumber: number;\r\n\t\r\n\t\r\n\t@numericAsync({message:'{{0}} is not a positive number' }) \r\n\tpositiveNumber: number;\r\n\t\r\n\t\r\n\t@numericAsync({messageKey:'numericMessageKey' }) \r\n\tpositiveNonDecimalNumber: number;\r\n\t\r\n\t\r\n}\r\n","modelName":"user-info.model.ts","json":{}},"acceptValueExample":{"notes":null,"component":null,"html":null,"model":"@numericAsync({acceptValue:NumericValueType.NegativeNumber }) \r\nnegativeNumber: number;\r\n","modelName":null,"json":{}},"acceptValue":{"notes":[],"component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup,Validators } from \"@angular/forms\"\r\nimport { UserInfo } from './user-info.model';\r\n\r\n@Component({\r\n    selector: 'app-numericAsync-acceptValue-template-driven-validation-decorators',\r\n    templateUrl: './numeric-async-accept-value.component.html'\r\n})\r\nexport class NumericAsyncAcceptValueTemplateDrivenValidationDecoratorsComponent implements OnInit {\r\n    userinfo: UserInfo\r\n\t\r\n    constructor(\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n       this.userinfo= new UserInfo()\r\n    }\r\n}\r\n","html":"<div>\r\n  <form #userinfoForm = \"ngForm\" [rxwebForm]=\"userinfoForm\" [model]=\"userinfo\">\r\n    <div class=\"form-group\">\r\n      <label>Negative Number</label>\r\n\t    <input type=\"text\" name=\"negativeNumber\" [(ngModel)]=\"userinfo.negativeNumber\"  class=\"form-control\" />\r\n\r\n      <small class=\"form-text text-muted\">you can enter only a negative number<br/></small>\r\n\t   <small class=\"form-text text-danger\" *ngIf=\"userinfoForm.controls?.negativeNumber?.errors\">{{userinfoForm.controls?.negativeNumber?.errors?.numericAsync.message}}<br/></small>\t\r\n    </div>\r\n    <button [disabled]=\"!userinfoForm.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","model":"import {  numericAsync, NumericValueType, } from   \"@rxweb/reactive-form-validators\"   \r\n\r\nexport class UserInfo {\r\n\r\n\t@numericAsync({acceptValue:NumericValueType.NegativeNumber }) \r\n\tnegativeNumber: number;\r\n\t\r\n\t\r\n}\r\n","modelName":"user-info.model.ts","json":{}},"isFormatExample":{"notes":null,"component":null,"html":null,"model":"@numericAsync({isFormat:true }) \r\ntotalAmount: number;\r\n","modelName":null,"json":{}},"isFormat":{"notes":[],"component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup,Validators } from \"@angular/forms\"\r\nimport { UserInfo } from './user-info.model';\r\n\r\n@Component({\r\n    selector: 'app-numericAsync-isFormat-template-driven-validation-decorators',\r\n    templateUrl: './numeric-async-is-format.component.html'\r\n})\r\nexport class NumericAsyncIsFormatTemplateDrivenValidationDecoratorsComponent implements OnInit {\r\n    userinfo: UserInfo\r\n\t\r\n    constructor(\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n       this.userinfo= new UserInfo()\r\n    }\r\n}\r\n","html":"<div>\r\n  <form #userinfoForm = \"ngForm\" [rxwebForm]=\"userinfoForm\" [model]=\"userinfo\">\r\n    <div class=\"form-group\">\r\n      <label>Total Amount</label>\r\n\t    <input type=\"text\" name=\"totalAmount\" [(ngModel)]=\"userinfo.totalAmount\"  class=\"form-control\" />\r\n\r\n\t   <small class=\"form-text text-danger\" *ngIf=\"userinfoForm.controls?.totalAmount?.errors\">{{userinfoForm.controls?.totalAmount?.errors?.numericAsync.message}}<br/></small>\t\r\n    </div>\r\n    <button [disabled]=\"!userinfoForm.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","model":"import {  numericAsync, NumericValueType, } from   \"@rxweb/reactive-form-validators\"   \r\n\r\nexport class UserInfo {\r\n\r\n\t@numericAsync({isFormat:true }) \r\n\ttotalAmount: number;\r\n\t\r\n\t\r\n}\r\n","modelName":"user-info.model.ts","json":{}},"allowDecimalExample":{"notes":null,"component":null,"html":null,"model":"@numericAsync({allowDecimal:true }) \r\ndecimalNumber: number;\r\n","modelName":null,"json":{}},"allowDecimal":{"notes":[],"component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup,Validators } from \"@angular/forms\"\r\nimport { UserInfo } from './user-info.model';\r\n\r\n@Component({\r\n    selector: 'app-numericAsync-allowDecimal-template-driven-validation-decorators',\r\n    templateUrl: './numeric-async-allow-decimal.component.html'\r\n})\r\nexport class NumericAsyncAllowDecimalTemplateDrivenValidationDecoratorsComponent implements OnInit {\r\n    userinfo: UserInfo\r\n\t\r\n    constructor(\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n       this.userinfo= new UserInfo()\r\n    }\r\n}\r\n","html":"<div>\r\n  <form #userinfoForm = \"ngForm\" [rxwebForm]=\"userinfoForm\" [model]=\"userinfo\">\r\n    <div class=\"form-group\">\r\n      <label>Decimal Number</label>\r\n\t    <input type=\"text\" name=\"decimalNumber\" [(ngModel)]=\"userinfo.decimalNumber\"  class=\"form-control\" />\r\n\r\n      <small class=\"form-text text-muted\">you can enter only a positive decimal number<br/></small>\r\n\t   <small class=\"form-text text-danger\" *ngIf=\"userinfoForm.controls?.decimalNumber?.errors\">{{userinfoForm.controls?.decimalNumber?.errors?.numericAsync.message}}<br/></small>\t\r\n    </div>\r\n    <button [disabled]=\"!userinfoForm.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","model":"import {  numericAsync, NumericValueType, } from   \"@rxweb/reactive-form-validators\"   \r\n\r\nexport class UserInfo {\r\n\r\n\t@numericAsync({allowDecimal:true }) \r\n\tdecimalNumber: number;\r\n\t\r\n\t\r\n}\r\n","modelName":"user-info.model.ts","json":{}},"messageExample":{"notes":null,"component":null,"html":null,"model":"@numericAsync({message:'{{0}} is not a positive number' }) \r\npositiveNumber: number;\r\n","modelName":null,"json":{}},"message":{"notes":[],"component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup,Validators } from \"@angular/forms\"\r\nimport { UserInfo } from './user-info.model';\r\n\r\n@Component({\r\n    selector: 'app-numericAsync-message-template-driven-validation-decorators',\r\n    templateUrl: './numeric-async-message.component.html'\r\n})\r\nexport class NumericAsyncMessageTemplateDrivenValidationDecoratorsComponent implements OnInit {\r\n    userinfo: UserInfo\r\n\t\r\n    constructor(\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n       this.userinfo= new UserInfo()\r\n    }\r\n}\r\n","html":"<div>\r\n  <form #userinfoForm = \"ngForm\" [rxwebForm]=\"userinfoForm\" [model]=\"userinfo\">\r\n    <div class=\"form-group\">\r\n      <label>Positive Number</label>\r\n\t    <input type=\"text\" name=\"positiveNumber\" [(ngModel)]=\"userinfo.positiveNumber\"  class=\"form-control\" />\r\n\r\n      <small class=\"form-text text-muted\">you can enter only a positive number<br/></small>\r\n      <small class=\"form-text text-muted\">Shows custom message.<br/></small>\r\n\t   <small class=\"form-text text-danger\" *ngIf=\"userinfoForm.controls?.positiveNumber?.errors\">{{userinfoForm.controls?.positiveNumber?.errors?.numericAsync.message}}<br/></small>\t\r\n    </div>\r\n    <button [disabled]=\"!userinfoForm.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","model":"import {  numericAsync, NumericValueType, } from   \"@rxweb/reactive-form-validators\"   \r\n\r\nexport class UserInfo {\r\n\r\n\t@numericAsync({message:'{{0}} is not a positive number' }) \r\n\tpositiveNumber: number;\r\n\t\r\n\t\r\n}\r\n","modelName":"user-info.model.ts","json":{}},"messageKeyExample":{"notes":null,"component":null,"html":null,"model":"@numericAsync({messageKey:'numericMessageKey' }) \r\npositiveNonDecimalNumber: number;\r\n","modelName":null,"json":{}},"messageKey":{"notes":[],"component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup,Validators } from \"@angular/forms\"\r\nimport { UserInfo } from './user-info.model';\r\n\r\n@Component({\r\n    selector: 'app-numericAsync-messageKey-template-driven-validation-decorators',\r\n    templateUrl: './numeric-async-message-key.component.html'\r\n})\r\nexport class NumericAsyncMessageKeyTemplateDrivenValidationDecoratorsComponent implements OnInit {\r\n    userinfo: UserInfo\r\n\t\r\n    constructor(\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n       this.userinfo= new UserInfo()\r\n    }\r\n}\r\n","html":"<div>\r\n  <form #userinfoForm = \"ngForm\" [rxwebForm]=\"userinfoForm\" [model]=\"userinfo\">\r\n    <div class=\"form-group\">\r\n      <label>Positive Non Decimal Number</label>\r\n\t    <input type=\"text\" name=\"positiveNonDecimalNumber\" [(ngModel)]=\"userinfo.positiveNonDecimalNumber\"  class=\"form-control\" />\r\n\r\n      <small class=\"form-text text-muted\">Shows custom message based on message key<br/></small>\r\n\t   <small class=\"form-text text-danger\" *ngIf=\"userinfoForm.controls?.positiveNonDecimalNumber?.errors\">{{userinfoForm.controls?.positiveNonDecimalNumber?.errors?.numericAsync.message}}<br/></small>\t\r\n    </div>\r\n    <button [disabled]=\"!userinfoForm.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","model":"import {  numericAsync, NumericValueType, } from   \"@rxweb/reactive-form-validators\"   \r\n\r\nexport class UserInfo {\r\n\r\n\t@numericAsync({messageKey:'numericMessageKey' }) \r\n\tpositiveNonDecimalNumber: number;\r\n\t\r\n\t\r\n}\r\n","modelName":"user-info.model.ts","json":{}},"add":{"notes":[],"component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup,Validators } from \"@angular/forms\"\r\nimport { UserInfo } from './user-info.model';\r\n\r\n@Component({\r\n    selector: 'app-numericAsync-add-template-driven-validation-decorators',\r\n    templateUrl: './numeric-async-add.component.html'\r\n})\r\nexport class NumericAsyncAddTemplateDrivenValidationDecoratorsComponent implements OnInit {\r\n    userinfo: UserInfo\r\n\t\r\n    constructor(\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n       this.userinfo= new UserInfo()\r\n    }\r\n}\r\n","html":"<div>\r\n  <form #userinfoForm = \"ngForm\" [rxwebForm]=\"userinfoForm\" [model]=\"userinfo\">\r\n    <div class=\"form-group\">\r\n      <label>Integer Number</label>\r\n\t    <input type=\"text\" name=\"integerNumber\" [(ngModel)]=\"userinfo.integerNumber\"  class=\"form-control\" />\r\n\r\n      <small class=\"form-text text-muted\">you can enter only a non decimal positive number<br/></small>\r\n\t   <small class=\"form-text text-danger\" *ngIf=\"userinfoForm.controls?.integerNumber?.errors\">{{userinfoForm.controls?.integerNumber?.errors?.numericAsync.message}}<br/></small>\t\r\n    </div>\r\n    <button [disabled]=\"!userinfoForm.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","model":"import {  numericAsync, NumericValueType, } from   \"@rxweb/reactive-form-validators\"   \r\n\r\nexport class UserInfo {\r\n\r\n\t@numericAsync({acceptValue:NumericValueType.PositiveNumber  ,allowDecimal:false }) \r\n\tintegerNumber: number;\r\n\t\r\n\t\r\n}\r\n","modelName":"user-info.model.ts","json":{}}}