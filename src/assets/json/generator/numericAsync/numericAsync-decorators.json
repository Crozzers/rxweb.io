{
    "complete": {
        "notes": null,
        "component": "import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from \"@angular/forms\"\r\nimport { RxFormBuilder } from '@rxweb/reactive-form-validators';\r\n\r\nimport { UserInfo } from './user-info.model';\r\n\r\n@Component({\r\n    selector: 'app-numericAsync-complete',\r\n    templateUrl: './numeric-async-complete.component.html'\r\n})\r\nexport class NumericAsyncCompleteComponent implements OnInit {\r\n    userInfoFormGroup: FormGroup\r\n\t\t\t\tdataTypes = [ \"Real\", \"Integer\",];\r\n\r\n    constructor(\r\n        private formBuilder: RxFormBuilder    ) { }\r\n\r\n    ngOnInit() {\r\n        let userInfo = new UserInfo();\r\n        this.userInfoFormGroup = this.formBuilder.formGroup(userInfo);\r\n    }\r\n}\r\n",
        "html": "<div>\r\n  <form  [formGroup]=\"userInfoFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label>Data Type</label>\r\n      <select formControlName=\"dataType\" class=\"form-control\">\r\n\t\t<option [value]=\"item\" *ngFor=\"let item of dataTypes\">{{item}}</option>\r\n      </select>\r\n     <small class=\"form-text text-danger\" *ngIf=\"userInfoFormGroup.controls.dataType.errors\">{{userInfoFormGroup.controls.dataType.errors.numeric.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Negative Number</label>\r\n      <input type=\"text\" formControlName=\"negativeNumber\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">you can enter only a negative number<br/></small>\r\n     <small class=\"form-text text-danger\" *ngIf=\"userInfoFormGroup.controls.negativeNumber.errors\">{{userInfoFormGroup.controls.negativeNumber.errors.numeric.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Total Amount</label>\r\n      <input type=\"text\" formControlName=\"totalAmount\" class=\"form-control\"  />\r\n     <small class=\"form-text text-danger\" *ngIf=\"userInfoFormGroup.controls.totalAmount.errors\">{{userInfoFormGroup.controls.totalAmount.errors.numeric.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Decimal Number</label>\r\n      <input type=\"text\" formControlName=\"decimalNumber\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">you can enter only a positive decimal number<br/></small>\r\n     <small class=\"form-text text-danger\" *ngIf=\"userInfoFormGroup.controls.decimalNumber.errors\">{{userInfoFormGroup.controls.decimalNumber.errors.numeric.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Positive Number</label>\r\n      <input type=\"text\" formControlName=\"positiveNumber\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">you can enter only a positive number<br/></small>\r\n      <small class=\"form-text text-muted\">Shows custom message.<br/></small>\r\n     <small class=\"form-text text-danger\" *ngIf=\"userInfoFormGroup.controls.positiveNumber.errors\">{{userInfoFormGroup.controls.positiveNumber.errors.numeric.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Positive Non Decimal Number</label>\r\n      <input type=\"text\" formControlName=\"positiveNonDecimalNumber\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">Shows custom message based on message key<br/></small>\r\n     <small class=\"form-text text-danger\" *ngIf=\"userInfoFormGroup.controls.positiveNonDecimalNumber.errors\">{{userInfoFormGroup.controls.positiveNonDecimalNumber.errors.numericMessageKey.message}}<br/></small>\t\t\r\n    </div>\r\n    <button [disabled]=\"!userInfoFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n",
        "model": "import {  numericAsync,prop, NumericValueType, } from   \"@rxweb/reactive-form-validators\" \r\n\rimport { of } from \"rxjs\" \r\n\r\n   \r\n\r\nexport class UserInfo {\r\n\r\n\t@prop()\r\n\tdataType: string;\r\n\r\n\t@numericAsync({acceptValue:NumericValueType.NegativeNumber }) \r\n\tnegativeNumber: number;\r\n\t\r\n\t\r\n\t@numericAsync({isFormat:true }) \r\n\ttotalAmount: number;\r\n\t\r\n\t\r\n\t@numericAsync({allowDecimal:true }) \r\n\tdecimalNumber: number;\r\n\t\r\n\t\r\n\t@numericAsync({message:'{{0}} is not a positive number' }) \r\n\tpositiveNumber: number;\r\n\t\r\n\t\r\n\t@numericAsync({messageKey:'numericMessageKey' }) \r\n\tpositiveNonDecimalNumber: number;\r\n\t\r\n\t\r\n}\r\n",
        "modelName": "user-info.model.ts",
        "json": {}
    },
    "acceptValueExample": {
        "notes": null,
        "component": null,
        "html": null,
        "model": "@numericAsync({acceptValue:NumericValueType.NegativeNumber }) \r\nnegativeNumber: number;\r\n",
        "modelName": null,
        "json": {}
    },
    "acceptValue": {
        "notes": null,
        "component": "import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from \"@angular/forms\"\r\nimport { RxFormBuilder } from '@rxweb/reactive-form-validators';\r\n\r\nimport { UserInfo } from './user-info.model';\r\n\r\n@Component({\r\n    selector: 'app-numericAsync-acceptValue',\r\n    templateUrl: './numeric-async-accept-value.component.html'\r\n})\r\nexport class NumericAsyncAcceptValueComponent implements OnInit {\r\n    userInfoFormGroup: FormGroup\r\n\r\n    constructor(\r\n        private formBuilder: RxFormBuilder    ) { }\r\n\r\n    ngOnInit() {\r\n        let userInfo = new UserInfo();\r\n        this.userInfoFormGroup = this.formBuilder.formGroup(userInfo);\r\n    }\r\n}\r\n",
        "html": "<div>\r\n  <form  [formGroup]=\"userInfoFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label>Negative Number</label>\r\n      <input type=\"text\" formControlName=\"negativeNumber\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">you can enter only a negative number<br/></small>\r\n     <small class=\"form-text text-danger\" *ngIf=\"userInfoFormGroup.controls.negativeNumber.errors\">{{userInfoFormGroup.controls.negativeNumber.errors.numeric.message}}<br/></small>\t\r\n    </div>\r\n    <button [disabled]=\"!userInfoFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n",
        "model": "import {  numericAsync, NumericValueType, } from   \"@rxweb/reactive-form-validators\" \r\n\rimport { of } from \"rxjs\" \r\n\r\n   \r\n\r\nexport class UserInfo {\r\n\r\n\t@numericAsync({acceptValue:NumericValueType.NegativeNumber }) \r\n\tnegativeNumber: number;\r\n\t\r\n\t\r\n}\r\n",
        "modelName": "user-info.model.ts",
        "json": {}
    },
    "isFormatExample": {
        "notes": null,
        "component": null,
        "html": null,
        "model": "@numericAsync({isFormat:true }) \r\ntotalAmount: number;\r\n",
        "modelName": null,
        "json": {}
    },
    "isFormat": {
        "notes": null,
        "component": "import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from \"@angular/forms\"\r\nimport { RxFormBuilder } from '@rxweb/reactive-form-validators';\r\n\r\nimport { UserInfo } from './user-info.model';\r\n\r\n@Component({\r\n    selector: 'app-numericAsync-isFormat',\r\n    templateUrl: './numeric-async-is-format.component.html'\r\n})\r\nexport class NumericAsyncIsFormatComponent implements OnInit {\r\n    userInfoFormGroup: FormGroup\r\n\r\n    constructor(\r\n        private formBuilder: RxFormBuilder    ) { }\r\n\r\n    ngOnInit() {\r\n        let userInfo = new UserInfo();\r\n        this.userInfoFormGroup = this.formBuilder.formGroup(userInfo);\r\n    }\r\n}\r\n",
        "html": "<div>\r\n  <form  [formGroup]=\"userInfoFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label>Total Amount</label>\r\n      <input type=\"text\" formControlName=\"totalAmount\" class=\"form-control\"  />\r\n     <small class=\"form-text text-danger\" *ngIf=\"userInfoFormGroup.controls.totalAmount.errors\">{{userInfoFormGroup.controls.totalAmount.errors.numeric.message}}<br/></small>\t\r\n    </div>\r\n    <button [disabled]=\"!userInfoFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n",
        "model": "import {  numericAsync, NumericValueType, } from   \"@rxweb/reactive-form-validators\" \r\n\rimport { of } from \"rxjs\" \r\n\r\n   \r\n\r\nexport class UserInfo {\r\n\r\n\t@numericAsync({isFormat:true }) \r\n\ttotalAmount: number;\r\n\t\r\n\t\r\n}\r\n",
        "modelName": "user-info.model.ts",
        "json": {}
    },
    "allowDecimalExample": {
        "notes": null,
        "component": null,
        "html": null,
        "model": "@numericAsync({allowDecimal:true }) \r\ndecimalNumber: number;\r\n",
        "modelName": null,
        "json": {}
    },
    "allowDecimal": {
        "notes": null,
        "component": "import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from \"@angular/forms\"\r\nimport { RxFormBuilder } from '@rxweb/reactive-form-validators';\r\n\r\nimport { UserInfo } from './user-info.model';\r\n\r\n@Component({\r\n    selector: 'app-numericAsync-allowDecimal',\r\n    templateUrl: './numeric-async-allow-decimal.component.html'\r\n})\r\nexport class NumericAsyncAllowDecimalComponent implements OnInit {\r\n    userInfoFormGroup: FormGroup\r\n\r\n    constructor(\r\n        private formBuilder: RxFormBuilder    ) { }\r\n\r\n    ngOnInit() {\r\n        let userInfo = new UserInfo();\r\n        this.userInfoFormGroup = this.formBuilder.formGroup(userInfo);\r\n    }\r\n}\r\n",
        "html": "<div>\r\n  <form  [formGroup]=\"userInfoFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label>Decimal Number</label>\r\n      <input type=\"text\" formControlName=\"decimalNumber\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">you can enter only a positive decimal number<br/></small>\r\n     <small class=\"form-text text-danger\" *ngIf=\"userInfoFormGroup.controls.decimalNumber.errors\">{{userInfoFormGroup.controls.decimalNumber.errors.numeric.message}}<br/></small>\t\r\n    </div>\r\n    <button [disabled]=\"!userInfoFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n",
        "model": "import {  numericAsync, NumericValueType, } from   \"@rxweb/reactive-form-validators\" \r\n\rimport { of } from \"rxjs\" \r\n\r\n   \r\n\r\nexport class UserInfo {\r\n\r\n\t@numericAsync({allowDecimal:true }) \r\n\tdecimalNumber: number;\r\n\t\r\n\t\r\n}\r\n",
        "modelName": "user-info.model.ts",
        "json": {}
    },
    "messageExample": {
        "notes": null,
        "component": null,
        "html": null,
        "model": "@numericAsync({message:'{{0}} is not a positive number' }) \r\npositiveNumber: number;\r\n",
        "modelName": null,
        "json": {}
    },
    "message": {
        "notes": null,
        "component": "import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from \"@angular/forms\"\r\nimport { RxFormBuilder } from '@rxweb/reactive-form-validators';\r\n\r\nimport { UserInfo } from './user-info.model';\r\n\r\n@Component({\r\n    selector: 'app-numericAsync-message',\r\n    templateUrl: './numeric-async-message.component.html'\r\n})\r\nexport class NumericAsyncMessageComponent implements OnInit {\r\n    userInfoFormGroup: FormGroup\r\n\r\n    constructor(\r\n        private formBuilder: RxFormBuilder    ) { }\r\n\r\n    ngOnInit() {\r\n        let userInfo = new UserInfo();\r\n        this.userInfoFormGroup = this.formBuilder.formGroup(userInfo);\r\n    }\r\n}\r\n",
        "html": "<div>\r\n  <form  [formGroup]=\"userInfoFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label>Positive Number</label>\r\n      <input type=\"text\" formControlName=\"positiveNumber\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">you can enter only a positive number<br/></small>\r\n      <small class=\"form-text text-muted\">Shows custom message.<br/></small>\r\n     <small class=\"form-text text-danger\" *ngIf=\"userInfoFormGroup.controls.positiveNumber.errors\">{{userInfoFormGroup.controls.positiveNumber.errors.numeric.message}}<br/></small>\t\r\n    </div>\r\n    <button [disabled]=\"!userInfoFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n",
        "model": "import {  numericAsync, NumericValueType, } from   \"@rxweb/reactive-form-validators\" \r\n\rimport { of } from \"rxjs\" \r\n\r\n   \r\n\r\nexport class UserInfo {\r\n\r\n\t@numericAsync({message:'{{0}} is not a positive number' }) \r\n\tpositiveNumber: number;\r\n\t\r\n\t\r\n}\r\n",
        "modelName": "user-info.model.ts",
        "json": {}
    },
    "messageKeyExample": {
        "notes": null,
        "component": null,
        "html": null,
        "model": "@numericAsync({messageKey:'numericMessageKey' }) \r\npositiveNonDecimalNumber: number;\r\n",
        "modelName": null,
        "json": {}
    },
    "messageKey": {
        "notes": null,
        "component": "import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from \"@angular/forms\"\r\nimport { RxFormBuilder } from '@rxweb/reactive-form-validators';\r\n\r\nimport { UserInfo } from './user-info.model';\r\n\r\n@Component({\r\n    selector: 'app-numericAsync-messageKey',\r\n    templateUrl: './numeric-async-message-key.component.html'\r\n})\r\nexport class NumericAsyncMessageKeyComponent implements OnInit {\r\n    userInfoFormGroup: FormGroup\r\n\r\n    constructor(\r\n        private formBuilder: RxFormBuilder    ) { }\r\n\r\n    ngOnInit() {\r\n        let userInfo = new UserInfo();\r\n        this.userInfoFormGroup = this.formBuilder.formGroup(userInfo);\r\n    }\r\n}\r\n",
        "html": "<div>\r\n  <form  [formGroup]=\"userInfoFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label>Positive Non Decimal Number</label>\r\n      <input type=\"text\" formControlName=\"positiveNonDecimalNumber\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">Shows custom message based on message key<br/></small>\r\n     <small class=\"form-text text-danger\" *ngIf=\"userInfoFormGroup.controls.positiveNonDecimalNumber.errors\">{{userInfoFormGroup.controls.positiveNonDecimalNumber.errors.numericMessageKey.message}}<br/></small>\t\t\r\n    </div>\r\n    <button [disabled]=\"!userInfoFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n",
        "model": "import {  numericAsync, NumericValueType, } from   \"@rxweb/reactive-form-validators\" \r\n\rimport { of } from \"rxjs\" \r\n\r\n   \r\n\r\nexport class UserInfo {\r\n\r\n\t@numericAsync({messageKey:'numericMessageKey' }) \r\n\tpositiveNonDecimalNumber: number;\r\n\t\r\n\t\r\n}\r\n",
        "modelName": "user-info.model.ts",
        "json": {}
    },
    "dynamic": {
        "notes": null,
        "component": "import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from \"@angular/forms\"\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { environment } from 'src/environments/environment';\r\nimport { RxFormBuilder } from '@rxweb/reactive-form-validators';\r\nimport { FormBuilderConfiguration,\tNumericValueType} from '@rxweb/reactive-form-validators';\r\n\r\nimport { UserInfo } from './user-info.model';\r\n\r\n@Component({\r\n    selector: 'app-numericAsync-dynamic',\r\n    templateUrl: './numeric-async-dynamic.component.html'\r\n})\r\nexport class NumericAsyncDynamicComponent implements OnInit {\r\n    userInfoFormGroup: FormGroup\r\n\t\t\t\tdataTypes = [ \"Real\", \"Integer\",];\r\n\r\n    constructor(\r\n        private formBuilder: RxFormBuilder,private http: HttpClient    ) { }\r\n\r\n    ngOnInit() {\r\n        let userInfo = new UserInfo();\r\n        let formBuilderConfiguration = new FormBuilderConfiguration();\r\n\t\tthis.http.get('assets/examples/reactive-form-validators/decorators/numericAsync/dynamic/dynamic.json?v=' + environment.appVersion).subscribe(dynamic => {\r\n            formBuilderConfiguration.dynamicValidation = JSON.parse(JSON.stringify(dynamic));\r\n\t\t\tthis.userInfoFormGroup = this.formBuilder.formGroup(userInfo,formBuilderConfiguration);\r\n        })\r\n    }\r\n}\r\n",
        "html": "<div>\r\n  <form  *ngIf=\"userInfoFormGroup\"  [formGroup]=\"userInfoFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label>Data Type</label>\r\n      <select formControlName=\"dataType\" class=\"form-control\">\r\n\t\t<option [value]=\"item\" *ngFor=\"let item of dataTypes\">{{item}}</option>\r\n      </select>\r\n      <small class=\"form-text text-danger\" *ngIf=\"userInfoFormGroup.controls.dataType.errors\">{{userInfoFormGroup.controls.dataType.errors.numeric.message}}<br/></small>\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Negative Number</label>\r\n      <input type=\"text\" formControlName=\"negativeNumber\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">you can enter only a negative number<br/></small>\r\n     <small class=\"form-text text-danger\" *ngIf=\"userInfoFormGroup.controls.negativeNumber.errors\">{{userInfoFormGroup.controls.negativeNumber.errors.numeric.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Total Amount</label>\r\n      <input type=\"text\" formControlName=\"totalAmount\" class=\"form-control\"  />\r\n     <small class=\"form-text text-danger\" *ngIf=\"userInfoFormGroup.controls.totalAmount.errors\">{{userInfoFormGroup.controls.totalAmount.errors.numeric.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Decimal Number</label>\r\n      <input type=\"text\" formControlName=\"decimalNumber\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">you can enter only a positive decimal number<br/></small>\r\n     <small class=\"form-text text-danger\" *ngIf=\"userInfoFormGroup.controls.decimalNumber.errors\">{{userInfoFormGroup.controls.decimalNumber.errors.numeric.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Positive Number</label>\r\n      <input type=\"text\" formControlName=\"positiveNumber\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">you can enter only a positive number<br/></small>\r\n      <small class=\"form-text text-muted\">Shows custom message.<br/></small>\r\n     <small class=\"form-text text-danger\" *ngIf=\"userInfoFormGroup.controls.positiveNumber.errors\">{{userInfoFormGroup.controls.positiveNumber.errors.numeric.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Positive Non Decimal Number</label>\r\n      <input type=\"text\" formControlName=\"positiveNonDecimalNumber\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">Shows custom message based on message key<br/></small>\r\n     <small class=\"form-text text-danger\" *ngIf=\"userInfoFormGroup.controls.positiveNonDecimalNumber.errors\">{{userInfoFormGroup.controls.positiveNonDecimalNumber.errors.numericMessageKey.message}}<br/></small>\t\t\r\n    </div>\r\n    <button [disabled]=\"!userInfoFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n",
        "model": "import {  numericAsync,prop, NumericValueType, } from   \"@rxweb/reactive-form-validators\" \r\n\rimport { of } from \"rxjs\" \r\n\r\n   \r\n\r\nexport class UserInfo {\r\n\r\n\t@prop()\r\n\tdataType: string;\r\n\r\n\t@prop()\r\n\tnegativeNumber: number;\r\n\r\n\t@prop()\r\n\ttotalAmount: number;\r\n\r\n\t@prop()\r\n\tdecimalNumber: number;\r\n\r\n\t@prop()\r\n\tpositiveNumber: number;\r\n\r\n\t@prop()\r\n\tpositiveNonDecimalNumber: number;\r\n\r\n}\r\n",
        "modelName": "user-info.model.ts",
        "json": {
            "dynamic.json": "{\"dataType\":{},\"negativeNumber\":{\"numericAsync\":{\"acceptValue\":\"NumericValueType.NegativeNumber\"}},\"totalAmount\":{\"numericAsync\":{\"isFormat\":\"true\"}},\"decimalNumber\":{\"numericAsync\":{\"allowDecimal\":\"true\"}},\"positiveNumber\":{\"numericAsync\":{\"message\":\"{{0}} is not a positive number\"}},\"positiveNonDecimalNumber\":{\"numericAsync\":{\"messageKey\":\"numericMessageKey\"}}}"
        }
    },
    "add": {
        "notes": null,
        "component": "import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from \"@angular/forms\"\r\nimport { RxFormBuilder } from '@rxweb/reactive-form-validators';\r\n\r\nimport { UserInfo } from './user-info.model';\r\n\r\n@Component({\r\n    selector: 'app-numericAsync-add',\r\n    templateUrl: './numeric-async-add.component.html'\r\n})\r\nexport class NumericAsyncAddComponent implements OnInit {\r\n    userInfoFormGroup: FormGroup\r\n\r\n    constructor(\r\n        private formBuilder: RxFormBuilder    ) { }\r\n\r\n    ngOnInit() {\r\n        let userInfo = new UserInfo();\r\n        this.userInfoFormGroup = this.formBuilder.formGroup(userInfo);\r\n    }\r\n}\r\n",
        "html": "<div>\r\n  <form  [formGroup]=\"userInfoFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label>Integer Number</label>\r\n      <input type=\"text\" formControlName=\"integerNumber\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">you can enter only a non decimal positive number<br/></small>\r\n     <small class=\"form-text text-danger\" *ngIf=\"userInfoFormGroup.controls.integerNumber.errors\">{{userInfoFormGroup.controls.integerNumber.errors.numeric.message}}<br/></small>\t\r\n    </div>\r\n    <button [disabled]=\"!userInfoFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n",
        "model": "import {  numericAsync, NumericValueType, } from   \"@rxweb/reactive-form-validators\" \r\n\rimport { of } from \"rxjs\" \r\n\r\n   \r\n\r\nexport class UserInfo {\r\n\r\n\t@numericAsync({acceptValue:NumericValueType.PositiveNumber  ,allowDecimal:false }) \r\n\tintegerNumber: number;\r\n\t\r\n\t\r\n}\r\n",
        "modelName": "user-info.model.ts",
        "json": {}
    },
    "edit": {
        "notes": null,
        "component": "import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from \"@angular/forms\"\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { environment } from 'src/environments/environment';\r\nimport { RxFormBuilder } from '@rxweb/reactive-form-validators';\r\n\r\nimport { UserInfo } from './user-info.model';\r\n\r\n@Component({\r\n    selector: 'app-numericAsync-edit',\r\n    templateUrl: './numeric-async-edit.component.html'\r\n})\r\nexport class NumericAsyncEditComponent implements OnInit {\r\n    userInfoFormGroup: FormGroup\r\n\r\n    constructor(\r\n        private formBuilder: RxFormBuilder,private http: HttpClient    ) { }\r\n\r\n    ngOnInit() {\r\n        this.http.get('assets/examples/reactive-form-validators/decorators/numericAsync/edit/user-info-data.json?v=' + environment.appVersion).subscribe(userInfo => {\r\n            this.userInfoFormGroup = this.formBuilder.formGroup<UserInfo>(UserInfo,userInfo);\r\n        })\r\n    }\r\n}\r\n",
        "html": "<div>\r\n  <form  *ngIf=\"userInfoFormGroup\"  [formGroup]=\"userInfoFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label>Integer Number</label>\r\n      <input type=\"text\" formControlName=\"integerNumber\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">you can enter only a non decimal positive number<br/></small>\r\n     <small class=\"form-text text-danger\" *ngIf=\"userInfoFormGroup.controls.integerNumber.errors\">{{userInfoFormGroup.controls.integerNumber.errors.numeric.message}}<br/></small>\t\r\n    </div>\r\n    <button [disabled]=\"!userInfoFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n",
        "model": "import {  numericAsync, NumericValueType, } from   \"@rxweb/reactive-form-validators\" \r\n\rimport { of } from \"rxjs\" \r\n\r\n   \r\n\r\nexport class UserInfo {\r\n\r\n\t@numericAsync({acceptValue:NumericValueType.PositiveNumber  ,allowDecimal:false }) \r\n\tintegerNumber: number;\r\n\t\r\n\t\r\n}\r\n",
        "modelName": "user-info.model.ts",
        "json": {
            "user-info-data.json": "{\"integerNumber\":\"14\"}"
        }
    }
}