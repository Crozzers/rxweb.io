{
    "rightSidebarLinks": [
        {
            "id": "managing-input",
            "title": "managing-input",
            "subLink": null
        },
        {
            "id": "managinginput",
            "title": "Managing Input",
            "subLink": []
        }
    ],
    "title": "managing input",
    "description": "",
    "validatorType": "validators",
    "validationTypeTitle": "Validators",
    "type": "simple",
    "gitDocPath": "https://github.com/rxweb/rxweb.io/edit/master/docs/angular/learn/managing-input.md",
    "category": "learn",
    "subCategory": "",
    "linkTitle": "managing-input",
    "tabArray": {},
    "innerHtml": null,
    "htmlContent": "<div class='row page-section' id= 'managinginput'>\r\n<div class='col-lg-12'>\r\n<h2>Managing Input<a title='Link to this heading' class='link-header' href='/learn/managing-input/validators#managinginput'><i class='fa fa-link'></i></a></h2>\r\n\r\n<p class='showHideElement' >After creating the components and adding the routes to it, lets proceed towards the creation of reactive forms and adding validations to it. Lets start by creating a user input form which will be model based reactive forms with addition of the in-built validations provided in the <a class=\"redirect-link\" href=\"/getting-started\">@rxweb/reactive-form-validators</a>.</p>\r\n<blockquote class='showHideElement' ><p>This guide describes the model driven approach, the same can be achieved using <a target=\"_blank\" class=\"redirect-link\" href=\"form-validations/alpha/validators\">validator approach </a></p></blockquote>\r\n<p class='showHideElement' >1) Lets start by creating a model class with property initilialization in the model class. As we are going to add a user registration form, Create a user model class as below:</p>\r\n<div component=\"app-code\" key=\"managing-input-add-model\"></div>\r\n<p class='showHideElement' >2) Further using the generated model class to construct a form using <span class='highlighted'>RxFormBuilder</span> of @rxweb/reactive-form-validators. </p>\r\n<div component=\"app-code\" key=\"managing-input-add-component\"></div>\r\n<p class='showHideElement' >3) Displaying the validation messages from the global configuration using interpolation without multiple *ngIf conditions.</p>\r\n<div component=\"app-code\" key=\"managing-input-add-html\"></div>\r\n<p class='showHideElement' >4) After completing the following steps the form looks like :</p>\r\n<div class=\"container\">\r\n<img src=assets/rxwebcore/Images/managing-input.gif alt='Creating Projects'>\r\n</div>\r\n</div></div>\r\n"
}