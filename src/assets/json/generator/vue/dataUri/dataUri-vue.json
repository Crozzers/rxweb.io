{"complete":{"notes":null,"component":"\r\n<template>\r\n  <div class=\"col-lg-12\">\r\n     <form>\r\n       <div class=\"form-group\">\r\n        <label>Scheme</label>\r\n        <input id=\"name\" class=\"form-control\" v-model=\"userFormGroup.props.scheme\" type=\"text\" name=\"name\" />\r\n        <div v-if=\"userFormGroup.controls.scheme.errors\">\r\n         <small class=\"form-text text-danger\">{{userFormGroup.controls.scheme.errors.dataUri.message}}<br/></small>\t\r\n       </div>\r\n      </div>  \r\n    <div class=\"form-group\">\r\n        <label>Image Data Uri</label>\r\n        <input id=\"name\" class=\"form-control\" v-model=\"userFormGroup.props.imageDataUri\" type=\"text\" name=\"name\" />\r\n           <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Image Data Uri' then you need to add 'Scheme' input as 'DataUri'.<br/></small>\r\n          <small class=\"form-text text-muted\">Conditional Expression with type 'function'<br/></small>\r\n       <div v-if=\"userFormGroup.controls.imageDataUri.errors\">\r\n         <small class=\"form-text text-danger\">{{userFormGroup.controls.imageDataUri.errors.dataUri.message}}<br/></small>\t\r\n       </div>\r\n      </div>  \r\n    <div class=\"form-group\">\r\n        <label>Audio Data Uri</label>\r\n        <input id=\"name\" class=\"form-control\" v-model=\"userFormGroup.props.audioDataUri\" type=\"text\" name=\"name\" />\r\n           <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Audio Data Uri' then you need to add 'Scheme' input as 'DataUri'.<br/></small>\r\n          <small class=\"form-text text-muted\">Conditional Expression with type 'string'<br/></small>\r\n       <div v-if=\"userFormGroup.controls.audioDataUri.errors\">\r\n         <small class=\"form-text text-danger\">{{userFormGroup.controls.audioDataUri.errors.dataUri.message}}<br/></small>\t\r\n       </div>\r\n      </div>  \r\n    <div class=\"form-group\">\r\n        <label>Video Data Uri</label>\r\n        <input id=\"name\" class=\"form-control\" v-model=\"userFormGroup.props.videoDataUri\" type=\"text\" name=\"name\" />\r\n           <small class=\"form-text text-muted\">enter Data URI only<br/></small>\r\n          <small class=\"form-text text-muted\">Shows custom message.<br/></small>\r\n       <div v-if=\"userFormGroup.controls.videoDataUri.errors\">\r\n         <small class=\"form-text text-danger\">{{userFormGroup.controls.videoDataUri.errors.dataUri.message}}<br/></small>\t\r\n       </div>\r\n      </div>  \r\n    <div class=\"form-group\">\r\n        <label>Pdf Data Uri</label>\r\n        <input id=\"name\" class=\"form-control\" v-model=\"userFormGroup.props.pdfDataUri\" type=\"text\" name=\"name\" />\r\n           <small class=\"form-text text-muted\">Custom message based on messageKey<br/></small>\r\n       <div v-if=\"userFormGroup.controls.pdfDataUri.errors\">\r\n         <small class=\"form-text text-danger\">{{userFormGroup.controls.pdfDataUri.errors.dataUri.message}}<br/></small>\t\r\n       </div>\r\n      </div>  \r\n       <button class=\"btn btn-primary\">Submit</button>\r\n     </form>\r\n  </div>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport { Component, Prop, Vue } from 'vue-property-decorator';\r\nimport { required,RxFormBuilder,IFormGroup } from \"@rxweb/reactive-forms\"\r\nimport { User } from './user.model';\r\n\r\n@Component\r\nexport default class DataUriCompleteComponent extends Vue {\r\n userFormGroup: IFormGroup<User>;\r\n\r\n formBuilder: RxFormBuilder = new RxFormBuilder();\r\n\r\n  constructor() {\r\n    super();\r\n    this.userFormGroup = this.formBuilder.formGroup(User) as IFormGroup<User>;\r\n   }\r\n}\r\n</script> \r\n","html":null,"model":"import {  dataUri,prop, } from   \"@rxweb/reactive-forms\"   \r\n\r\nexport class User {\r\n\r\n\t@prop()\r\n\tscheme: string;\r\n\r\n\t//If you want to apply conditional expression of type 'function'\r\n\t@dataUri({conditionalExpression:(x,y) => x.scheme == \"DataUri\"  }) \r\n\timageDataUri: string;\r\n\t\r\n\t\r\n\t//If you want to apply conditional expression of type 'string'\r\n\t@dataUri({conditionalExpression:'x => x.scheme ==\"DataUri\"' }) \r\n\taudioDataUri: string;\r\n\t\r\n\t\r\n\t@dataUri({message:'{{0}} is not a proper data URI' }) \r\n\tvideoDataUri: string;\r\n\t\r\n\t\r\n\t@dataUri({messageKey:'dataUriMessageKey' }) \r\n\tpdfDataUri: string;\r\n\t\r\n\t\r\n}\r\n","modelName":null,"json":{}},"conditionalExpression":{"notes":null,"component":"\r\n<template>\r\n  <div class=\"col-lg-12\">\r\n     <form>\r\n       <div class=\"form-group\">\r\n        <label>Scheme</label>\r\n        <input id=\"name\" class=\"form-control\" v-model=\"userFormGroup.props.scheme\" type=\"text\" name=\"name\" />\r\n        <div v-if=\"userFormGroup.controls.scheme.errors\">\r\n         <small class=\"form-text text-danger\">{{userFormGroup.controls.scheme.errors.dataUri.message}}<br/></small>\t\r\n       </div>\r\n      </div>  \r\n    <div class=\"form-group\">\r\n        <label>Audio Data Uri</label>\r\n        <input id=\"name\" class=\"form-control\" v-model=\"userFormGroup.props.audioDataUri\" type=\"text\" name=\"name\" />\r\n           <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Audio Data Uri' then you need to add 'Scheme' input as 'DataUri'.<br/></small>\r\n          <small class=\"form-text text-muted\">Conditional Expression with type 'string'<br/></small>\r\n       <div v-if=\"userFormGroup.controls.audioDataUri.errors\">\r\n         <small class=\"form-text text-danger\">{{userFormGroup.controls.audioDataUri.errors.dataUri.message}}<br/></small>\t\r\n       </div>\r\n      </div>  \r\n    <div class=\"form-group\">\r\n        <label>Image Data Uri</label>\r\n        <input id=\"name\" class=\"form-control\" v-model=\"userFormGroup.props.imageDataUri\" type=\"text\" name=\"name\" />\r\n           <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Image Data Uri' then you need to add 'Scheme' input as 'DataUri'.<br/></small>\r\n          <small class=\"form-text text-muted\">Conditional Expression with type 'function'<br/></small>\r\n       <div v-if=\"userFormGroup.controls.imageDataUri.errors\">\r\n         <small class=\"form-text text-danger\">{{userFormGroup.controls.imageDataUri.errors.dataUri.message}}<br/></small>\t\r\n       </div>\r\n      </div>  \r\n       <button class=\"btn btn-primary\">Submit</button>\r\n     </form>\r\n  </div>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport { Component, Prop, Vue } from 'vue-property-decorator';\r\nimport { required,RxFormBuilder,IFormGroup } from \"@rxweb/reactive-forms\"\r\nimport { User } from './user.model';\r\n\r\n@Component\r\nexport default class DataUriConditionalExpressionComponent extends Vue {\r\n userFormGroup: IFormGroup<User>;\r\n\r\n formBuilder: RxFormBuilder = new RxFormBuilder();\r\n\r\n  constructor() {\r\n    super();\r\n    this.userFormGroup = this.formBuilder.formGroup(User) as IFormGroup<User>;\r\n   }\r\n}\r\n</script> \r\n","html":null,"model":"import {  dataUri,prop, } from   \"@rxweb/reactive-forms\"   \r\n\r\nexport class User {\r\n\r\n\t@prop()\r\n\tscheme: string;\r\n\r\n\t//If you want to apply conditional expression of type 'string'\r\n\t@dataUri({conditionalExpression:'x => x.scheme ==\"DataUri\"' }) \r\n\taudioDataUri: string;\r\n\t\r\n\t\r\n\t//If you want to apply conditional expression of type 'function'\r\n\t@dataUri({conditionalExpression:(x,y) => x.scheme == \"DataUri\"  }) \r\n\timageDataUri: string;\r\n\t\r\n\t\r\n}\r\n","modelName":null,"json":{}},"message":{"notes":null,"component":"\r\n<template>\r\n  <div class=\"col-lg-12\">\r\n     <form>\r\n       <div class=\"form-group\">\r\n        <label>Video Data Uri</label>\r\n        <input id=\"name\" class=\"form-control\" v-model=\"userFormGroup.props.videoDataUri\" type=\"text\" name=\"name\" />\r\n           <small class=\"form-text text-muted\">enter Data URI only<br/></small>\r\n          <small class=\"form-text text-muted\">Shows custom message.<br/></small>\r\n       <div v-if=\"userFormGroup.controls.videoDataUri.errors\">\r\n         <small class=\"form-text text-danger\">{{userFormGroup.controls.videoDataUri.errors.dataUri.message}}<br/></small>\t\r\n       </div>\r\n      </div>  \r\n       <button class=\"btn btn-primary\">Submit</button>\r\n     </form>\r\n  </div>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport { Component, Prop, Vue } from 'vue-property-decorator';\r\nimport { required,RxFormBuilder,IFormGroup } from \"@rxweb/reactive-forms\"\r\nimport { User } from './user.model';\r\n\r\n@Component\r\nexport default class DataUriMessageComponent extends Vue {\r\n userFormGroup: IFormGroup<User>;\r\n\r\n formBuilder: RxFormBuilder = new RxFormBuilder();\r\n\r\n  constructor() {\r\n    super();\r\n    this.userFormGroup = this.formBuilder.formGroup(User) as IFormGroup<User>;\r\n   }\r\n}\r\n</script> \r\n","html":null,"model":"import {  dataUri, } from   \"@rxweb/reactive-forms\"   \r\n\r\nexport class User {\r\n\r\n\t@dataUri({message:'{{0}} is not a proper data URI' }) \r\n\tvideoDataUri: string;\r\n\t\r\n\t\r\n}\r\n","modelName":null,"json":{}},"messageKey":{"notes":null,"component":"\r\n<template>\r\n  <div class=\"col-lg-12\">\r\n     <form>\r\n       <div class=\"form-group\">\r\n        <label>Pdf Data Uri</label>\r\n        <input id=\"name\" class=\"form-control\" v-model=\"userFormGroup.props.pdfDataUri\" type=\"text\" name=\"name\" />\r\n           <small class=\"form-text text-muted\">Custom message based on messageKey<br/></small>\r\n       <div v-if=\"userFormGroup.controls.pdfDataUri.errors\">\r\n         <small class=\"form-text text-danger\">{{userFormGroup.controls.pdfDataUri.errors.dataUri.message}}<br/></small>\t\r\n       </div>\r\n      </div>  \r\n       <button class=\"btn btn-primary\">Submit</button>\r\n     </form>\r\n  </div>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport { Component, Prop, Vue } from 'vue-property-decorator';\r\nimport { required,RxFormBuilder,IFormGroup } from \"@rxweb/reactive-forms\"\r\nimport { User } from './user.model';\r\n\r\n@Component\r\nexport default class DataUriMessageKeyComponent extends Vue {\r\n userFormGroup: IFormGroup<User>;\r\n\r\n formBuilder: RxFormBuilder = new RxFormBuilder();\r\n\r\n  constructor() {\r\n    super();\r\n    this.userFormGroup = this.formBuilder.formGroup(User) as IFormGroup<User>;\r\n   }\r\n}\r\n</script> \r\n","html":null,"model":"import {  dataUri, } from   \"@rxweb/reactive-forms\"   \r\n\r\nexport class User {\r\n\r\n\t@dataUri({messageKey:'dataUriMessageKey' }) \r\n\tpdfDataUri: string;\r\n\t\r\n\t\r\n}\r\n","modelName":null,"json":{}},"add":{"notes":null,"component":"\r\n<template>\r\n  <div class=\"col-lg-12\">\r\n     <form>\r\n       <div class=\"form-group\">\r\n        <label>Video Data Uri</label>\r\n        <input id=\"name\" class=\"form-control\" v-model=\"userFormGroup.props.videoDataUri\" type=\"text\" name=\"name\" />\r\n           <small class=\"form-text text-muted\">You must enter a data URI<br/></small>\r\n       <div v-if=\"userFormGroup.controls.videoDataUri.errors\">\r\n         <small class=\"form-text text-danger\">{{userFormGroup.controls.videoDataUri.errors.dataUri.message}}<br/></small>\t\r\n       </div>\r\n      </div>  \r\n       <button class=\"btn btn-primary\">Submit</button>\r\n     </form>\r\n  </div>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport { Component, Prop, Vue } from 'vue-property-decorator';\r\nimport { required,RxFormBuilder,IFormGroup } from \"@rxweb/reactive-forms\"\r\nimport { User } from './user.model';\r\n\r\n@Component\r\nexport default class DataUriAddComponent extends Vue {\r\n userFormGroup: IFormGroup<User>;\r\n\r\n formBuilder: RxFormBuilder = new RxFormBuilder();\r\n\r\n  constructor() {\r\n    super();\r\n    this.userFormGroup = this.formBuilder.formGroup(User) as IFormGroup<User>;\r\n   }\r\n}\r\n</script> \r\n","html":null,"model":"import {  dataUri, } from   \"@rxweb/reactive-forms\"   \r\n\r\nexport class User {\r\n\r\n\t@dataUri() \r\n\tvideoDataUri: string;\r\n\t\r\n\t\r\n}\r\n","modelName":null,"json":{}},"edit":{"notes":null,"component":"\r\n<template>\r\n  <div class=\"col-lg-12\">\r\n     <form>\r\n       <div class=\"form-group\">\r\n        <label>Video Data Uri</label>\r\n        <input id=\"name\" class=\"form-control\" v-model=\"userFormGroup.props.videoDataUri\" type=\"text\" name=\"name\" />\r\n           <small class=\"form-text text-muted\">You must enter a data URI<br/></small>\r\n       <div v-if=\"userFormGroup.controls.videoDataUri.errors\">\r\n         <small class=\"form-text text-danger\">{{userFormGroup.controls.videoDataUri.errors.dataUri.message}}<br/></small>\t\r\n       </div>\r\n      </div>  \r\n       <button class=\"btn btn-primary\">Submit</button>\r\n     </form>\r\n  </div>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport { Component, Prop, Vue } from 'vue-property-decorator';\r\nimport { required,RxFormBuilder,IFormGroup } from \"@rxweb/reactive-forms\"\r\nimport { User } from './user.model';\r\n\r\n@Component\r\nexport default class DataUriEditComponent extends Vue {\r\n userFormGroup: IFormGroup<User>;\r\n\r\n formBuilder: RxFormBuilder = new RxFormBuilder();\r\n\r\n  constructor() {\r\n    super();\r\n    this.userFormGroup = this.formBuilder.formGroup(User) as IFormGroup<User>;\r\n   }\r\n}\r\n</script> \r\n","html":null,"model":"import {  dataUri, } from   \"@rxweb/reactive-forms\"   \r\n\r\nexport class User {\r\n\r\n\t@dataUri() \r\n\tvideoDataUri: string;\r\n\t\r\n\t\r\n}\r\n","modelName":null,"json":{}}}