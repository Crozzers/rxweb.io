{"complete":{"notes":null,"component":"\r\n<template>\r\n  <div class=\"col-lg-12\">\r\n     <form>\r\n       <div class=\"form-group\">\r\n        <label>Type</label>\r\n        <input id=\"name\" class=\"form-control\" v-model=\"userFormGroup.props.type\" type=\"text\" name=\"name\" />\r\n        <div v-if=\"userFormGroup.controls.type.errors\">\r\n         <small class=\"form-text text-danger\">{{userFormGroup.controls.type.errors.odd.message}}<br/></small>\t\r\n       </div>\r\n      </div>  \r\n    <div class=\"form-group\">\r\n        <label>Number</label>\r\n        <input id=\"name\" class=\"form-control\" v-model=\"userFormGroup.props.number\" type=\"text\" name=\"name\" />\r\n           <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Number' then you need to add 'Type' input as 'Odd'.<br/></small>\r\n          <small class=\"form-text text-muted\">Conditional Expression with type 'function'<br/></small>\r\n       <div v-if=\"userFormGroup.controls.number.errors\">\r\n         <small class=\"form-text text-danger\">{{userFormGroup.controls.number.errors.odd.message}}<br/></small>\t\r\n       </div>\r\n      </div>  \r\n    <div class=\"form-group\">\r\n        <label>Odd Number</label>\r\n        <input id=\"name\" class=\"form-control\" v-model=\"userFormGroup.props.oddNumber\" type=\"text\" name=\"name\" />\r\n           <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Odd Number' then you need to add 'Type' input as 'Odd'.<br/></small>\r\n          <small class=\"form-text text-muted\">Conditional Expression with type 'string'<br/></small>\r\n       <div v-if=\"userFormGroup.controls.oddNumber.errors\">\r\n         <small class=\"form-text text-danger\">{{userFormGroup.controls.oddNumber.errors.odd.message}}<br/></small>\t\r\n       </div>\r\n      </div>  \r\n    <div class=\"form-group\">\r\n        <label>Multiples of Odd Number</label>\r\n        <input id=\"name\" class=\"form-control\" v-model=\"userFormGroup.props.multiplesOfOddNumber\" type=\"text\" name=\"name\" />\r\n           <small class=\"form-text text-muted\">you can enter only an odd number<br/></small>\r\n          <small class=\"form-text text-muted\">Shows custom message.<br/></small>\r\n       <div v-if=\"userFormGroup.controls.multiplesOfOddNumber.errors\">\r\n         <small class=\"form-text text-danger\">{{userFormGroup.controls.multiplesOfOddNumber.errors.odd.message}}<br/></small>\t\r\n       </div>\r\n      </div>  \r\n    <div class=\"form-group\">\r\n        <label>Other Odd Number</label>\r\n        <input id=\"name\" class=\"form-control\" v-model=\"userFormGroup.props.otherOddNumber\" type=\"text\" name=\"name\" />\r\n           <small class=\"form-text text-muted\">custom message based on messageKey<br/></small>\r\n       <div v-if=\"userFormGroup.controls.otherOddNumber.errors\">\r\n         <small class=\"form-text text-danger\">{{userFormGroup.controls.otherOddNumber.errors.odd.message}}<br/></small>\t\r\n       </div>\r\n      </div>  \r\n       <button class=\"btn btn-primary\">Submit</button>\r\n     </form>\r\n  </div>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport { Component, Prop, Vue } from 'vue-property-decorator';\r\nimport { required,RxFormBuilder,IFormGroup } from \"@rxweb/reactive-forms\"\r\nimport { User } from './user.model';\r\n\r\n@Component\r\nexport default class OddCompleteComponent extends Vue {\r\n userFormGroup: IFormGroup<User>;\r\n\r\n formBuilder: RxFormBuilder = new RxFormBuilder();\r\n\r\n  constructor() {\r\n    super();\r\n    this.userFormGroup = this.formBuilder.formGroup(User) as IFormGroup<User>;\r\n   }\r\n}\r\n</script> \r\n","html":null,"model":"import {  odd,prop, } from   \"@rxweb/reactive-forms\"   \r\n\r\nexport class User {\r\n\r\n\t@prop()\r\n\ttype: string;\r\n\r\n\t//If you want to apply conditional expression of type 'function'\r\n\t@odd({conditionalExpression:(x,y) => x.type == \"Odd\"  }) \r\n\tnumber: number;\r\n\t\r\n\t\r\n\t//If you want to apply conditional expression of type 'string'\r\n\t@odd({conditionalExpression:'x => x.type == \"Odd\"' }) \r\n\toddNumber: number;\r\n\t\r\n\t\r\n\t@odd({message:'{{0}} is not an odd number' }) \r\n\tmultiplesOfOddNumber: number;\r\n\t\r\n\t\r\n\t@odd({messageKey:'oddMessageKey' }) \r\n\totherOddNumber: string;\r\n\t\r\n\t\r\n}\r\n","modelName":null,"json":{}},"conditionalExpression":{"notes":null,"component":"\r\n<template>\r\n  <div class=\"col-lg-12\">\r\n     <form>\r\n       <div class=\"form-group\">\r\n        <label>Type</label>\r\n        <input id=\"name\" class=\"form-control\" v-model=\"userFormGroup.props.type\" type=\"text\" name=\"name\" />\r\n        <div v-if=\"userFormGroup.controls.type.errors\">\r\n         <small class=\"form-text text-danger\">{{userFormGroup.controls.type.errors.odd.message}}<br/></small>\t\r\n       </div>\r\n      </div>  \r\n    <div class=\"form-group\">\r\n        <label>Odd Number</label>\r\n        <input id=\"name\" class=\"form-control\" v-model=\"userFormGroup.props.oddNumber\" type=\"text\" name=\"name\" />\r\n           <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Odd Number' then you need to add 'Type' input as 'Odd'.<br/></small>\r\n          <small class=\"form-text text-muted\">Conditional Expression with type 'string'<br/></small>\r\n       <div v-if=\"userFormGroup.controls.oddNumber.errors\">\r\n         <small class=\"form-text text-danger\">{{userFormGroup.controls.oddNumber.errors.odd.message}}<br/></small>\t\r\n       </div>\r\n      </div>  \r\n    <div class=\"form-group\">\r\n        <label>Number</label>\r\n        <input id=\"name\" class=\"form-control\" v-model=\"userFormGroup.props.number\" type=\"text\" name=\"name\" />\r\n           <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Number' then you need to add 'Type' input as 'Odd'.<br/></small>\r\n          <small class=\"form-text text-muted\">Conditional Expression with type 'function'<br/></small>\r\n       <div v-if=\"userFormGroup.controls.number.errors\">\r\n         <small class=\"form-text text-danger\">{{userFormGroup.controls.number.errors.odd.message}}<br/></small>\t\r\n       </div>\r\n      </div>  \r\n       <button class=\"btn btn-primary\">Submit</button>\r\n     </form>\r\n  </div>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport { Component, Prop, Vue } from 'vue-property-decorator';\r\nimport { required,RxFormBuilder,IFormGroup } from \"@rxweb/reactive-forms\"\r\nimport { User } from './user.model';\r\n\r\n@Component\r\nexport default class OddConditionalExpressionComponent extends Vue {\r\n userFormGroup: IFormGroup<User>;\r\n\r\n formBuilder: RxFormBuilder = new RxFormBuilder();\r\n\r\n  constructor() {\r\n    super();\r\n    this.userFormGroup = this.formBuilder.formGroup(User) as IFormGroup<User>;\r\n   }\r\n}\r\n</script> \r\n","html":null,"model":"import {  odd,prop, } from   \"@rxweb/reactive-forms\"   \r\n\r\nexport class User {\r\n\r\n\t@prop()\r\n\ttype: string;\r\n\r\n\t//If you want to apply conditional expression of type 'string'\r\n\t@odd({conditionalExpression:'x => x.type == \"Odd\"' }) \r\n\toddNumber: number;\r\n\t\r\n\t\r\n\t//If you want to apply conditional expression of type 'function'\r\n\t@odd({conditionalExpression:(x,y) => x.type == \"Odd\"  }) \r\n\tnumber: number;\r\n\t\r\n\t\r\n}\r\n","modelName":null,"json":{}},"message":{"notes":null,"component":"\r\n<template>\r\n  <div class=\"col-lg-12\">\r\n     <form>\r\n       <div class=\"form-group\">\r\n        <label>Multiples of Odd Number</label>\r\n        <input id=\"name\" class=\"form-control\" v-model=\"userFormGroup.props.multiplesOfOddNumber\" type=\"text\" name=\"name\" />\r\n           <small class=\"form-text text-muted\">you can enter only an odd number<br/></small>\r\n          <small class=\"form-text text-muted\">Shows custom message.<br/></small>\r\n       <div v-if=\"userFormGroup.controls.multiplesOfOddNumber.errors\">\r\n         <small class=\"form-text text-danger\">{{userFormGroup.controls.multiplesOfOddNumber.errors.odd.message}}<br/></small>\t\r\n       </div>\r\n      </div>  \r\n       <button class=\"btn btn-primary\">Submit</button>\r\n     </form>\r\n  </div>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport { Component, Prop, Vue } from 'vue-property-decorator';\r\nimport { required,RxFormBuilder,IFormGroup } from \"@rxweb/reactive-forms\"\r\nimport { User } from './user.model';\r\n\r\n@Component\r\nexport default class OddMessageComponent extends Vue {\r\n userFormGroup: IFormGroup<User>;\r\n\r\n formBuilder: RxFormBuilder = new RxFormBuilder();\r\n\r\n  constructor() {\r\n    super();\r\n    this.userFormGroup = this.formBuilder.formGroup(User) as IFormGroup<User>;\r\n   }\r\n}\r\n</script> \r\n","html":null,"model":"import {  odd, } from   \"@rxweb/reactive-forms\"   \r\n\r\nexport class User {\r\n\r\n\t@odd({message:'{{0}} is not an odd number' }) \r\n\tmultiplesOfOddNumber: number;\r\n\t\r\n\t\r\n}\r\n","modelName":null,"json":{}},"messageKey":{"notes":null,"component":"\r\n<template>\r\n  <div class=\"col-lg-12\">\r\n     <form>\r\n       <div class=\"form-group\">\r\n        <label>Other Odd Number</label>\r\n        <input id=\"name\" class=\"form-control\" v-model=\"userFormGroup.props.otherOddNumber\" type=\"text\" name=\"name\" />\r\n           <small class=\"form-text text-muted\">custom message based on messageKey<br/></small>\r\n       <div v-if=\"userFormGroup.controls.otherOddNumber.errors\">\r\n         <small class=\"form-text text-danger\">{{userFormGroup.controls.otherOddNumber.errors.odd.message}}<br/></small>\t\r\n       </div>\r\n      </div>  \r\n       <button class=\"btn btn-primary\">Submit</button>\r\n     </form>\r\n  </div>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport { Component, Prop, Vue } from 'vue-property-decorator';\r\nimport { required,RxFormBuilder,IFormGroup } from \"@rxweb/reactive-forms\"\r\nimport { User } from './user.model';\r\n\r\n@Component\r\nexport default class OddMessageKeyComponent extends Vue {\r\n userFormGroup: IFormGroup<User>;\r\n\r\n formBuilder: RxFormBuilder = new RxFormBuilder();\r\n\r\n  constructor() {\r\n    super();\r\n    this.userFormGroup = this.formBuilder.formGroup(User) as IFormGroup<User>;\r\n   }\r\n}\r\n</script> \r\n","html":null,"model":"import {  odd, } from   \"@rxweb/reactive-forms\"   \r\n\r\nexport class User {\r\n\r\n\t@odd({messageKey:'oddMessageKey' }) \r\n\totherOddNumber: string;\r\n\t\r\n\t\r\n}\r\n","modelName":null,"json":{}},"add":{"notes":null,"component":"\r\n<template>\r\n  <div class=\"col-lg-12\">\r\n     <form>\r\n       <div class=\"form-group\">\r\n        <label>Odd Number</label>\r\n        <input id=\"name\" class=\"form-control\" v-model=\"userFormGroup.props.oddNumber\" type=\"text\" name=\"name\" />\r\n           <small class=\"form-text text-muted\">you can enter only an odd number<br/></small>\r\n       <div v-if=\"userFormGroup.controls.oddNumber.errors\">\r\n         <small class=\"form-text text-danger\">{{userFormGroup.controls.oddNumber.errors.odd.message}}<br/></small>\t\r\n       </div>\r\n      </div>  \r\n       <button class=\"btn btn-primary\">Submit</button>\r\n     </form>\r\n  </div>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport { Component, Prop, Vue } from 'vue-property-decorator';\r\nimport { required,RxFormBuilder,IFormGroup } from \"@rxweb/reactive-forms\"\r\nimport { User } from './user.model';\r\n\r\n@Component\r\nexport default class OddAddComponent extends Vue {\r\n userFormGroup: IFormGroup<User>;\r\n\r\n formBuilder: RxFormBuilder = new RxFormBuilder();\r\n\r\n  constructor() {\r\n    super();\r\n    this.userFormGroup = this.formBuilder.formGroup(User) as IFormGroup<User>;\r\n   }\r\n}\r\n</script> \r\n","html":null,"model":"import {  odd, } from   \"@rxweb/reactive-forms\"   \r\n\r\nexport class User {\r\n\r\n\t@odd() \r\n\toddNumber: number;\r\n\t\r\n\t\r\n}\r\n","modelName":null,"json":{}},"edit":{"notes":null,"component":"\r\n<template>\r\n  <div class=\"col-lg-12\">\r\n     <form>\r\n       <div class=\"form-group\">\r\n        <label>Odd Number</label>\r\n        <input id=\"name\" class=\"form-control\" v-model=\"userFormGroup.props.oddNumber\" type=\"text\" name=\"name\" />\r\n           <small class=\"form-text text-muted\">you can enter only an odd number<br/></small>\r\n       <div v-if=\"userFormGroup.controls.oddNumber.errors\">\r\n         <small class=\"form-text text-danger\">{{userFormGroup.controls.oddNumber.errors.odd.message}}<br/></small>\t\r\n       </div>\r\n      </div>  \r\n       <button class=\"btn btn-primary\">Submit</button>\r\n     </form>\r\n  </div>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport { Component, Prop, Vue } from 'vue-property-decorator';\r\nimport { required,RxFormBuilder,IFormGroup } from \"@rxweb/reactive-forms\"\r\nimport { User } from './user.model';\r\n\r\n@Component\r\nexport default class OddEditComponent extends Vue {\r\n userFormGroup: IFormGroup<User>;\r\n\r\n formBuilder: RxFormBuilder = new RxFormBuilder();\r\n\r\n  constructor() {\r\n    super();\r\n    this.userFormGroup = this.formBuilder.formGroup(User) as IFormGroup<User>;\r\n   }\r\n}\r\n</script> \r\n","html":null,"model":"import {  odd, } from   \"@rxweb/reactive-forms\"   \r\n\r\nexport class User {\r\n\r\n\t@odd() \r\n\toddNumber: number;\r\n\t\r\n\t\r\n}\r\n","modelName":null,"json":{}}}