{"complete":{"notes":null,"component":"\r\n<template>\r\n  <div class=\"col-lg-12\">\r\n     <form>\r\n       <div class=\"form-group\">\r\n        <label>SoundRecording GRid</label>\r\n        <input id=\"name\" class=\"form-control\" v-model=\"digitalInfoFormGroup.props.soundRecordingGrid\" type=\"text\" name=\"name\" />\r\n        <div v-if=\"digitalInfoFormGroup.controls.soundRecordingGrid.errors\">\r\n         <small class=\"form-text text-danger\">{{digitalInfoFormGroup.controls.soundRecordingGrid.errors.grid.message}}<br/></small>\t\r\n       </div>\r\n      </div>  \r\n    <div class=\"form-group\">\r\n        <label>AudioVisualRecording GRid</label>\r\n        <input id=\"name\" class=\"form-control\" v-model=\"digitalInfoFormGroup.props.audioVisualRecordingGrid\" type=\"text\" name=\"name\" />\r\n          <small class=\"form-text text-muted\">If you want to apply conditional validation on 'AudioVisualRecording GRid' then you need to add 'SoundRecording GRid' field input to 'A12425GABC1234002M'.<br/></small>\r\n         <small class=\"form-text text-muted\">Conditional Expression with type 'function'<br/></small>\r\n       <div v-if=\"digitalInfoFormGroup.controls.audioVisualRecordingGrid.errors\">\r\n         <small class=\"form-text text-danger\">{{digitalInfoFormGroup.controls.audioVisualRecordingGrid.errors.grid.message}}<br/></small>\t\r\n       </div>\r\n      </div>  \r\n    <div class=\"form-group\">\r\n        <label>Photograph GRid</label>\r\n        <input id=\"name\" class=\"form-control\" v-model=\"digitalInfoFormGroup.props.photographGrid\" type=\"text\" name=\"name\" />\r\n          <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Photograph GRid' then you need to add 'SoundRecording GRid' field input to 'A12425GABC1234002M'.<br/></small>\r\n         <small class=\"form-text text-muted\">Conditional Expression with type 'string'<br/></small>\r\n       <div v-if=\"digitalInfoFormGroup.controls.photographGrid.errors\">\r\n         <small class=\"form-text text-danger\">{{digitalInfoFormGroup.controls.photographGrid.errors.grid.message}}<br/></small>\t\r\n       </div>\r\n      </div>  \r\n    <div class=\"form-group\">\r\n        <label>GraphicImage GRid</label>\r\n        <input id=\"name\" class=\"form-control\" v-model=\"digitalInfoFormGroup.props.graphicImageGrid\" type=\"text\" name=\"name\" />\r\n          <small class=\"form-text text-muted\">Shows custom message.<br/></small>\r\n       <div v-if=\"digitalInfoFormGroup.controls.graphicImageGrid.errors\">\r\n         <small class=\"form-text text-danger\">{{digitalInfoFormGroup.controls.graphicImageGrid.errors.grid.message}}<br/></small>\t\r\n       </div>\r\n      </div>  \r\n    <div class=\"form-group\">\r\n        <label>VideoGraphic GRid</label>\r\n        <input id=\"name\" class=\"form-control\" v-model=\"digitalInfoFormGroup.props.videoGraphicGrid\" type=\"text\" name=\"name\" />\r\n          <small class=\"form-text text-muted\">Shows custom message based on message key.<br/></small>\r\n       <div v-if=\"digitalInfoFormGroup.controls.videoGraphicGrid.errors\">\r\n         <small class=\"form-text text-danger\">{{digitalInfoFormGroup.controls.videoGraphicGrid.errors.grid.message}}<br/></small>\t\r\n       </div>\r\n      </div>  \r\n       <button class=\"btn btn-primary\">Submit</button>\r\n     </form>\r\n  </div>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport { Component, Prop, Vue } from 'vue-property-decorator';\r\n\r\nimport { required,RxFormBuilder,IFormGroup } from \"@rxweb/reactive-forms\"\r\nimport { DigitalInfo } from './digitalInfo.model';\r\n\r\n@Component\r\nexport default class GridCompleteComponent extends Vue {\r\n digitalInfoFormGroup: IFormGroup<DigitalInfo>;\r\n\r\n formBuilder: RxFormBuilder = new RxFormBuilder();\r\n\r\n  constructor() {\r\n    super();\r\n    this.digitalInfoFormGroup = this.formBuilder.formGroup(DigitalInfo) as IFormGroup<DigitalInfo>;\r\n   }\r\n}\r\n</script> \r\n","html":null,"model":"import {  grid, } from   \"@rxweb/reactive-forms\"   \r\n\r\nexport class DigitalInfo {\r\n\r\n\t@grid() \r\n\tsoundRecordingGrid: string;\r\n\t\r\n\t\r\n\t@grid({conditionalExpression:(x,y) => x.soundRecordingGrid == \"A12425GABC1234002M\" }) \r\n\taudioVisualRecordingGrid: string;\r\n\t\r\n\t\r\n\t//If you want to apply conditional expression of type 'string'\r\n\t@grid({conditionalExpression:'x => x.soundRecordingGrid ==\"A12425GABC1234002M\"' }) \r\n\tphotographGrid: string;\r\n\t\r\n\t\r\n\t@grid({message:'This is Not valid GRid' }) \r\n\tgraphicImageGrid: string;\r\n\t\r\n\t\r\n\t@grid({messageKey:'gridMessageKey' }) \r\n\tvideoGraphicGrid: string;\r\n\t\r\n\t\r\n}\r\n","modelName":null,"json":{}},"conditionalExpression":{"notes":null,"component":"\r\n<template>\r\n  <div class=\"col-lg-12\">\r\n     <form>\r\n       <div class=\"form-group\">\r\n        <label>SoundRecording GRid</label>\r\n        <input id=\"name\" class=\"form-control\" v-model=\"digitalInfoFormGroup.props.soundRecordingGrid\" type=\"text\" name=\"name\" />\r\n        <div v-if=\"digitalInfoFormGroup.controls.soundRecordingGrid.errors\">\r\n         <small class=\"form-text text-danger\">{{digitalInfoFormGroup.controls.soundRecordingGrid.errors.grid.message}}<br/></small>\t\r\n       </div>\r\n      </div>  \r\n    <div class=\"form-group\">\r\n        <label>Photograph GRid</label>\r\n        <input id=\"name\" class=\"form-control\" v-model=\"digitalInfoFormGroup.props.photographGrid\" type=\"text\" name=\"name\" />\r\n          <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Photograph GRid' then you need to add 'SoundRecording GRid' field input to 'A12425GABC1234002M'.<br/></small>\r\n         <small class=\"form-text text-muted\">Conditional Expression with type 'string'<br/></small>\r\n       <div v-if=\"digitalInfoFormGroup.controls.photographGrid.errors\">\r\n         <small class=\"form-text text-danger\">{{digitalInfoFormGroup.controls.photographGrid.errors.grid.message}}<br/></small>\t\r\n       </div>\r\n      </div>  \r\n    <div class=\"form-group\">\r\n        <label>AudioVisualRecording GRid</label>\r\n        <input id=\"name\" class=\"form-control\" v-model=\"digitalInfoFormGroup.props.audioVisualRecordingGrid\" type=\"text\" name=\"name\" />\r\n          <small class=\"form-text text-muted\">If you want to apply conditional validation on 'AudioVisualRecording GRid' then you need to add 'SoundRecording GRid' field input to 'A12425GABC1234002M'.<br/></small>\r\n         <small class=\"form-text text-muted\">Conditional Expression with type 'function'<br/></small>\r\n       <div v-if=\"digitalInfoFormGroup.controls.audioVisualRecordingGrid.errors\">\r\n         <small class=\"form-text text-danger\">{{digitalInfoFormGroup.controls.audioVisualRecordingGrid.errors.grid.message}}<br/></small>\t\r\n       </div>\r\n      </div>  \r\n       <button class=\"btn btn-primary\">Submit</button>\r\n     </form>\r\n  </div>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport { Component, Prop, Vue } from 'vue-property-decorator';\r\n\r\nimport { required,RxFormBuilder,IFormGroup } from \"@rxweb/reactive-forms\"\r\nimport { DigitalInfo } from './digitalInfo.model';\r\n\r\n@Component\r\nexport default class GridConditionalExpressionComponent extends Vue {\r\n digitalInfoFormGroup: IFormGroup<DigitalInfo>;\r\n\r\n formBuilder: RxFormBuilder = new RxFormBuilder();\r\n\r\n  constructor() {\r\n    super();\r\n    this.digitalInfoFormGroup = this.formBuilder.formGroup(DigitalInfo) as IFormGroup<DigitalInfo>;\r\n   }\r\n}\r\n</script> \r\n","html":null,"model":"import {  grid, } from   \"@rxweb/reactive-forms\"   \r\n\r\nexport class DigitalInfo {\r\n\r\n\t@grid() \r\n\tsoundRecordingGrid: string;\r\n\t\r\n\t\r\n\t//If you want to apply conditional expression of type 'string'\r\n\t@grid({conditionalExpression:'x => x.soundRecordingGrid ==\"A12425GABC1234002M\"' }) \r\n\tphotographGrid: string;\r\n\t\r\n\t\r\n\t@grid({conditionalExpression:(x,y) => x.soundRecordingGrid == \"A12425GABC1234002M\" }) \r\n\taudioVisualRecordingGrid: string;\r\n\t\r\n\t\r\n}\r\n","modelName":null,"json":{}},"message":{"notes":null,"component":"\r\n<template>\r\n  <div class=\"col-lg-12\">\r\n     <form>\r\n       <div class=\"form-group\">\r\n        <label>GraphicImage GRid</label>\r\n        <input id=\"name\" class=\"form-control\" v-model=\"digitalInfoFormGroup.props.graphicImageGrid\" type=\"text\" name=\"name\" />\r\n          <small class=\"form-text text-muted\">Shows custom message.<br/></small>\r\n       <div v-if=\"digitalInfoFormGroup.controls.graphicImageGrid.errors\">\r\n         <small class=\"form-text text-danger\">{{digitalInfoFormGroup.controls.graphicImageGrid.errors.grid.message}}<br/></small>\t\r\n       </div>\r\n      </div>  \r\n       <button class=\"btn btn-primary\">Submit</button>\r\n     </form>\r\n  </div>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport { Component, Prop, Vue } from 'vue-property-decorator';\r\n\r\nimport { required,RxFormBuilder,IFormGroup } from \"@rxweb/reactive-forms\"\r\nimport { DigitalInfo } from './digitalInfo.model';\r\n\r\n@Component\r\nexport default class GridMessageComponent extends Vue {\r\n digitalInfoFormGroup: IFormGroup<DigitalInfo>;\r\n\r\n formBuilder: RxFormBuilder = new RxFormBuilder();\r\n\r\n  constructor() {\r\n    super();\r\n    this.digitalInfoFormGroup = this.formBuilder.formGroup(DigitalInfo) as IFormGroup<DigitalInfo>;\r\n   }\r\n}\r\n</script> \r\n","html":null,"model":"import {  grid, } from   \"@rxweb/reactive-forms\"   \r\n\r\nexport class DigitalInfo {\r\n\r\n\t@grid({message:'This is Not valid GRid' }) \r\n\tgraphicImageGrid: string;\r\n\t\r\n\t\r\n}\r\n","modelName":null,"json":{}},"messageKey":{"notes":null,"component":"\r\n<template>\r\n  <div class=\"col-lg-12\">\r\n     <form>\r\n       <div class=\"form-group\">\r\n        <label>VideoGraphic GRid</label>\r\n        <input id=\"name\" class=\"form-control\" v-model=\"digitalInfoFormGroup.props.videoGraphicGrid\" type=\"text\" name=\"name\" />\r\n          <small class=\"form-text text-muted\">Shows custom message based on message key.<br/></small>\r\n       <div v-if=\"digitalInfoFormGroup.controls.videoGraphicGrid.errors\">\r\n         <small class=\"form-text text-danger\">{{digitalInfoFormGroup.controls.videoGraphicGrid.errors.grid.message}}<br/></small>\t\r\n       </div>\r\n      </div>  \r\n       <button class=\"btn btn-primary\">Submit</button>\r\n     </form>\r\n  </div>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport { Component, Prop, Vue } from 'vue-property-decorator';\r\n\r\nimport { required,RxFormBuilder,IFormGroup } from \"@rxweb/reactive-forms\"\r\nimport { DigitalInfo } from './digitalInfo.model';\r\n\r\n@Component\r\nexport default class GridMessageKeyComponent extends Vue {\r\n digitalInfoFormGroup: IFormGroup<DigitalInfo>;\r\n\r\n formBuilder: RxFormBuilder = new RxFormBuilder();\r\n\r\n  constructor() {\r\n    super();\r\n    this.digitalInfoFormGroup = this.formBuilder.formGroup(DigitalInfo) as IFormGroup<DigitalInfo>;\r\n   }\r\n}\r\n</script> \r\n","html":null,"model":"import {  grid, } from   \"@rxweb/reactive-forms\"   \r\n\r\nexport class DigitalInfo {\r\n\r\n\t@grid({messageKey:'gridMessageKey' }) \r\n\tvideoGraphicGrid: string;\r\n\t\r\n\t\r\n}\r\n","modelName":null,"json":{}},"add":{"notes":null,"component":"\r\n<template>\r\n  <div class=\"col-lg-12\">\r\n     <form>\r\n       <div class=\"form-group\">\r\n        <label>SoundRecording GRid</label>\r\n        <input id=\"name\" class=\"form-control\" v-model=\"digitalInfoFormGroup.props.soundRecordingGrid\" type=\"text\" name=\"name\" />\r\n        <div v-if=\"digitalInfoFormGroup.controls.soundRecordingGrid.errors\">\r\n         <small class=\"form-text text-danger\">{{digitalInfoFormGroup.controls.soundRecordingGrid.errors.grid.message}}<br/></small>\t\r\n       </div>\r\n      </div>  \r\n       <button class=\"btn btn-primary\">Submit</button>\r\n     </form>\r\n  </div>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport { Component, Prop, Vue } from 'vue-property-decorator';\r\n\r\nimport { required,RxFormBuilder,IFormGroup } from \"@rxweb/reactive-forms\"\r\nimport { DigitalInfo } from './digitalInfo.model';\r\n\r\n@Component\r\nexport default class GridAddComponent extends Vue {\r\n digitalInfoFormGroup: IFormGroup<DigitalInfo>;\r\n\r\n formBuilder: RxFormBuilder = new RxFormBuilder();\r\n\r\n  constructor() {\r\n    super();\r\n    this.digitalInfoFormGroup = this.formBuilder.formGroup(DigitalInfo) as IFormGroup<DigitalInfo>;\r\n   }\r\n}\r\n</script> \r\n","html":null,"model":"import {  grid, } from   \"@rxweb/reactive-forms\"   \r\n\r\nexport class DigitalInfo {\r\n\r\n\t@grid() \r\n\tsoundRecordingGrid: string;\r\n\t\r\n\t\r\n}\r\n","modelName":null,"json":{}},"edit":{"notes":null,"component":"\r\n<template>\r\n  <div class=\"col-lg-12\">\r\n     <form>\r\n       <div class=\"form-group\">\r\n        <label>SoundRecording GRid</label>\r\n        <input id=\"name\" class=\"form-control\" v-model=\"digitalInfoFormGroup.props.soundRecordingGrid\" type=\"text\" name=\"name\" />\r\n        <div v-if=\"digitalInfoFormGroup.controls.soundRecordingGrid.errors\">\r\n         <small class=\"form-text text-danger\">{{digitalInfoFormGroup.controls.soundRecordingGrid.errors.grid.message}}<br/></small>\t\r\n       </div>\r\n      </div>  \r\n       <button class=\"btn btn-primary\">Submit</button>\r\n     </form>\r\n  </div>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport { Component, Prop, Vue } from 'vue-property-decorator';\r\n\r\nimport { required,RxFormBuilder,IFormGroup } from \"@rxweb/reactive-forms\"\r\nimport { DigitalInfo } from './digitalInfo.model';\r\n\r\n@Component\r\nexport default class GridEditComponent extends Vue {\r\n digitalInfoFormGroup: IFormGroup<DigitalInfo>;\r\n\r\n formBuilder: RxFormBuilder = new RxFormBuilder();\r\n\r\n  constructor() {\r\n    super();\r\n    this.digitalInfoFormGroup = this.formBuilder.formGroup(DigitalInfo) as IFormGroup<DigitalInfo>;\r\n   }\r\n}\r\n</script> \r\n","html":null,"model":"import {  grid, } from   \"@rxweb/reactive-forms\"   \r\n\r\nexport class DigitalInfo {\r\n\r\n\t@grid() \r\n\tsoundRecordingGrid: string;\r\n\t\r\n\t\r\n}\r\n","modelName":null,"json":{}}}