{"complete":{"notes":null,"component":"\r\n<template>\r\n  <div class=\"col-lg-12\">\r\n     <form>\r\n       <div class=\"form-group\">\r\n        <label>User Name</label>\r\n        <input id=\"name\" class=\"form-control\" v-model=\"userFormGroup.props.userName\" type=\"text\" name=\"name\" />\r\n          <small class=\"form-text text-muted\">It checked that username match alpha regex or not<br/></small>\r\n       <div v-if=\"userFormGroup.controls.userName.errors\">\r\n         <small class=\"form-text text-danger\">{{userFormGroup.controls.userName.errors.pattern.message}}<br/></small>\t\r\n       </div>\r\n      </div>  \r\n    <div class=\"form-group\">\r\n        <label>Zip Code</label>\r\n        <input id=\"name\" class=\"form-control\" v-model=\"userFormGroup.props.zipCode\" type=\"text\" name=\"name\" />\r\n          <small class=\"form-text text-muted\">It checked that zipcode match zipcode regex or not <br/></small>\r\n         <small class=\"form-text text-muted\">Shows custom message<br/></small>\r\n       <div v-if=\"userFormGroup.controls.zipCode.errors\">\r\n         <small class=\"form-text text-danger\">{{userFormGroup.controls.zipCode.errors.pattern.message}}<br/></small>\t\r\n       </div>\r\n      </div>  \r\n    <div class=\"form-group\">\r\n        <label>Contact Number</label>\r\n        <input id=\"name\" class=\"form-control\" v-model=\"userFormGroup.props.contactNumber\" type=\"text\" name=\"name\" />\r\n          <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Contact Number' then you need to add 'UserName' input as 'Bharat'.<br/></small>\r\n         <small class=\"form-text text-muted\">Conditional Expression with type 'function'<br/></small>\r\n       <div v-if=\"userFormGroup.controls.contactNumber.errors\">\r\n         <small class=\"form-text text-danger\">{{userFormGroup.controls.contactNumber.errors.pattern.message}}<br/></small>\t\r\n       </div>\r\n      </div>  \r\n    <div class=\"form-group\">\r\n        <label>Age</label>\r\n        <input id=\"name\" class=\"form-control\" v-model=\"userFormGroup.props.age\" type=\"text\" name=\"name\" />\r\n          <small class=\"form-text text-muted\">It checked that age match with digit regex or not and it conditionaly applied when userName is Bharat<br/></small>\r\n         <small class=\"form-text text-muted\">Conditional Expression with type 'string'<br/></small>\r\n       <div v-if=\"userFormGroup.controls.age.errors\">\r\n         <small class=\"form-text text-danger\">{{userFormGroup.controls.age.errors.pattern.message}}<br/></small>\t\r\n       </div>\r\n      </div>  \r\n    <div class=\"form-group\">\r\n        <label>Pin Code</label>\r\n        <input id=\"name\" class=\"form-control\" v-model=\"userFormGroup.props.pinCode\" type=\"text\" name=\"name\" />\r\n          <small class=\"form-text text-muted\">Shows custom message based on message key<br/></small>\r\n       <div v-if=\"userFormGroup.controls.pinCode.errors\">\r\n         <small class=\"form-text text-danger\">{{userFormGroup.controls.pinCode.errors.pattern.message}}<br/></small>\t\r\n       </div>\r\n      </div>  \r\n       <button class=\"btn btn-primary\">Submit</button>\r\n     </form>\r\n  </div>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport { Component, Prop, Vue } from 'vue-property-decorator';\r\n\r\nimport { required,RxFormBuilder,IFormGroup } from \"@rxweb/reactive-forms\"\r\nimport { User } from './user.model';\r\n\r\n@Component\r\nexport default class PatternCompleteComponent extends Vue {\r\n userFormGroup: IFormGroup<User>;\r\n\r\n formBuilder: RxFormBuilder = new RxFormBuilder();\r\n\r\n  constructor() {\r\n    super();\r\n    this.userFormGroup = this.formBuilder.formGroup(User) as IFormGroup<User>;\r\n   }\r\n}\r\n</script> \r\n","html":null,"model":"import {  pattern, } from   \"@rxweb/reactive-forms\"   \r\n\r\nexport class User {\r\n\r\n\t@pattern({expression:{'onlyAlpha': /^[A-Za-z]+$/} }) \r\n\tuserName: string;\r\n\t\r\n\t\r\n\t@pattern({expression:{'zipCode':/^[0-9]{5}(?:-[0-9]{4})?$/ }  ,message:'Zip code should match 12345 or 12345-6789' }) \r\n\tzipCode: string;\r\n\t\r\n\t\r\n\t//If you want to apply conditional expression of type 'function'\r\n\t@pattern({expression:{'onlyDigit': /^[0-9]*$/}  ,conditionalExpression:(x,y) => x.userName == \"Bharat\"  }) \r\n\tcontactNumber: number;\r\n\t\r\n\t\r\n\t//If you want to apply conditional expression of type 'string'\r\n\t@pattern({expression:{'onlyDigit': /^[0-9]*$/}  ,conditionalExpression:'x => x.userName==\"Bharat\"' }) \r\n\tage: string;\r\n\t\r\n\t\r\n\t@pattern({expression:{'pinCode':/^[1-9][0-9]{5}$/ }  ,messageKey:'patternMessageKey' }) \r\n\tpinCode: string;\r\n\t\r\n\t\r\n}\r\n","modelName":null,"json":{}},"expression":{"notes":null,"component":"\r\n<template>\r\n  <div class=\"col-lg-12\">\r\n     <form>\r\n       <div class=\"form-group\">\r\n        <label>User Name</label>\r\n        <input id=\"name\" class=\"form-control\" v-model=\"userFormGroup.props.userName\" type=\"text\" name=\"name\" />\r\n          <small class=\"form-text text-muted\">It checked that username match alpha regex or not<br/></small>\r\n       <div v-if=\"userFormGroup.controls.userName.errors\">\r\n         <small class=\"form-text text-danger\">{{userFormGroup.controls.userName.errors.pattern.message}}<br/></small>\t\r\n       </div>\r\n      </div>  \r\n       <button class=\"btn btn-primary\">Submit</button>\r\n     </form>\r\n  </div>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport { Component, Prop, Vue } from 'vue-property-decorator';\r\n\r\nimport { required,RxFormBuilder,IFormGroup } from \"@rxweb/reactive-forms\"\r\nimport { User } from './user.model';\r\n\r\n@Component\r\nexport default class PatternExpressionComponent extends Vue {\r\n userFormGroup: IFormGroup<User>;\r\n\r\n formBuilder: RxFormBuilder = new RxFormBuilder();\r\n\r\n  constructor() {\r\n    super();\r\n    this.userFormGroup = this.formBuilder.formGroup(User) as IFormGroup<User>;\r\n   }\r\n}\r\n</script> \r\n","html":null,"model":"import {  pattern, } from   \"@rxweb/reactive-forms\"   \r\n\r\nexport class User {\r\n\r\n\t@pattern({expression:{'onlyAlpha': /^[A-Za-z]+$/} }) \r\n\tuserName: string;\r\n\t\r\n\t\r\n}\r\n","modelName":null,"json":{}},"message":{"notes":null,"component":"\r\n<template>\r\n  <div class=\"col-lg-12\">\r\n     <form>\r\n       <div class=\"form-group\">\r\n        <label>Zip Code</label>\r\n        <input id=\"name\" class=\"form-control\" v-model=\"userFormGroup.props.zipCode\" type=\"text\" name=\"name\" />\r\n          <small class=\"form-text text-muted\">It checked that zipcode match zipcode regex or not <br/></small>\r\n         <small class=\"form-text text-muted\">Shows custom message<br/></small>\r\n       <div v-if=\"userFormGroup.controls.zipCode.errors\">\r\n         <small class=\"form-text text-danger\">{{userFormGroup.controls.zipCode.errors.pattern.message}}<br/></small>\t\r\n       </div>\r\n      </div>  \r\n       <button class=\"btn btn-primary\">Submit</button>\r\n     </form>\r\n  </div>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport { Component, Prop, Vue } from 'vue-property-decorator';\r\n\r\nimport { required,RxFormBuilder,IFormGroup } from \"@rxweb/reactive-forms\"\r\nimport { User } from './user.model';\r\n\r\n@Component\r\nexport default class PatternMessageComponent extends Vue {\r\n userFormGroup: IFormGroup<User>;\r\n\r\n formBuilder: RxFormBuilder = new RxFormBuilder();\r\n\r\n  constructor() {\r\n    super();\r\n    this.userFormGroup = this.formBuilder.formGroup(User) as IFormGroup<User>;\r\n   }\r\n}\r\n</script> \r\n","html":null,"model":"import {  pattern, } from   \"@rxweb/reactive-forms\"   \r\n\r\nexport class User {\r\n\r\n\t@pattern({expression:{'zipCode':/^[0-9]{5}(?:-[0-9]{4})?$/ }  ,message:'Zip code should match 12345 or 12345-6789' }) \r\n\tzipCode: string;\r\n\t\r\n\t\r\n}\r\n","modelName":null,"json":{}},"conditionalExpression":{"notes":null,"component":"\r\n<template>\r\n  <div class=\"col-lg-12\">\r\n     <form>\r\n       <div class=\"form-group\">\r\n        <label>User Name</label>\r\n        <input id=\"name\" class=\"form-control\" v-model=\"userFormGroup.props.userName\" type=\"text\" name=\"name\" />\r\n          <small class=\"form-text text-muted\">It checked that username match alpha regex or not<br/></small>\r\n       <div v-if=\"userFormGroup.controls.userName.errors\">\r\n         <small class=\"form-text text-danger\">{{userFormGroup.controls.userName.errors.pattern.message}}<br/></small>\t\r\n       </div>\r\n      </div>  \r\n    <div class=\"form-group\">\r\n        <label>Age</label>\r\n        <input id=\"name\" class=\"form-control\" v-model=\"userFormGroup.props.age\" type=\"text\" name=\"name\" />\r\n          <small class=\"form-text text-muted\">It checked that age match with digit regex or not and it conditionaly applied when userName is Bharat<br/></small>\r\n         <small class=\"form-text text-muted\">Conditional Expression with type 'string'<br/></small>\r\n       <div v-if=\"userFormGroup.controls.age.errors\">\r\n         <small class=\"form-text text-danger\">{{userFormGroup.controls.age.errors.pattern.message}}<br/></small>\t\r\n       </div>\r\n      </div>  \r\n    <div class=\"form-group\">\r\n        <label>Contact Number</label>\r\n        <input id=\"name\" class=\"form-control\" v-model=\"userFormGroup.props.contactNumber\" type=\"text\" name=\"name\" />\r\n          <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Contact Number' then you need to add 'UserName' input as 'Bharat'.<br/></small>\r\n         <small class=\"form-text text-muted\">Conditional Expression with type 'function'<br/></small>\r\n       <div v-if=\"userFormGroup.controls.contactNumber.errors\">\r\n         <small class=\"form-text text-danger\">{{userFormGroup.controls.contactNumber.errors.pattern.message}}<br/></small>\t\r\n       </div>\r\n      </div>  \r\n       <button class=\"btn btn-primary\">Submit</button>\r\n     </form>\r\n  </div>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport { Component, Prop, Vue } from 'vue-property-decorator';\r\n\r\nimport { required,RxFormBuilder,IFormGroup } from \"@rxweb/reactive-forms\"\r\nimport { User } from './user.model';\r\n\r\n@Component\r\nexport default class PatternConditionalExpressionComponent extends Vue {\r\n userFormGroup: IFormGroup<User>;\r\n\r\n formBuilder: RxFormBuilder = new RxFormBuilder();\r\n\r\n  constructor() {\r\n    super();\r\n    this.userFormGroup = this.formBuilder.formGroup(User) as IFormGroup<User>;\r\n   }\r\n}\r\n</script> \r\n","html":null,"model":"import {  pattern, } from   \"@rxweb/reactive-forms\"   \r\n\r\nexport class User {\r\n\r\n\t@pattern({expression:{'onlyAlpha': /^[A-Za-z]+$/} }) \r\n\tuserName: string;\r\n\t\r\n\t\r\n\t//If you want to apply conditional expression of type 'string'\r\n\t@pattern({expression:{'onlyDigit': /^[0-9]*$/}  ,conditionalExpression:'x => x.userName==\"Bharat\"' }) \r\n\tage: string;\r\n\t\r\n\t\r\n\t//If you want to apply conditional expression of type 'function'\r\n\t@pattern({expression:{'onlyDigit': /^[0-9]*$/}  ,conditionalExpression:(x,y) => x.userName == \"Bharat\"  }) \r\n\tcontactNumber: number;\r\n\t\r\n\t\r\n}\r\n","modelName":null,"json":{}},"messageKey":{"notes":null,"component":"\r\n<template>\r\n  <div class=\"col-lg-12\">\r\n     <form>\r\n       <div class=\"form-group\">\r\n        <label>Pin Code</label>\r\n        <input id=\"name\" class=\"form-control\" v-model=\"userFormGroup.props.pinCode\" type=\"text\" name=\"name\" />\r\n          <small class=\"form-text text-muted\">Shows custom message based on message key<br/></small>\r\n       <div v-if=\"userFormGroup.controls.pinCode.errors\">\r\n         <small class=\"form-text text-danger\">{{userFormGroup.controls.pinCode.errors.pattern.message}}<br/></small>\t\r\n       </div>\r\n      </div>  \r\n       <button class=\"btn btn-primary\">Submit</button>\r\n     </form>\r\n  </div>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport { Component, Prop, Vue } from 'vue-property-decorator';\r\n\r\nimport { required,RxFormBuilder,IFormGroup } from \"@rxweb/reactive-forms\"\r\nimport { User } from './user.model';\r\n\r\n@Component\r\nexport default class PatternMessageKeyComponent extends Vue {\r\n userFormGroup: IFormGroup<User>;\r\n\r\n formBuilder: RxFormBuilder = new RxFormBuilder();\r\n\r\n  constructor() {\r\n    super();\r\n    this.userFormGroup = this.formBuilder.formGroup(User) as IFormGroup<User>;\r\n   }\r\n}\r\n</script> \r\n","html":null,"model":"import {  pattern, } from   \"@rxweb/reactive-forms\"   \r\n\r\nexport class User {\r\n\r\n\t@pattern({expression:{'pinCode':/^[1-9][0-9]{5}$/ }  ,messageKey:'patternMessageKey' }) \r\n\tpinCode: string;\r\n\t\r\n\t\r\n}\r\n","modelName":null,"json":{}},"add":{"notes":null,"component":"\r\n<template>\r\n  <div class=\"col-lg-12\">\r\n     <form>\r\n       <div class=\"form-group\">\r\n        <label>User Name</label>\r\n        <input id=\"name\" class=\"form-control\" v-model=\"userFormGroup.props.userName\" type=\"text\" name=\"name\" />\r\n          <small class=\"form-text text-muted\">It checked that username match alpha regex or not<br/></small>\r\n       <div v-if=\"userFormGroup.controls.userName.errors\">\r\n         <small class=\"form-text text-danger\">{{userFormGroup.controls.userName.errors.pattern.message}}<br/></small>\t\r\n       </div>\r\n      </div>  \r\n       <button class=\"btn btn-primary\">Submit</button>\r\n     </form>\r\n  </div>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport { Component, Prop, Vue } from 'vue-property-decorator';\r\n\r\nimport { required,RxFormBuilder,IFormGroup } from \"@rxweb/reactive-forms\"\r\nimport { User } from './user.model';\r\n\r\n@Component\r\nexport default class PatternAddComponent extends Vue {\r\n userFormGroup: IFormGroup<User>;\r\n\r\n formBuilder: RxFormBuilder = new RxFormBuilder();\r\n\r\n  constructor() {\r\n    super();\r\n    this.userFormGroup = this.formBuilder.formGroup(User) as IFormGroup<User>;\r\n   }\r\n}\r\n</script> \r\n","html":null,"model":"import {  pattern, } from   \"@rxweb/reactive-forms\"   \r\n\r\nexport class User {\r\n\r\n\t@pattern({expression:{'onlyAlpha': /^[A-Za-z]+$/} }) \r\n\tuserName: string;\r\n\t\r\n\t\r\n}\r\n","modelName":null,"json":{}},"edit":{"notes":null,"component":"\r\n<template>\r\n  <div class=\"col-lg-12\">\r\n     <form>\r\n       <div class=\"form-group\">\r\n        <label>User Name</label>\r\n        <input id=\"name\" class=\"form-control\" v-model=\"userFormGroup.props.userName\" type=\"text\" name=\"name\" />\r\n          <small class=\"form-text text-muted\">It checked that username match alpha regex or not<br/></small>\r\n       <div v-if=\"userFormGroup.controls.userName.errors\">\r\n         <small class=\"form-text text-danger\">{{userFormGroup.controls.userName.errors.pattern.message}}<br/></small>\t\r\n       </div>\r\n      </div>  \r\n       <button class=\"btn btn-primary\">Submit</button>\r\n     </form>\r\n  </div>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport { Component, Prop, Vue } from 'vue-property-decorator';\r\n\r\nimport { required,RxFormBuilder,IFormGroup } from \"@rxweb/reactive-forms\"\r\nimport { User } from './user.model';\r\n\r\n@Component\r\nexport default class PatternEditComponent extends Vue {\r\n userFormGroup: IFormGroup<User>;\r\n\r\n formBuilder: RxFormBuilder = new RxFormBuilder();\r\n\r\n  constructor() {\r\n    super();\r\n    this.userFormGroup = this.formBuilder.formGroup(User) as IFormGroup<User>;\r\n   }\r\n}\r\n</script> \r\n","html":null,"model":"import {  pattern, } from   \"@rxweb/reactive-forms\"   \r\n\r\nexport class User {\r\n\r\n\t@pattern({expression:{'onlyAlpha': /^[A-Za-z]+$/} }) \r\n\tuserName: string;\r\n\t\r\n\t\r\n}\r\n","modelName":null,"json":{}}}