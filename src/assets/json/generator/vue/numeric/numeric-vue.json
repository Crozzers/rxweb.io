{"complete":{"notes":null,"component":"\r\n<template>\r\n  <div class=\"col-lg-12\">\r\n     <form>\r\n       <div class=\"form-group\">\r\n        <label>Data Type</label>\r\n        <input id=\"name\" class=\"form-control\" v-model=\"userInfoFormGroup.props.dataType\" type=\"text\" name=\"name\" />\r\n        <div v-if=\"userInfoFormGroup.controls.dataType.errors\">\r\n         <small class=\"form-text text-danger\">{{userInfoFormGroup.controls.dataType.errors.numeric.message}}<br/></small>\t\r\n       </div>\r\n      </div>  \r\n    <div class=\"form-group\">\r\n        <label>Negative Number</label>\r\n        <input id=\"name\" class=\"form-control\" v-model=\"userInfoFormGroup.props.negativeNumber\" type=\"text\" name=\"name\" />\r\n          <small class=\"form-text text-muted\">you can enter only a negative number<br/></small>\r\n       <div v-if=\"userInfoFormGroup.controls.negativeNumber.errors\">\r\n         <small class=\"form-text text-danger\">{{userInfoFormGroup.controls.negativeNumber.errors.numeric.message}}<br/></small>\t\r\n       </div>\r\n      </div>  \r\n    <div class=\"form-group\">\r\n        <label>Total Amount</label>\r\n        <input id=\"name\" class=\"form-control\" v-model=\"userInfoFormGroup.props.totalAmount\" type=\"text\" name=\"name\" />\r\n        <div v-if=\"userInfoFormGroup.controls.totalAmount.errors\">\r\n         <small class=\"form-text text-danger\">{{userInfoFormGroup.controls.totalAmount.errors.numeric.message}}<br/></small>\t\r\n       </div>\r\n      </div>  \r\n    <div class=\"form-group\">\r\n        <label>Decimal Number</label>\r\n        <input id=\"name\" class=\"form-control\" v-model=\"userInfoFormGroup.props.decimalNumber\" type=\"text\" name=\"name\" />\r\n          <small class=\"form-text text-muted\">you can enter only a positive decimal number<br/></small>\r\n       <div v-if=\"userInfoFormGroup.controls.decimalNumber.errors\">\r\n         <small class=\"form-text text-danger\">{{userInfoFormGroup.controls.decimalNumber.errors.numeric.message}}<br/></small>\t\r\n       </div>\r\n      </div>  \r\n    <div class=\"form-group\">\r\n        <label>Integer Number</label>\r\n        <input id=\"name\" class=\"form-control\" v-model=\"userInfoFormGroup.props.integerNumber\" type=\"text\" name=\"name\" />\r\n          <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Integer Number' then you need to add 'Data Type' input as 'Integer'.<br/></small>\r\n         <small class=\"form-text text-muted\">Conditional Expression with type 'function'<br/></small>\r\n       <div v-if=\"userInfoFormGroup.controls.integerNumber.errors\">\r\n         <small class=\"form-text text-danger\">{{userInfoFormGroup.controls.integerNumber.errors.numeric.message}}<br/></small>\t\r\n       </div>\r\n      </div>  \r\n    <div class=\"form-group\">\r\n        <label>Real Number</label>\r\n        <input id=\"name\" class=\"form-control\" v-model=\"userInfoFormGroup.props.realNumber\" type=\"text\" name=\"name\" />\r\n          <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Real Number' then you need to add 'Data Type' input as 'Real'.<br/></small>\r\n         <small class=\"form-text text-muted\">Conditional Expression with type 'string'<br/></small>\r\n       <div v-if=\"userInfoFormGroup.controls.realNumber.errors\">\r\n         <small class=\"form-text text-danger\">{{userInfoFormGroup.controls.realNumber.errors.numeric.message}}<br/></small>\t\r\n       </div>\r\n      </div>  \r\n    <div class=\"form-group\">\r\n        <label>Positive Number</label>\r\n        <input id=\"name\" class=\"form-control\" v-model=\"userInfoFormGroup.props.positiveNumber\" type=\"text\" name=\"name\" />\r\n          <small class=\"form-text text-muted\">you can enter only a positive number<br/></small>\r\n         <small class=\"form-text text-muted\">Shows custom message.<br/></small>\r\n       <div v-if=\"userInfoFormGroup.controls.positiveNumber.errors\">\r\n         <small class=\"form-text text-danger\">{{userInfoFormGroup.controls.positiveNumber.errors.numeric.message}}<br/></small>\t\r\n       </div>\r\n      </div>  \r\n    <div class=\"form-group\">\r\n        <label>Positive Non Decimal Number</label>\r\n        <input id=\"name\" class=\"form-control\" v-model=\"userInfoFormGroup.props.positiveNonDecimalNumber\" type=\"text\" name=\"name\" />\r\n          <small class=\"form-text text-muted\">Shows custom message based on message key<br/></small>\r\n       <div v-if=\"userInfoFormGroup.controls.positiveNonDecimalNumber.errors\">\r\n         <small class=\"form-text text-danger\">{{userInfoFormGroup.controls.positiveNonDecimalNumber.errors.numeric.message}}<br/></small>\t\r\n       </div>\r\n      </div>  \r\n       <button class=\"btn btn-primary\">Submit</button>\r\n     </form>\r\n  </div>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport { Component, Prop, Vue } from 'vue-property-decorator';\r\n\r\nimport { required,RxFormBuilder,IFormGroup } from \"@rxweb/reactive-forms\"\r\nimport { UserInfo } from './userInfo.model';\r\n\r\n@Component\r\nexport default class NumericCompleteComponent extends Vue {\r\n userInfoFormGroup: IFormGroup<UserInfo>;\r\n\r\n formBuilder: RxFormBuilder = new RxFormBuilder();\r\n\r\n  constructor() {\r\n    super();\r\n    this.userInfoFormGroup = this.formBuilder.formGroup(UserInfo) as IFormGroup<UserInfo>;\r\n   }\r\n}\r\n</script> \r\n","html":null,"model":"import {  numeric,prop, NumericValueType, } from   \"@rxweb/reactive-forms\"   \r\n\r\nexport class UserInfo {\r\n\r\n\t@prop()\r\n\tdataType: string;\r\n\r\n\t@numeric({acceptValue:NumericValueType.NegativeNumber }) \r\n\tnegativeNumber: number;\r\n\t\r\n\t\r\n\t@numeric({isFormat:true }) \r\n\ttotalAmount: number;\r\n\t\r\n\t\r\n\t@numeric({allowDecimal:true }) \r\n\tdecimalNumber: number;\r\n\t\r\n\t\r\n\t//If you want to apply conditional expression of type 'function'\r\n\t@numeric({acceptValue:NumericValueType.PositiveNumber  ,conditionalExpression:(x,y) => x.dataType == \"Integer\"  }) \r\n\tintegerNumber: number;\r\n\t\r\n\t\r\n\t//If you want to apply conditional expression of type 'string'\r\n\t@numeric({acceptValue:NumericValueType.Both  ,conditionalExpression:'x => x.dataType == \"Real\"' }) \r\n\trealNumber: number;\r\n\t\r\n\t\r\n\t@numeric({message:'{{0}} is not a positive number' }) \r\n\tpositiveNumber: number;\r\n\t\r\n\t\r\n\t@numeric({messageKey:'numericMessageKey' }) \r\n\tpositiveNonDecimalNumber: number;\r\n\t\r\n\t\r\n}\r\n","modelName":null,"json":{}},"acceptValue":{"notes":null,"component":"\r\n<template>\r\n  <div class=\"col-lg-12\">\r\n     <form>\r\n       <div class=\"form-group\">\r\n        <label>Negative Number</label>\r\n        <input id=\"name\" class=\"form-control\" v-model=\"userInfoFormGroup.props.negativeNumber\" type=\"text\" name=\"name\" />\r\n          <small class=\"form-text text-muted\">you can enter only a negative number<br/></small>\r\n       <div v-if=\"userInfoFormGroup.controls.negativeNumber.errors\">\r\n         <small class=\"form-text text-danger\">{{userInfoFormGroup.controls.negativeNumber.errors.numeric.message}}<br/></small>\t\r\n       </div>\r\n      </div>  \r\n       <button class=\"btn btn-primary\">Submit</button>\r\n     </form>\r\n  </div>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport { Component, Prop, Vue } from 'vue-property-decorator';\r\n\r\nimport { required,RxFormBuilder,IFormGroup } from \"@rxweb/reactive-forms\"\r\nimport { UserInfo } from './userInfo.model';\r\n\r\n@Component\r\nexport default class NumericAcceptValueComponent extends Vue {\r\n userInfoFormGroup: IFormGroup<UserInfo>;\r\n\r\n formBuilder: RxFormBuilder = new RxFormBuilder();\r\n\r\n  constructor() {\r\n    super();\r\n    this.userInfoFormGroup = this.formBuilder.formGroup(UserInfo) as IFormGroup<UserInfo>;\r\n   }\r\n}\r\n</script> \r\n","html":null,"model":"import {  numeric, NumericValueType, } from   \"@rxweb/reactive-forms\"   \r\n\r\nexport class UserInfo {\r\n\r\n\t@numeric({acceptValue:NumericValueType.NegativeNumber }) \r\n\tnegativeNumber: number;\r\n\t\r\n\t\r\n}\r\n","modelName":null,"json":{}},"isFormat":{"notes":null,"component":"\r\n<template>\r\n  <div class=\"col-lg-12\">\r\n     <form>\r\n       <div class=\"form-group\">\r\n        <label>Total Amount</label>\r\n        <input id=\"name\" class=\"form-control\" v-model=\"userInfoFormGroup.props.totalAmount\" type=\"text\" name=\"name\" />\r\n        <div v-if=\"userInfoFormGroup.controls.totalAmount.errors\">\r\n         <small class=\"form-text text-danger\">{{userInfoFormGroup.controls.totalAmount.errors.numeric.message}}<br/></small>\t\r\n       </div>\r\n      </div>  \r\n       <button class=\"btn btn-primary\">Submit</button>\r\n     </form>\r\n  </div>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport { Component, Prop, Vue } from 'vue-property-decorator';\r\n\r\nimport { required,RxFormBuilder,IFormGroup } from \"@rxweb/reactive-forms\"\r\nimport { UserInfo } from './userInfo.model';\r\n\r\n@Component\r\nexport default class NumericIsFormatComponent extends Vue {\r\n userInfoFormGroup: IFormGroup<UserInfo>;\r\n\r\n formBuilder: RxFormBuilder = new RxFormBuilder();\r\n\r\n  constructor() {\r\n    super();\r\n    this.userInfoFormGroup = this.formBuilder.formGroup(UserInfo) as IFormGroup<UserInfo>;\r\n   }\r\n}\r\n</script> \r\n","html":null,"model":"import {  numeric, NumericValueType, } from   \"@rxweb/reactive-forms\"   \r\n\r\nexport class UserInfo {\r\n\r\n\t@numeric({isFormat:true }) \r\n\ttotalAmount: number;\r\n\t\r\n\t\r\n}\r\n","modelName":null,"json":{}},"allowDecimal":{"notes":null,"component":"\r\n<template>\r\n  <div class=\"col-lg-12\">\r\n     <form>\r\n       <div class=\"form-group\">\r\n        <label>Decimal Number</label>\r\n        <input id=\"name\" class=\"form-control\" v-model=\"userInfoFormGroup.props.decimalNumber\" type=\"text\" name=\"name\" />\r\n          <small class=\"form-text text-muted\">you can enter only a positive decimal number<br/></small>\r\n       <div v-if=\"userInfoFormGroup.controls.decimalNumber.errors\">\r\n         <small class=\"form-text text-danger\">{{userInfoFormGroup.controls.decimalNumber.errors.numeric.message}}<br/></small>\t\r\n       </div>\r\n      </div>  \r\n       <button class=\"btn btn-primary\">Submit</button>\r\n     </form>\r\n  </div>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport { Component, Prop, Vue } from 'vue-property-decorator';\r\n\r\nimport { required,RxFormBuilder,IFormGroup } from \"@rxweb/reactive-forms\"\r\nimport { UserInfo } from './userInfo.model';\r\n\r\n@Component\r\nexport default class NumericAllowDecimalComponent extends Vue {\r\n userInfoFormGroup: IFormGroup<UserInfo>;\r\n\r\n formBuilder: RxFormBuilder = new RxFormBuilder();\r\n\r\n  constructor() {\r\n    super();\r\n    this.userInfoFormGroup = this.formBuilder.formGroup(UserInfo) as IFormGroup<UserInfo>;\r\n   }\r\n}\r\n</script> \r\n","html":null,"model":"import {  numeric, NumericValueType, } from   \"@rxweb/reactive-forms\"   \r\n\r\nexport class UserInfo {\r\n\r\n\t@numeric({allowDecimal:true }) \r\n\tdecimalNumber: number;\r\n\t\r\n\t\r\n}\r\n","modelName":null,"json":{}},"conditionalExpression":{"notes":null,"component":"\r\n<template>\r\n  <div class=\"col-lg-12\">\r\n     <form>\r\n       <div class=\"form-group\">\r\n        <label>Data Type</label>\r\n        <input id=\"name\" class=\"form-control\" v-model=\"userInfoFormGroup.props.dataType\" type=\"text\" name=\"name\" />\r\n        <div v-if=\"userInfoFormGroup.controls.dataType.errors\">\r\n         <small class=\"form-text text-danger\">{{userInfoFormGroup.controls.dataType.errors.numeric.message}}<br/></small>\t\r\n       </div>\r\n      </div>  \r\n    <div class=\"form-group\">\r\n        <label>Real Number</label>\r\n        <input id=\"name\" class=\"form-control\" v-model=\"userInfoFormGroup.props.realNumber\" type=\"text\" name=\"name\" />\r\n          <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Real Number' then you need to add 'Data Type' input as 'Real'.<br/></small>\r\n         <small class=\"form-text text-muted\">Conditional Expression with type 'string'<br/></small>\r\n       <div v-if=\"userInfoFormGroup.controls.realNumber.errors\">\r\n         <small class=\"form-text text-danger\">{{userInfoFormGroup.controls.realNumber.errors.numeric.message}}<br/></small>\t\r\n       </div>\r\n      </div>  \r\n    <div class=\"form-group\">\r\n        <label>Integer Number</label>\r\n        <input id=\"name\" class=\"form-control\" v-model=\"userInfoFormGroup.props.integerNumber\" type=\"text\" name=\"name\" />\r\n          <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Integer Number' then you need to add 'Data Type' input as 'Integer'.<br/></small>\r\n         <small class=\"form-text text-muted\">Conditional Expression with type 'function'<br/></small>\r\n       <div v-if=\"userInfoFormGroup.controls.integerNumber.errors\">\r\n         <small class=\"form-text text-danger\">{{userInfoFormGroup.controls.integerNumber.errors.numeric.message}}<br/></small>\t\r\n       </div>\r\n      </div>  \r\n       <button class=\"btn btn-primary\">Submit</button>\r\n     </form>\r\n  </div>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport { Component, Prop, Vue } from 'vue-property-decorator';\r\n\r\nimport { required,RxFormBuilder,IFormGroup } from \"@rxweb/reactive-forms\"\r\nimport { UserInfo } from './userInfo.model';\r\n\r\n@Component\r\nexport default class NumericConditionalExpressionComponent extends Vue {\r\n userInfoFormGroup: IFormGroup<UserInfo>;\r\n\r\n formBuilder: RxFormBuilder = new RxFormBuilder();\r\n\r\n  constructor() {\r\n    super();\r\n    this.userInfoFormGroup = this.formBuilder.formGroup(UserInfo) as IFormGroup<UserInfo>;\r\n   }\r\n}\r\n</script> \r\n","html":null,"model":"import {  numeric,prop, NumericValueType, } from   \"@rxweb/reactive-forms\"   \r\n\r\nexport class UserInfo {\r\n\r\n\t@prop()\r\n\tdataType: string;\r\n\r\n\t//If you want to apply conditional expression of type 'string'\r\n\t@numeric({acceptValue:NumericValueType.Both  ,conditionalExpression:'x => x.dataType == \"Real\"' }) \r\n\trealNumber: number;\r\n\t\r\n\t\r\n\t//If you want to apply conditional expression of type 'function'\r\n\t@numeric({acceptValue:NumericValueType.PositiveNumber  ,conditionalExpression:(x,y) => x.dataType == \"Integer\"  }) \r\n\tintegerNumber: number;\r\n\t\r\n\t\r\n}\r\n","modelName":null,"json":{}},"message":{"notes":null,"component":"\r\n<template>\r\n  <div class=\"col-lg-12\">\r\n     <form>\r\n       <div class=\"form-group\">\r\n        <label>Positive Number</label>\r\n        <input id=\"name\" class=\"form-control\" v-model=\"userInfoFormGroup.props.positiveNumber\" type=\"text\" name=\"name\" />\r\n          <small class=\"form-text text-muted\">you can enter only a positive number<br/></small>\r\n         <small class=\"form-text text-muted\">Shows custom message.<br/></small>\r\n       <div v-if=\"userInfoFormGroup.controls.positiveNumber.errors\">\r\n         <small class=\"form-text text-danger\">{{userInfoFormGroup.controls.positiveNumber.errors.numeric.message}}<br/></small>\t\r\n       </div>\r\n      </div>  \r\n       <button class=\"btn btn-primary\">Submit</button>\r\n     </form>\r\n  </div>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport { Component, Prop, Vue } from 'vue-property-decorator';\r\n\r\nimport { required,RxFormBuilder,IFormGroup } from \"@rxweb/reactive-forms\"\r\nimport { UserInfo } from './userInfo.model';\r\n\r\n@Component\r\nexport default class NumericMessageComponent extends Vue {\r\n userInfoFormGroup: IFormGroup<UserInfo>;\r\n\r\n formBuilder: RxFormBuilder = new RxFormBuilder();\r\n\r\n  constructor() {\r\n    super();\r\n    this.userInfoFormGroup = this.formBuilder.formGroup(UserInfo) as IFormGroup<UserInfo>;\r\n   }\r\n}\r\n</script> \r\n","html":null,"model":"import {  numeric, NumericValueType, } from   \"@rxweb/reactive-forms\"   \r\n\r\nexport class UserInfo {\r\n\r\n\t@numeric({message:'{{0}} is not a positive number' }) \r\n\tpositiveNumber: number;\r\n\t\r\n\t\r\n}\r\n","modelName":null,"json":{}},"messageKey":{"notes":null,"component":"\r\n<template>\r\n  <div class=\"col-lg-12\">\r\n     <form>\r\n       <div class=\"form-group\">\r\n        <label>Positive Non Decimal Number</label>\r\n        <input id=\"name\" class=\"form-control\" v-model=\"userInfoFormGroup.props.positiveNonDecimalNumber\" type=\"text\" name=\"name\" />\r\n          <small class=\"form-text text-muted\">Shows custom message based on message key<br/></small>\r\n       <div v-if=\"userInfoFormGroup.controls.positiveNonDecimalNumber.errors\">\r\n         <small class=\"form-text text-danger\">{{userInfoFormGroup.controls.positiveNonDecimalNumber.errors.numeric.message}}<br/></small>\t\r\n       </div>\r\n      </div>  \r\n       <button class=\"btn btn-primary\">Submit</button>\r\n     </form>\r\n  </div>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport { Component, Prop, Vue } from 'vue-property-decorator';\r\n\r\nimport { required,RxFormBuilder,IFormGroup } from \"@rxweb/reactive-forms\"\r\nimport { UserInfo } from './userInfo.model';\r\n\r\n@Component\r\nexport default class NumericMessageKeyComponent extends Vue {\r\n userInfoFormGroup: IFormGroup<UserInfo>;\r\n\r\n formBuilder: RxFormBuilder = new RxFormBuilder();\r\n\r\n  constructor() {\r\n    super();\r\n    this.userInfoFormGroup = this.formBuilder.formGroup(UserInfo) as IFormGroup<UserInfo>;\r\n   }\r\n}\r\n</script> \r\n","html":null,"model":"import {  numeric, NumericValueType, } from   \"@rxweb/reactive-forms\"   \r\n\r\nexport class UserInfo {\r\n\r\n\t@numeric({messageKey:'numericMessageKey' }) \r\n\tpositiveNonDecimalNumber: number;\r\n\t\r\n\t\r\n}\r\n","modelName":null,"json":{}},"add":{"notes":null,"component":"\r\n<template>\r\n  <div class=\"col-lg-12\">\r\n     <form>\r\n       <div class=\"form-group\">\r\n        <label>Integer Number</label>\r\n        <input id=\"name\" class=\"form-control\" v-model=\"userInfoFormGroup.props.integerNumber\" type=\"text\" name=\"name\" />\r\n          <small class=\"form-text text-muted\">you can enter only a non decimal positive number<br/></small>\r\n       <div v-if=\"userInfoFormGroup.controls.integerNumber.errors\">\r\n         <small class=\"form-text text-danger\">{{userInfoFormGroup.controls.integerNumber.errors.numeric.message}}<br/></small>\t\r\n       </div>\r\n      </div>  \r\n       <button class=\"btn btn-primary\">Submit</button>\r\n     </form>\r\n  </div>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport { Component, Prop, Vue } from 'vue-property-decorator';\r\n\r\nimport { required,RxFormBuilder,IFormGroup } from \"@rxweb/reactive-forms\"\r\nimport { UserInfo } from './userInfo.model';\r\n\r\n@Component\r\nexport default class NumericAddComponent extends Vue {\r\n userInfoFormGroup: IFormGroup<UserInfo>;\r\n\r\n formBuilder: RxFormBuilder = new RxFormBuilder();\r\n\r\n  constructor() {\r\n    super();\r\n    this.userInfoFormGroup = this.formBuilder.formGroup(UserInfo) as IFormGroup<UserInfo>;\r\n   }\r\n}\r\n</script> \r\n","html":null,"model":"import {  numeric, NumericValueType, } from   \"@rxweb/reactive-forms\"   \r\n\r\nexport class UserInfo {\r\n\r\n\t@numeric({acceptValue:NumericValueType.PositiveNumber  ,allowDecimal:false }) \r\n\tintegerNumber: number;\r\n\t\r\n\t\r\n}\r\n","modelName":null,"json":{}},"edit":{"notes":null,"component":"\r\n<template>\r\n  <div class=\"col-lg-12\">\r\n     <form>\r\n       <div class=\"form-group\">\r\n        <label>Integer Number</label>\r\n        <input id=\"name\" class=\"form-control\" v-model=\"userInfoFormGroup.props.integerNumber\" type=\"text\" name=\"name\" />\r\n          <small class=\"form-text text-muted\">you can enter only a non decimal positive number<br/></small>\r\n       <div v-if=\"userInfoFormGroup.controls.integerNumber.errors\">\r\n         <small class=\"form-text text-danger\">{{userInfoFormGroup.controls.integerNumber.errors.numeric.message}}<br/></small>\t\r\n       </div>\r\n      </div>  \r\n       <button class=\"btn btn-primary\">Submit</button>\r\n     </form>\r\n  </div>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport { Component, Prop, Vue } from 'vue-property-decorator';\r\n\r\nimport { required,RxFormBuilder,IFormGroup } from \"@rxweb/reactive-forms\"\r\nimport { UserInfo } from './userInfo.model';\r\n\r\n@Component\r\nexport default class NumericEditComponent extends Vue {\r\n userInfoFormGroup: IFormGroup<UserInfo>;\r\n\r\n formBuilder: RxFormBuilder = new RxFormBuilder();\r\n\r\n  constructor() {\r\n    super();\r\n    this.userInfoFormGroup = this.formBuilder.formGroup(UserInfo) as IFormGroup<UserInfo>;\r\n   }\r\n}\r\n</script> \r\n","html":null,"model":"import {  numeric, NumericValueType, } from   \"@rxweb/reactive-forms\"   \r\n\r\nexport class UserInfo {\r\n\r\n\t@numeric({acceptValue:NumericValueType.PositiveNumber  ,allowDecimal:false }) \r\n\tintegerNumber: number;\r\n\t\r\n\t\r\n}\r\n","modelName":null,"json":{}}}