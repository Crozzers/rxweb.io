{"complete":{"notes":null,"component":"\r\n<template>\r\n  <div class=\"col-lg-12\">\r\n     <form>\r\n       <div class=\"form-group\">\r\n        <label>Email Address</label>\r\n        <input id=\"name\" class=\"form-control\" v-model=\"userFormGroup.props.emailAddress\" type=\"text\" name=\"name\" />\r\n        <div v-if=\"userFormGroup.controls.emailAddress.errors\">\r\n         <small class=\"form-text text-danger\">{{userFormGroup.controls.emailAddress.errors.contains.message}}<br/></small>\t\r\n       </div>\r\n      </div>  \r\n    <div class=\"form-group\">\r\n        <label>Business Email Address</label>\r\n        <input id=\"name\" class=\"form-control\" v-model=\"userFormGroup.props.businessEmailAddress\" type=\"text\" name=\"name\" />\r\n          <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Business Email Address' then you need to add 'Email Address' input as 'abc@gmail.com'.<br/></small>\r\n         <small class=\"form-text text-muted\">Conditional Expression with type 'function'<br/></small>\r\n       <div v-if=\"userFormGroup.controls.businessEmailAddress.errors\">\r\n         <small class=\"form-text text-danger\">{{userFormGroup.controls.businessEmailAddress.errors.contains.message}}<br/></small>\t\r\n       </div>\r\n      </div>  \r\n    <div class=\"form-group\">\r\n        <label>Recovery Email Address</label>\r\n        <input id=\"name\" class=\"form-control\" v-model=\"userFormGroup.props.recoveryEmailAddress\" type=\"text\" name=\"name\" />\r\n          <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Recovery Email Address' then you need to add 'Email Address' input as 'abc@gmail.com'.<br/></small>\r\n         <small class=\"form-text text-muted\">Conditional Expression with type 'string'<br/></small>\r\n       <div v-if=\"userFormGroup.controls.recoveryEmailAddress.errors\">\r\n         <small class=\"form-text text-danger\">{{userFormGroup.controls.recoveryEmailAddress.errors.contains.message}}<br/></small>\t\r\n       </div>\r\n      </div>  \r\n    <div class=\"form-group\">\r\n        <label>Other Email Address</label>\r\n        <input id=\"name\" class=\"form-control\" v-model=\"userFormGroup.props.otherEmailAddress\" type=\"text\" name=\"name\" />\r\n          <small class=\"form-text text-muted\">Shows custom message<br/></small>\r\n       <div v-if=\"userFormGroup.controls.otherEmailAddress.errors\">\r\n         <small class=\"form-text text-danger\">{{userFormGroup.controls.otherEmailAddress.errors.contains.message}}<br/></small>\t\r\n       </div>\r\n      </div>  \r\n    <div class=\"form-group\">\r\n        <label>Organization Email Address</label>\r\n        <input id=\"name\" class=\"form-control\" v-model=\"userFormGroup.props.organizationEmailAddress\" type=\"text\" name=\"name\" />\r\n          <small class=\"form-text text-muted\">custom message based on messageKey<br/></small>\r\n       <div v-if=\"userFormGroup.controls.organizationEmailAddress.errors\">\r\n         <small class=\"form-text text-danger\">{{userFormGroup.controls.organizationEmailAddress.errors.contains.message}}<br/></small>\t\r\n       </div>\r\n      </div>  \r\n       <button class=\"btn btn-primary\">Submit</button>\r\n     </form>\r\n  </div>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport { Component, Prop, Vue } from 'vue-property-decorator';\r\n\r\nimport { required,RxFormBuilder,IFormGroup } from \"@rxweb/reactive-forms\"\r\nimport { User } from './user.model';\r\n\r\n@Component\r\nexport default class ContainsCompleteComponent extends Vue {\r\n userFormGroup: IFormGroup<User>;\r\n\r\n formBuilder: RxFormBuilder = new RxFormBuilder();\r\n\r\n  constructor() {\r\n    super();\r\n    this.userFormGroup = this.formBuilder.formGroup(User) as IFormGroup<User>;\r\n   }\r\n}\r\n</script> \r\n","html":null,"model":"import {  contains, } from   \"@rxweb/reactive-forms\"   \r\n\r\nexport class User {\r\n\r\n\t@contains({value:'@gmail.com' }) \r\n\temailAddress: string;\r\n\t\r\n\t\r\n\t//If you want to apply conditional expression of type 'function'\r\n\t@contains({value:'@gmail.com'  ,conditionalExpression:(x,y) => x.emailAddress == \"abc@gmail.com\" }) \r\n\tbusinessEmailAddress: string;\r\n\t\r\n\t\r\n\t//If you want to apply conditional expression of type 'string'\r\n\t@contains({value:'@gmail.com'  ,conditionalExpression:'x => x.emailAddress == \"abc@gmail.com\"' }) \r\n\trecoveryEmailAddress: string;\r\n\t\r\n\t\r\n\t@contains({value:'@gmail.com'  ,message:'Please enter valid gmailId' }) \r\n\totherEmailAddress: string;\r\n\t\r\n\t\r\n\t@contains({value:'@gmail.com'  ,messageKey:'containsMessageKey' }) \r\n\torganizationEmailAddress: string;\r\n\t\r\n\t\r\n}\r\n","modelName":null,"json":{}},"value":{"notes":null,"component":"\r\n<template>\r\n  <div class=\"col-lg-12\">\r\n     <form>\r\n       <div class=\"form-group\">\r\n        <label>Email Address</label>\r\n        <input id=\"name\" class=\"form-control\" v-model=\"userFormGroup.props.emailAddress\" type=\"text\" name=\"name\" />\r\n        <div v-if=\"userFormGroup.controls.emailAddress.errors\">\r\n         <small class=\"form-text text-danger\">{{userFormGroup.controls.emailAddress.errors.contains.message}}<br/></small>\t\r\n       </div>\r\n      </div>  \r\n       <button class=\"btn btn-primary\">Submit</button>\r\n     </form>\r\n  </div>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport { Component, Prop, Vue } from 'vue-property-decorator';\r\n\r\nimport { required,RxFormBuilder,IFormGroup } from \"@rxweb/reactive-forms\"\r\nimport { User } from './user.model';\r\n\r\n@Component\r\nexport default class ContainsValueComponent extends Vue {\r\n userFormGroup: IFormGroup<User>;\r\n\r\n formBuilder: RxFormBuilder = new RxFormBuilder();\r\n\r\n  constructor() {\r\n    super();\r\n    this.userFormGroup = this.formBuilder.formGroup(User) as IFormGroup<User>;\r\n   }\r\n}\r\n</script> \r\n","html":null,"model":"import {  contains, } from   \"@rxweb/reactive-forms\"   \r\n\r\nexport class User {\r\n\r\n\t@contains({value:'@gmail.com' }) \r\n\temailAddress: string;\r\n\t\r\n\t\r\n}\r\n","modelName":null,"json":{}},"conditionalExpression":{"notes":null,"component":"\r\n<template>\r\n  <div class=\"col-lg-12\">\r\n     <form>\r\n       <div class=\"form-group\">\r\n        <label>Email Address</label>\r\n        <input id=\"name\" class=\"form-control\" v-model=\"userFormGroup.props.emailAddress\" type=\"text\" name=\"name\" />\r\n        <div v-if=\"userFormGroup.controls.emailAddress.errors\">\r\n         <small class=\"form-text text-danger\">{{userFormGroup.controls.emailAddress.errors.contains.message}}<br/></small>\t\r\n       </div>\r\n      </div>  \r\n    <div class=\"form-group\">\r\n        <label>Recovery Email Address</label>\r\n        <input id=\"name\" class=\"form-control\" v-model=\"userFormGroup.props.recoveryEmailAddress\" type=\"text\" name=\"name\" />\r\n          <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Recovery Email Address' then you need to add 'Email Address' input as 'abc@gmail.com'.<br/></small>\r\n         <small class=\"form-text text-muted\">Conditional Expression with type 'string'<br/></small>\r\n       <div v-if=\"userFormGroup.controls.recoveryEmailAddress.errors\">\r\n         <small class=\"form-text text-danger\">{{userFormGroup.controls.recoveryEmailAddress.errors.contains.message}}<br/></small>\t\r\n       </div>\r\n      </div>  \r\n    <div class=\"form-group\">\r\n        <label>Business Email Address</label>\r\n        <input id=\"name\" class=\"form-control\" v-model=\"userFormGroup.props.businessEmailAddress\" type=\"text\" name=\"name\" />\r\n          <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Business Email Address' then you need to add 'Email Address' input as 'abc@gmail.com'.<br/></small>\r\n         <small class=\"form-text text-muted\">Conditional Expression with type 'function'<br/></small>\r\n       <div v-if=\"userFormGroup.controls.businessEmailAddress.errors\">\r\n         <small class=\"form-text text-danger\">{{userFormGroup.controls.businessEmailAddress.errors.contains.message}}<br/></small>\t\r\n       </div>\r\n      </div>  \r\n       <button class=\"btn btn-primary\">Submit</button>\r\n     </form>\r\n  </div>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport { Component, Prop, Vue } from 'vue-property-decorator';\r\n\r\nimport { required,RxFormBuilder,IFormGroup } from \"@rxweb/reactive-forms\"\r\nimport { User } from './user.model';\r\n\r\n@Component\r\nexport default class ContainsConditionalExpressionComponent extends Vue {\r\n userFormGroup: IFormGroup<User>;\r\n\r\n formBuilder: RxFormBuilder = new RxFormBuilder();\r\n\r\n  constructor() {\r\n    super();\r\n    this.userFormGroup = this.formBuilder.formGroup(User) as IFormGroup<User>;\r\n   }\r\n}\r\n</script> \r\n","html":null,"model":"import {  contains, } from   \"@rxweb/reactive-forms\"   \r\n\r\nexport class User {\r\n\r\n\t@contains({value:'@gmail.com' }) \r\n\temailAddress: string;\r\n\t\r\n\t\r\n\t//If you want to apply conditional expression of type 'string'\r\n\t@contains({value:'@gmail.com'  ,conditionalExpression:'x => x.emailAddress == \"abc@gmail.com\"' }) \r\n\trecoveryEmailAddress: string;\r\n\t\r\n\t\r\n\t//If you want to apply conditional expression of type 'function'\r\n\t@contains({value:'@gmail.com'  ,conditionalExpression:(x,y) => x.emailAddress == \"abc@gmail.com\" }) \r\n\tbusinessEmailAddress: string;\r\n\t\r\n\t\r\n}\r\n","modelName":null,"json":{}},"message":{"notes":null,"component":"\r\n<template>\r\n  <div class=\"col-lg-12\">\r\n     <form>\r\n       <div class=\"form-group\">\r\n        <label>Other Email Address</label>\r\n        <input id=\"name\" class=\"form-control\" v-model=\"userFormGroup.props.otherEmailAddress\" type=\"text\" name=\"name\" />\r\n          <small class=\"form-text text-muted\">Shows custom message<br/></small>\r\n       <div v-if=\"userFormGroup.controls.otherEmailAddress.errors\">\r\n         <small class=\"form-text text-danger\">{{userFormGroup.controls.otherEmailAddress.errors.contains.message}}<br/></small>\t\r\n       </div>\r\n      </div>  \r\n       <button class=\"btn btn-primary\">Submit</button>\r\n     </form>\r\n  </div>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport { Component, Prop, Vue } from 'vue-property-decorator';\r\n\r\nimport { required,RxFormBuilder,IFormGroup } from \"@rxweb/reactive-forms\"\r\nimport { User } from './user.model';\r\n\r\n@Component\r\nexport default class ContainsMessageComponent extends Vue {\r\n userFormGroup: IFormGroup<User>;\r\n\r\n formBuilder: RxFormBuilder = new RxFormBuilder();\r\n\r\n  constructor() {\r\n    super();\r\n    this.userFormGroup = this.formBuilder.formGroup(User) as IFormGroup<User>;\r\n   }\r\n}\r\n</script> \r\n","html":null,"model":"import {  contains, } from   \"@rxweb/reactive-forms\"   \r\n\r\nexport class User {\r\n\r\n\t@contains({value:'@gmail.com'  ,message:'Please enter valid gmailId' }) \r\n\totherEmailAddress: string;\r\n\t\r\n\t\r\n}\r\n","modelName":null,"json":{}},"messageKey":{"notes":null,"component":"\r\n<template>\r\n  <div class=\"col-lg-12\">\r\n     <form>\r\n       <div class=\"form-group\">\r\n        <label>Organization Email Address</label>\r\n        <input id=\"name\" class=\"form-control\" v-model=\"userFormGroup.props.organizationEmailAddress\" type=\"text\" name=\"name\" />\r\n          <small class=\"form-text text-muted\">custom message based on messageKey<br/></small>\r\n       <div v-if=\"userFormGroup.controls.organizationEmailAddress.errors\">\r\n         <small class=\"form-text text-danger\">{{userFormGroup.controls.organizationEmailAddress.errors.contains.message}}<br/></small>\t\r\n       </div>\r\n      </div>  \r\n       <button class=\"btn btn-primary\">Submit</button>\r\n     </form>\r\n  </div>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport { Component, Prop, Vue } from 'vue-property-decorator';\r\n\r\nimport { required,RxFormBuilder,IFormGroup } from \"@rxweb/reactive-forms\"\r\nimport { User } from './user.model';\r\n\r\n@Component\r\nexport default class ContainsMessageKeyComponent extends Vue {\r\n userFormGroup: IFormGroup<User>;\r\n\r\n formBuilder: RxFormBuilder = new RxFormBuilder();\r\n\r\n  constructor() {\r\n    super();\r\n    this.userFormGroup = this.formBuilder.formGroup(User) as IFormGroup<User>;\r\n   }\r\n}\r\n</script> \r\n","html":null,"model":"import {  contains, } from   \"@rxweb/reactive-forms\"   \r\n\r\nexport class User {\r\n\r\n\t@contains({value:'@gmail.com'  ,messageKey:'containsMessageKey' }) \r\n\torganizationEmailAddress: string;\r\n\t\r\n\t\r\n}\r\n","modelName":null,"json":{}},"add":{"notes":null,"component":"\r\n<template>\r\n  <div class=\"col-lg-12\">\r\n     <form>\r\n       <div class=\"form-group\">\r\n        <label>Email Address</label>\r\n        <input id=\"name\" class=\"form-control\" v-model=\"userFormGroup.props.emailAddress\" type=\"text\" name=\"name\" />\r\n        <div v-if=\"userFormGroup.controls.emailAddress.errors\">\r\n         <small class=\"form-text text-danger\">{{userFormGroup.controls.emailAddress.errors.contains.message}}<br/></small>\t\r\n       </div>\r\n      </div>  \r\n       <button class=\"btn btn-primary\">Submit</button>\r\n     </form>\r\n  </div>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport { Component, Prop, Vue } from 'vue-property-decorator';\r\n\r\nimport { required,RxFormBuilder,IFormGroup } from \"@rxweb/reactive-forms\"\r\nimport { User } from './user.model';\r\n\r\n@Component\r\nexport default class ContainsAddComponent extends Vue {\r\n userFormGroup: IFormGroup<User>;\r\n\r\n formBuilder: RxFormBuilder = new RxFormBuilder();\r\n\r\n  constructor() {\r\n    super();\r\n    this.userFormGroup = this.formBuilder.formGroup(User) as IFormGroup<User>;\r\n   }\r\n}\r\n</script> \r\n","html":null,"model":"import {  contains, } from   \"@rxweb/reactive-forms\"   \r\n\r\nexport class User {\r\n\r\n\t@contains({value:'@gmail.com' }) \r\n\temailAddress: string;\r\n\t\r\n\t\r\n}\r\n","modelName":null,"json":{}},"edit":{"notes":null,"component":"\r\n<template>\r\n  <div class=\"col-lg-12\">\r\n     <form>\r\n       <div class=\"form-group\">\r\n        <label>Email Address</label>\r\n        <input id=\"name\" class=\"form-control\" v-model=\"userFormGroup.props.emailAddress\" type=\"text\" name=\"name\" />\r\n        <div v-if=\"userFormGroup.controls.emailAddress.errors\">\r\n         <small class=\"form-text text-danger\">{{userFormGroup.controls.emailAddress.errors.contains.message}}<br/></small>\t\r\n       </div>\r\n      </div>  \r\n       <button class=\"btn btn-primary\">Submit</button>\r\n     </form>\r\n  </div>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport { Component, Prop, Vue } from 'vue-property-decorator';\r\n\r\nimport { required,RxFormBuilder,IFormGroup } from \"@rxweb/reactive-forms\"\r\nimport { User } from './user.model';\r\n\r\n@Component\r\nexport default class ContainsEditComponent extends Vue {\r\n userFormGroup: IFormGroup<User>;\r\n\r\n formBuilder: RxFormBuilder = new RxFormBuilder();\r\n\r\n  constructor() {\r\n    super();\r\n    this.userFormGroup = this.formBuilder.formGroup(User) as IFormGroup<User>;\r\n   }\r\n}\r\n</script> \r\n","html":null,"model":"import {  contains, } from   \"@rxweb/reactive-forms\"   \r\n\r\nexport class User {\r\n\r\n\t@contains({value:'@gmail.com' }) \r\n\temailAddress: string;\r\n\t\r\n\t\r\n}\r\n","modelName":null,"json":{}}}