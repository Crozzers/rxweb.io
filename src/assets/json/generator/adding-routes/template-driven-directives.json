{"rightSidebarLinks":[{"id":"adding-routes","title":"adding-routes","subLink":null},{"id":"navigatingroutes","title":"Navigating Routes","subLink":[{"title":"Authenticating Routes","id":"authenticatingroutes","thirdLevelLink":[]},{"title":"Authorizing Routes","id":"authorizingroutes","thirdLevelLink":[]},{"title":"Middleware","id":"middleware","thirdLevelLink":[]}]}],"title":"Adding Routes","description":"","validatorType":"template-driven","validationTypeTitle":"Template Driven","type":"simple","gitDocPath":"https://github.com/rxweb/rxweb.io/edit/master/docs/angular/learn/adding-routes.md","category":"learn","subCategory":null,"linkTitle":"adding-routes","tabArray":{},"innerHtml":null,"htmlContent":"<div class='row page-section' id= 'navigatingroutes'>\r\n<div class='col-lg-12'>\r\n<h2>Navigating Routes<a title='Link to this heading' class='link-header' href='/learn/adding-routes/template-driven/directives#navigatingroutes'><i class='fa fa-link'></i></a></h2>\r\n\r\n<p class='showHideElement' >In this guide section we will learn a centralized way to manage all the routes within the application along with the centralized integration of authentication and authorization and a component based middleware. Here we will make the use of angular routing to navigate through the application</p>\r\n<p class='showHideElement' >As listed below are the features which need to be covered when we talk about the router implemented with the help of @rxweb/angular-router package :</p>\r\n<ul class=\"bullet-list\">\r\n  <li class=\"overview-nav-item\">Centralized authentication and authorization resolvers</li> \r\n  <li class=\"overview-nav-item\">Middleware using decorator</li>\r\n  <li class=\"overview-nav-item\">Single BaseCanActivate all over the application</li>\r\n</ul>\r\n</div></div>\r\n<div class='row page-section' id= 'authenticatingroutes'>\r\n<div class='col-lg-12'>\r\n<h2>Authenticating Routes<a title='Link to this heading' class='link-header' href='/learn/adding-routes/template-driven/directives#authenticatingroutes'><i class='fa fa-link'></i></a></h2>\r\n\r\n<p class='showHideElement' >Here we will globally manage the authenticating routes when the user has logged in to the system whenever the navigation route takes place. We will implement this by creating a global authentication resolver as described in <a class=\"redirect-link\" href=\"/rxweb-router/angular-router/router-authentication\" target=\"_blank\">this</a> documentation.  </p>\r\n<p class='showHideElement' >We will pass this using a <span class='highlighted'>BaseCanActive</span> in the dashboard component to resolve the user object whenever the route is called.</p>\r\n<p class='showHideElement' >1) <span class='highlighted'>BaseCanActive</span> in the routes whenever the route is called</p>\r\n<div component=\"app-code\" key=\"adding-routes-add-model\"></div> \r\n<p class='showHideElement' >3) Importing the <span class='highlighted'>@routerModule</span> decorator in the module class</p>\r\n<div component=\"app-code\" key=\"adding-routes-add-component\"></div> \r\n</div></div>\r\n<div class='row page-section' id= 'authorizingroutes'>\r\n<div class='col-lg-12'>\r\n<h2>Authorizing Routes<a title='Link to this heading' class='link-header' href='/learn/adding-routes/template-driven/directives#authorizingroutes'><i class='fa fa-link'></i></a></h2>\r\n\r\n<p class='showHideElement' >To navigate the user to the provided route along with the retrieval of the access rights of the user. Create a global authorization resolver to get the access whenever the particular route is called.</p>\r\n<p class='showHideElement' >The creation of <a class=\"redirect-link\" target=\"_blank\" href=\"/rxweb-router/angular-router/router-authorization\">authorization route</a> is described in this documentation.  </p>\r\n<p class='showHideElement' >1) Passing the <span class='highlighted'>@access</span> in the User component</p>\r\n<div component=\"app-code\" key=\"adding-routes-add-html\"></div> \r\n<p class='showHideElement' >2) <span class='highlighted'>BaseCanActive</span> in the routes whenever the route is called</p>\r\n<div component=\"app-code\" key=\"adding-routes-add-canactivate\"></div> \r\n</div></div>\r\n<div class='row page-section' id= 'middleware'>\r\n<div class='col-lg-12'>\r\n<h2>Middleware<a title='Link to this heading' class='link-header' href='/learn/adding-routes/template-driven/directives#middleware'><i class='fa fa-link'></i></a></h2>\r\n\r\n<p class='showHideElement' >With the help of the authentication resolver we have the information of the user after the user has logged-in. Now one question may arise that <b>how to manage the login route based upon checking whether the user is logged in or not</b>, In this case if the user is logged-in the navigation should take place to the dashboard and if not the login page should be displayed. The functionality of the <a class=\"redirect-link\" target=\"_blank\" href=\"/rxweb-router/angular-router/middleware\">login middleware</a> is explained here.</p>\r\n<p class='showHideElement' >To achieve this we need to create a login middleware and pass it to the <span class='highlighted'>@middleware</span> decorator provided by @rxweb/angular-router as below </p>\r\n<div component=\"app-code\" key=\"adding-routes-add-middleware\"></div>\r\n</div></div>\r\n"}