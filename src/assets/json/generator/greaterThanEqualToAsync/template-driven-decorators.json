{"rightSidebarLinks":[{"id":"greaterthanequaltoasync","title":"greaterThanEqualToAsync","subLink":null},{"id":"whentouse","title":"When to use","subLink":[]},{"id":"basicgreaterthanequaltoasyncvalidation","title":"Basic greaterThanEqualToAsync Validation","subLink":[]},{"id":"validatorconfig","title":"ValidatorConfig","subLink":[{"title":"fieldName","id":"fieldname","thirdLevelLink":[]},{"title":"message","id":"message","thirdLevelLink":[]},{"title":"messageKey","id":"messagekey","thirdLevelLink":[]},{"title":"value","id":"value","thirdLevelLink":[]}]},{"id":"completegreaterthanequaltoasyncexample","title":"Complete greaterThanEqualToAsync Example","subLink":[]}],"title":"greaterThanEqualToAsync","description":"Greater than equal to validation  template driven  will check that input property is greater than or equal to the related field input.","validatorType":"template-driven","validationTypeTitle":"Template Driven Decorator","type":"tabs","gitDocPath":"https://github.com/rxweb/rxweb.io/edit/master/docs/angular/reactive-forms/reactive-form-validators/async-validators/greaterThanEqualToAsync.md","category":"async-validators","subCategory":null,"linkTitle":"greaterThanEqualToAsync","tabArray":{"complete":[{"tabName":"Example","tabGroupContent":null,"content":"<div component=\"app-example-runner\" ref-component=\"app-greaterThanEqualToAsync-complete\"></div>\r\n"},{"tabName":"Model","tabGroupContent":null,"content":"<div component=\"app-code\" key=\"greaterThanEqualToAsync-complete-model\"></div> \r\n"},{"tabName":"Component","tabGroupContent":null,"content":"<div component=\"app-code\" key=\"greaterThanEqualToAsync-complete-component\"></div>\r\n"},{"tabName":"Html","tabGroupContent":null,"content":"<div component=\"app-code\" key=\"greaterThanEqualToAsync-complete-html\"></div> \r\n"}]},"innerHtml":null,"htmlContent":"<div class=\"title-bar top_title\"><p>greaterThanEqualToAsync</p></div> <div class=\"title-bar\"><p>greater than equal to async validation  template driven  will check that input property is greater than or equal to the related field input asynchronously.</p></div>\r\n<div class='row page-section' id= 'whentouse'>\r\n<div class='col-lg-12'>\r\n<h2 class='showHideElement' >When to use<a title='Link to this heading' class='link-header' href=''/async-validators/greaterThanEqualToAsync/template-driven/decorators#whentouse'><i class='fa fa-link'></i></a></h2>\r\n\r\n<p class='showHideElement' >Suppose you want to create a user form and you have fields like Age, VoterAge, OtherAge and you want user to enter Age such that VoterAge,OtherAge should be greater than or equal to Age asynchronously Here depending upon the requirement these scenarios may arise.</p>\r\n<ol class='showHideElement'>\r\n<li>Specify Age as fieldName such that greaterThanEqualToAsync validation should be applied to the fieldname for comparing other fields.</li>\r\n<li>Apply greaterThanEqualToAsync validation based on matched condition in the form, like if the Age is ‘18’ then the </li>VoterAge,OtherAge value should be Greater than or equal to 18.\r\n<li>Adding Custom Message on OtherAge Field.</li>\r\n<li>Shows the custom message on <span class='highlighted'>Joining Age</span> field by using <span class='highlighted'>messageKey</span> property.</li>\r\n<p class='showHideElement' >Let’s see how greaterThanEqualToAsync  template driven  fulfil the need.</p>\r\n</div></div>\r\n<div class='row page-section' id= 'basicgreaterthanequaltoasyncvalidation'>\r\n<div class='col-lg-12'>\r\n<h2>Basic greaterThanEqualToAsync Validation<a title='Link to this heading' class='link-header' href='/async-validators/greaterThanEqualToAsync/template-driven/decorators#basicgreaterthanequaltoasyncvalidation'><i class='fa fa-link'></i></a></h2>\r\n\r\n<p class='showHideElement' >First we need to create User model class define a property of Age and VoterAge  in the model to achieve the functional need of point 1. </p>\r\n<div component=\"app-code\" key=\"greaterThanEqualToAsync-add-model\"></div> \r\n<p class='showHideElement' >Through Angular FormBuilder service we create FormGroup in the component.</p>\r\n<p class='showHideElement' >Here we have covered Add form operations. </p>\r\n<div component=\"app-code\" key=\"greaterThanEqualToAsync-add-component\"></div> \r\n<p class='showHideElement' >Next, we need to write html code.</p>\r\n<div component=\"app-code\" key=\"greaterThanEqualToAsync-add-html\"></div> \r\n<div component=\"app-example-runner\" ref-component=\"app-greaterThanEqualToAsync-add\"></div>\r\n</div></div>\r\n<div class='row page-section' id= 'validatorconfig'>\r\n<div class='col-lg-12'>\r\n<h2>ValidatorConfig<a title='Link to this heading' class='link-header' href='/async-validators/greaterThanEqualToAsync/template-driven/decorators#validatorconfig'><i class='fa fa-link'></i></a></h2>\r\n\r\n<p class='showHideElement' >Type : <span class='highlighted'>Observable</span></p>\r\n<p class='showHideElement' >validator config is used to dynamically resolve the value of the property according to the server rules by using the keyword <span class='highlighted'>of</span> as below </p>\r\n<p class='showHideElement' >Below options are not mandatory to use in the <span class='highlighted'>greaterThanEqualToAsync</span> validation. If needed then use the below options.</p>\r\n<table class=\"table table-bordered table-striped showHideElement\">\r\n<tr><th>Option</th><th>Description</th></tr>\r\n<tr><td><a title=\"fieldName\">fieldName</a></td><td>Greater than Equal to validation should be applied based on the <span class='highlighted'>fieldName</span> for compare other field value</td></tr>\r\n<tr><td><a  title=\"message\">message</a></td><td>To override the global configuration message and set the custom error message on respective FormControl</td></tr>\r\n<tr><td><a (click)='scrollTo(\"#messageKey\")' title=\"messageKey\">messageKey</a></td><td>messageKey property of BaseConfig can be used when the user wants to show a different custom validation message on some of their fields. User can define a custom messageKey globally by defining it in ReactiveFormConfig and set it in the message property of the validation.</td></tr>\r\n<tr><td><a (click)='scrollTo(\"#value\")' title=\"value\">value</a></td><td>Greater than Equal to validation provides <span class='highlighted'>value</span> property which is used To validate the formControl based upon configured static value.</td></tr>\r\n</table>\r\n</div></div>\r\n<div class='row page-section' id= 'fieldname'>\r\n<div class='col-lg-12'>\r\n<h2>fieldName<a title='Link to this heading' class='link-header' href='/async-validators/greaterThanEqualToAsync/template-driven/decorators#fieldname'><i class='fa fa-link'></i></a></h2>\r\n\r\n<p class='showHideElement' >Type :  <span class='highlighted'>string</span> </p>\r\n<p class='showHideElement' >Greater than Equal to validation should be applied based on the <span class='highlighted'>fieldName</span> for compare other field value </p>\r\n<div component=\"app-code\" key=\"greaterThanEqualToAsync-fieldNameExample-model\"></div> \r\n<div component=\"app-example-runner\" ref-component=\"app-greaterThanEqualToAsync-fieldName\" title=\"greaterThanEqualToAsync template driven with fieldName\" key=\"fieldName\"></div>\r\n</div></div>\r\n<div class='row page-section' id= 'message'>\r\n<div class='col-lg-12'>\r\n<h2>message<a title='Link to this heading' class='link-header' href='/async-validators/greaterThanEqualToAsync/template-driven/decorators#message'><i class='fa fa-link'></i></a></h2>\r\n\r\n<p class='showHideElement' >Type :  <span class='highlighted'>string</span></p>\r\n<p class='showHideElement' >To override the global configuration message and set the custom message on respective FormControl.</p>\r\n<div component=\"app-code\" key=\"greaterThanEqualToAsync-messageExample-model\"></div> \r\n<div component=\"app-example-runner\" ref-component=\"app-greaterThanEqualToAsync-message\" title=\"greaterThanEqualToAsync template driven with message\" key=\"message\"></div>\r\n</div></div>\r\n<div class='row page-section' id= 'messagekey'>\r\n<div class='col-lg-12'>\r\n<h2>messageKey<a title='Link to this heading' class='link-header' href='/async-validators/greaterThanEqualToAsync/template-driven/decorators#messagekey'><i class='fa fa-link'></i></a></h2>\r\n\r\n<p class='showHideElement' >Type : <span class='highlighted'>string</span></p>\r\n<p class='showHideElement' >messageKey property of BaseConfig can be used when the user wants to show a different custom validation message on some of their fields. User can define a custom messageKey globally by defining it in ReactiveFormConfig and set it in the message property of the validation.</p>\r\n<div component=\"app-code\" key=\"greaterThanEqualToAsync-messageKeyExample-model\"></div> \r\n<div component=\"app-example-runner\" ref-component=\"app-greaterThanEqualToAsync-messageKey\" title=\"greaterThanEqualToAsync template driven with messageKey\" key=\"messageKey\"></div>\r\n</div></div>\r\n<div class='row page-section' id= 'value'>\r\n<div class='col-lg-12'>\r\n<h2>value<a title='Link to this heading' class='link-header' href='/async-validators/greaterThanEqualToAsync/template-driven/decorators#value'><i class='fa fa-link'></i></a></h2>\r\n\r\n<p class='showHideElement' >Type : <span class='highlighted'>number</span></p>\r\n<p class='showHideElement' >Greater than Equal to validation provides <span class='highlighted'>value</span> property which is used To validate the formControl based upon configured static value.</p>\r\n<div component=\"app-code\" key=\"greaterThanEqualToAsync-valueExample-model\"></div> \r\n<div component=\"app-example-runner\" ref-component=\"app-greaterThanEqualToAsync-value\" title=\"greaterThanEqualToAsync template driven with value\" key=\"value\"></div>\r\n</div></div>\r\n<div class='row page-section' id= 'completegreaterthanequaltoasyncexample'>\r\n<div class='col-lg-12'>\r\n<h2>Complete greaterThanEqualToAsync Example<a title='Link to this heading' class='link-header' href='/async-validators/greaterThanEqualToAsync/template-driven/decorators#completegreaterthanequaltoasyncexample'><i class='fa fa-link'></i></a></h2>\r\n\r\n<p class='showHideElement' >This Complete greaterThanEqualToAsync example which includes all the RelationalOperatorConfig properties will fulfil the requirement of scenarios 1, 2, and 3</p>\r\n<div component=\"app-tabs\" key=\"complete\"></div>\r\n</div></div>\r\n"}