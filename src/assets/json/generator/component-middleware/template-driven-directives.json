{"rightSidebarLinks":[{"id":"component-middleware","title":"component-middleware","subLink":null},{"id":"componentbasedmiddleware","title":"Component based middleware","subLink":[]}],"title":"Component Middleware","description":"","validatorType":"template-driven","validationTypeTitle":"Template Driven","type":"simple","gitDocPath":"https://github.com/rxweb/rxweb.io/edit/master/docs/angular/learn/component-middleware.md","category":"learn","subCategory":null,"linkTitle":"component-middleware","tabArray":{},"innerHtml":null,"htmlContent":"<div class='row page-section' id= 'componentbasedmiddleware'>\r\n<div class='col-lg-12'>\r\n<h2>Component based middleware<a title='Link to this heading' class='link-header' href='/learn/component-middleware/template-driven/directives#componentbasedmiddleware'><i class='fa fa-link'></i></a></h2>\r\n\r\n<p class='showHideElement' >With the help of the authentication resolver we have the information of the user after the user has logged-in. This will be used to manage the login route based upon checking whether the user is logged in or not, In this case if the user is logged-in the navigation should take place to the dashboard and if not the login page should be displayed.</p>\r\n<p class='showHideElement' >The login middleware code is as below :</p>\r\n<div component=\"app-code\" key=\"component-middleware-add-component\"></div>\r\n<p class='showHideElement' >To achieve this we need to create a login middleware and pass it to the <span class='highlighted'>@middleware</span> decorator provided by @rxweb/angular-router as below </p>\r\n<div component=\"app-code\" key=\"component-middleware-add-html\"></div>\r\n</div></div>\r\n"}