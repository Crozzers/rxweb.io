{
    "complete": {
        "notes": null,
        "component": "import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from \"@angular/forms\"\r\nimport { RxFormBuilder } from '@rxweb/reactive-form-validators';\r\n\r\nimport { User } from './user.model';\r\n\r\n@Component({\r\n    selector: 'app-async-complete',\r\n    templateUrl: './async-complete.component.html'\r\n})\r\nexport class AsyncCompleteComponent implements OnInit {\r\n    userFormGroup: FormGroup\r\n\r\n    constructor(\r\n        private formBuilder: RxFormBuilder    ) { }\r\n\r\n    ngOnInit() {\r\n        let user = new User();\r\n        this.userFormGroup = this.formBuilder.formGroup(user);\r\n    }\r\n}",
        "html": "<div>\r\n  <form  [formGroup]=\"userFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label>Username</label>\r\n      <input type=\"text\" formControlName=\"userName\" class=\"form-control\"  />\r\n\t <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.userName.errors\">{{userFormGroup.controls.userName.errors.async}}<br/></small>\t\r\n    </div>\r\n    <button [disabled]=\"!userFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>",
        "model": "import {  async,prop, } from   \"@rxweb/reactive-form-validators\"   \r\nimport { FormControl } from \"@angular/forms\";\r\n\r\nexport class User {\r\n\r\n\t@async([ isUniqueUserName ]) \r\n\tuserName: string;\r\n\r\n}\r\n \r\nfunction isUniqueUserName(control: FormControl) {\r\n\tconst promise = new Promise((resolve, reject) => {\r\n\t\tif (!control.value == false)\r\n\t\t\tresolve(null)\r\n\t\telse\r\n\t\tresolve({ 'async': 'You must enter a value' })\r\n\t});\r\n\treturn promise;\r\n}",
        "modelName": "user.model.ts",
        "json": {}
    },
    "global": {
        "notes": null,
        "component": "import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from \"@angular/forms\"\r\n\r\nimport { RxFormBuilder, FormBuilderConfiguration } from '@rxweb/reactive-form-validators';\r\n\r\nimport { User } from './user.model';\r\n\r\n@Component({\r\n    selector: 'app-async-global',\r\n    templateUrl: './async-global.component.html'\r\n})\r\nexport class AsyncGlobalBasedComponent implements OnInit {\r\n    userFormGroup: FormGroup\r\n\r\n    constructor(\r\n        private formBuilder: RxFormBuilder    ) { }\r\n\r\n    ngOnInit() {\r\n        let user = new User();\r\n        this.userFormGroup = this.formBuilder.formGroup(user);\r\n    }\r\n}",
        "html": "<div>\r\n  <form  [formGroup]=\"userFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label>Username</label>\r\n      <input type=\"text\" formControlName=\"userName\" class=\"form-control\"  />\r\n\t <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.userName.errors\">{{userFormGroup.controls.userName.errors.async}}<br/></small>\t\r\n    </div>\r\n    <button [disabled]=\"!userFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>",
        "model": "import {  async,prop, } from   \"@rxweb/reactive-form-validators\"   \r\nimport { FormControl } from \"@angular/forms\";\r\n\r\nexport class User {\r\n\r\n\t@async([ isUniqueUserName ]) \r\n\tuserName: string;\r\n\r\n}\r\n \r\nfunction isUniqueUserName(control: FormControl) {\r\n\tconst promise = new Promise((resolve, reject) => {\r\n\t\tif (!control.value == false)\r\n\t\t\tresolve(null)\r\n\t\telse\r\n\t\tresolve({ 'async': 'You must enter a value' })\r\n\t});\r\n\treturn promise;\r\n}",
        "modelName": "user.model.ts",
        "json": {}
    },
    "component": {
        "notes": null,
        "component": "import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup, AsyncValidatorFn, FormControl } from \"@angular/forms\"\r\n\r\nimport { RxFormBuilder, FormBuilderConfiguration } from '@rxweb/reactive-form-validators';\r\n\r\nimport { User } from './user.model';\r\n\r\n@Component({\r\n    selector: 'app-async-component',\r\n    templateUrl: './async-component.component.html'\r\n})\r\nexport class AsyncComponentBasedComponent implements OnInit {\r\n    userFormGroup: FormGroup\r\n\r\n    constructor(\r\n        private formBuilder: RxFormBuilder) { }\r\n\r\n    ngOnInit() {\r\n        let user = new User();\r\n        var formBuilderConfig = new FormBuilderConfiguration();\r\n        formBuilderConfig.dynamicValidation = {\r\n            userName: {\r\n                async: [this.isUniqueUserName()]\r\n            }\r\n        }\r\n        this.userFormGroup = this.formBuilder.formGroup(user, formBuilderConfig);\r\n    }\r\n    isUniqueUserName(): AsyncValidatorFn {\r\n        return (control: FormControl) => {\r\n            const promise = new Promise((resolve, reject) => {\r\n                if (!control.value == false)\r\n                    resolve(null)\r\n                else\r\n                    resolve({ 'async': 'You must enter a value' })\r\n            });\r\n            return promise;\r\n        }\r\n    }\r\n}",
        "html": "<div>\r\n    <form  [formGroup]=\"userFormGroup\">\r\n      <div class=\"form-group\">\r\n        <label>Username</label>\r\n        <input type=\"text\" formControlName=\"userName\" class=\"form-control\"  />\r\n       <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.userName.errors\">{{userFormGroup.controls.userName.errors.async}}<br/></small>\t\r\n      </div>\r\n      <button [disabled]=\"!userFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n    </form>\r\n  </div>",
        "model": "import {  prop } from   \"@rxweb/reactive-form-validators\"\r\n\r\nexport class User {\r\n\r\n\t@prop() \r\n\tuserName: string;\r\n\r\n}",
        "modelName": "user.model.ts",
        "json": {}
    }
}