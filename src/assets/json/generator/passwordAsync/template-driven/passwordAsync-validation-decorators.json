{"complete":{"notes":[],"component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup,Validators } from \"@angular/forms\"\r\nimport { LoginInfo } from './login-info.model';\r\n\r\n@Component({\r\n    selector: 'app-passwordAsync-complete-template-driven-validation-decorators',\r\n    templateUrl: './password-async-complete.component.html'\r\n})\r\nexport class PasswordAsyncCompleteTemplateDrivenValidationDecoratorsComponent implements OnInit {\r\n    logininfo: LoginInfo\r\n\t\r\n    constructor(\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n       this.logininfo= new LoginInfo()\r\n    }\r\n}\r\n","html":"<div>\r\n  <form #logininfoForm = \"ngForm\" [rxwebForm]=\"logininfoForm\" [model]=\"logininfo\">\r\n    <div class=\"form-group\">\r\n      <label>New Password</label>\r\n\t    <input type=\"text\" name=\"newPassword\" [(ngModel)]=\"logininfo.newPassword\"  class=\"form-control\" />\r\n\r\n\t   <small class=\"form-text text-danger\" *ngIf=\"logininfoForm.controls?.newPassword?.errors\">{{logininfoForm.controls?.newPassword?.errors?.password.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Reset Password</label>\r\n\t    <input type=\"text\" name=\"resetPassword\" [(ngModel)]=\"logininfo.resetPassword\"  class=\"form-control\" />\r\n\r\n      <small class=\"form-text text-muted\">password with multiple error messages<br/></small>\r\n\t   <small class=\"form-text text-danger\" *ngIf=\"logininfoForm.controls?.resetPassword?.errors\">{{logininfoForm.controls?.resetPassword?.errors?.password.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Old Password</label>\r\n\t    <input type=\"text\" name=\"oldPassword\" [(ngModel)]=\"logininfo.oldPassword\"  class=\"form-control\" />\r\n\r\n      <small class=\"form-text text-muted\">Shows Custom Validation Message<br/></small>\r\n\t   <small class=\"form-text text-danger\" *ngIf=\"logininfoForm.controls?.oldPassword?.errors\">{{logininfoForm.controls?.oldPassword?.errors?.password.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Confirm Password</label>\r\n\t    <input type=\"text\" name=\"confirmPassword\" [(ngModel)]=\"logininfo.confirmPassword\"  class=\"form-control\" />\r\n\r\n      <small class=\"form-text text-muted\">Shows Custom Validation Message using message key<br/></small>\r\n\t   <small class=\"form-text text-danger\" *ngIf=\"logininfoForm.controls?.confirmPassword?.errors\">{{logininfoForm.controls?.confirmPassword?.errors?.password.message}}<br/></small>\t\r\n    </div>\r\n    <button [disabled]=\"!logininfoForm.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","model":"import {  passwordAsync, } from   \"@rxweb/reactive-form-validators\" \r\n\rimport { of } from \"rxjs\" \r\n\r\n   \r\n\r\nexport class LoginInfo {\r\n\r\n\t@passwordAsync({validation:{maxLength: 10,minLength: 5,digit: true,specialCharacter: true} }) \r\n\tnewPassword: string;\r\n\t\r\n\t\r\n\t@passwordAsync({validation:{maxLength: 10,minLength: 5,digit: true,specialCharacter: true}  ,message:{\r\n                  minLength: 'Minimum Character length should be 5.',\r\n                  maxLength: 'MaxLength allowed is 5'\r\n                } }) \r\n\tresetPassword: string;\r\n\t\r\n\t\r\n\t@passwordAsync({validation:{maxLength: 10,minLength: 5,digit: true,specialCharacter: true}  ,message:'Password is not valid' }) \r\n\toldPassword: string;\r\n\t\r\n\t\r\n\t@passwordAsync({validation:{maxLength: 10,minLength: 5,digit: true,specialCharacter: true}  ,messageKey:'passwordMessageKey' }) \r\n\tconfirmPassword: string;\r\n\t\r\n\t\r\n}\r\n","modelName":"login-info.model.ts","json":{}},"validationExample":{"notes":null,"component":null,"html":null,"model":"@passwordAsync({validation:{maxLength: 10,minLength: 5,digit: true,specialCharacter: true} }) \r\nnewPassword: string;\r\n","modelName":null,"json":{}},"validation":{"notes":[],"component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup,Validators } from \"@angular/forms\"\r\nimport { LoginInfo } from './login-info.model';\r\n\r\n@Component({\r\n    selector: 'app-passwordAsync-validation-template-driven-validation-decorators',\r\n    templateUrl: './password-async-validation.component.html'\r\n})\r\nexport class PasswordAsyncValidationTemplateDrivenValidationDecoratorsComponent implements OnInit {\r\n    logininfo: LoginInfo\r\n\t\r\n    constructor(\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n       this.logininfo= new LoginInfo()\r\n    }\r\n}\r\n","html":"<div>\r\n  <form #logininfoForm = \"ngForm\" [rxwebForm]=\"logininfoForm\" [model]=\"logininfo\">\r\n    <div class=\"form-group\">\r\n      <label>New Password</label>\r\n\t    <input type=\"text\" name=\"newPassword\" [(ngModel)]=\"logininfo.newPassword\"  class=\"form-control\" />\r\n\r\n\t   <small class=\"form-text text-danger\" *ngIf=\"logininfoForm.controls?.newPassword?.errors\">{{logininfoForm.controls?.newPassword?.errors?.password.message}}<br/></small>\t\r\n    </div>\r\n    <button [disabled]=\"!logininfoForm.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","model":"import {  passwordAsync, } from   \"@rxweb/reactive-form-validators\" \r\n\rimport { of } from \"rxjs\" \r\n\r\n   \r\n\r\nexport class LoginInfo {\r\n\r\n\t@passwordAsync({validation:{maxLength: 10,minLength: 5,digit: true,specialCharacter: true} }) \r\n\tnewPassword: string;\r\n\t\r\n\t\r\n}\r\n","modelName":"login-info.model.ts","json":{}},"messageExample":{"notes":null,"component":null,"html":null,"model":"@passwordAsync({validation:{maxLength: 10,minLength: 5,digit: true,specialCharacter: true}  ,message:{\r\n                  minLength: 'Minimum Character length should be 5.',\r\n                  maxLength: 'MaxLength allowed is 5'\r\n                } }) \r\nresetPassword: string;\r\n","modelName":null,"json":{}},"message":{"notes":[],"component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup,Validators } from \"@angular/forms\"\r\nimport { LoginInfo } from './login-info.model';\r\n\r\n@Component({\r\n    selector: 'app-passwordAsync-message-template-driven-validation-decorators',\r\n    templateUrl: './password-async-message.component.html'\r\n})\r\nexport class PasswordAsyncMessageTemplateDrivenValidationDecoratorsComponent implements OnInit {\r\n    logininfo: LoginInfo\r\n\t\r\n    constructor(\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n       this.logininfo= new LoginInfo()\r\n    }\r\n}\r\n","html":"<div>\r\n  <form #logininfoForm = \"ngForm\" [rxwebForm]=\"logininfoForm\" [model]=\"logininfo\">\r\n    <div class=\"form-group\">\r\n      <label>Reset Password</label>\r\n\t    <input type=\"text\" name=\"resetPassword\" [(ngModel)]=\"logininfo.resetPassword\"  class=\"form-control\" />\r\n\r\n      <small class=\"form-text text-muted\">password with multiple error messages<br/></small>\r\n\t   <small class=\"form-text text-danger\" *ngIf=\"logininfoForm.controls?.resetPassword?.errors\">{{logininfoForm.controls?.resetPassword?.errors?.password.message}}<br/></small>\t\r\n    </div>\r\n    <button [disabled]=\"!logininfoForm.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","model":"import {  passwordAsync, } from   \"@rxweb/reactive-form-validators\" \r\n\rimport { of } from \"rxjs\" \r\n\r\n   \r\n\r\nexport class LoginInfo {\r\n\r\n\t@passwordAsync({validation:{maxLength: 10,minLength: 5,digit: true,specialCharacter: true}  ,message:{\r\n                  minLength: 'Minimum Character length should be 5.',\r\n                  maxLength: 'MaxLength allowed is 5'\r\n                } }) \r\n\tresetPassword: string;\r\n\t\r\n\t\r\n}\r\n","modelName":"login-info.model.ts","json":{}},"messageKeyExample":{"notes":null,"component":null,"html":null,"model":"@passwordAsync({validation:{maxLength: 10,minLength: 5,digit: true,specialCharacter: true}  ,messageKey:'passwordMessageKey' }) \r\nconfirmPassword: string;\r\n","modelName":null,"json":{}},"messageKey":{"notes":[],"component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup,Validators } from \"@angular/forms\"\r\nimport { LoginInfo } from './login-info.model';\r\n\r\n@Component({\r\n    selector: 'app-passwordAsync-messageKey-template-driven-validation-decorators',\r\n    templateUrl: './password-async-message-key.component.html'\r\n})\r\nexport class PasswordAsyncMessageKeyTemplateDrivenValidationDecoratorsComponent implements OnInit {\r\n    logininfo: LoginInfo\r\n\t\r\n    constructor(\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n       this.logininfo= new LoginInfo()\r\n    }\r\n}\r\n","html":"<div>\r\n  <form #logininfoForm = \"ngForm\" [rxwebForm]=\"logininfoForm\" [model]=\"logininfo\">\r\n    <div class=\"form-group\">\r\n      <label>Confirm Password</label>\r\n\t    <input type=\"text\" name=\"confirmPassword\" [(ngModel)]=\"logininfo.confirmPassword\"  class=\"form-control\" />\r\n\r\n      <small class=\"form-text text-muted\">Shows Custom Validation Message using message key<br/></small>\r\n\t   <small class=\"form-text text-danger\" *ngIf=\"logininfoForm.controls?.confirmPassword?.errors\">{{logininfoForm.controls?.confirmPassword?.errors?.password.message}}<br/></small>\t\r\n    </div>\r\n    <button [disabled]=\"!logininfoForm.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","model":"import {  passwordAsync, } from   \"@rxweb/reactive-form-validators\" \r\n\rimport { of } from \"rxjs\" \r\n\r\n   \r\n\r\nexport class LoginInfo {\r\n\r\n\t@passwordAsync({validation:{maxLength: 10,minLength: 5,digit: true,specialCharacter: true}  ,messageKey:'passwordMessageKey' }) \r\n\tconfirmPassword: string;\r\n\t\r\n\t\r\n}\r\n","modelName":"login-info.model.ts","json":{}},"add":{"notes":[],"component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup,Validators } from \"@angular/forms\"\r\nimport { LoginInfo } from './login-info.model';\r\n\r\n@Component({\r\n    selector: 'app-passwordAsync-add-template-driven-validation-decorators',\r\n    templateUrl: './password-async-add.component.html'\r\n})\r\nexport class PasswordAsyncAddTemplateDrivenValidationDecoratorsComponent implements OnInit {\r\n    logininfo: LoginInfo\r\n\t\r\n    constructor(\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n       this.logininfo= new LoginInfo()\r\n    }\r\n}\r\n","html":"<div>\r\n  <form #logininfoForm = \"ngForm\" [rxwebForm]=\"logininfoForm\" [model]=\"logininfo\">\r\n    <div class=\"form-group\">\r\n      <label>Password</label>\r\n\t    <input type=\"text\" name=\"password\" [(ngModel)]=\"logininfo.password\"  class=\"form-control\" />\r\n\r\n\t   <small class=\"form-text text-danger\" *ngIf=\"logininfoForm.controls?.password?.errors\">{{logininfoForm.controls?.password?.errors?.password.message}}<br/></small>\t\r\n    </div>\r\n    <button [disabled]=\"!logininfoForm.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","model":"import {  passwordAsync, } from   \"@rxweb/reactive-form-validators\" \r\n\rimport { of } from \"rxjs\" \r\n\r\n   \r\n\r\nexport class LoginInfo {\r\n\r\n\t@passwordAsync({validation:{maxLength: 10,minLength: 5,digit: true,specialCharacter: true} }) \r\n\tpassword: string;\r\n\t\r\n\t\r\n}\r\n","modelName":"login-info.model.ts","json":{}}}