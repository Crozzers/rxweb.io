{"complete":{"notes":null,"component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from \"@angular/forms\"\r\nimport { RxFormBuilder } from '@rxweb/reactive-form-validators';\r\n\r\nimport { LoginInfo } from './login-info.model';\r\n\r\n@Component({\r\n    selector: 'app-passwordAsync-complete',\r\n    templateUrl: './password-async-complete.component.html'\r\n})\r\nexport class PasswordAsyncCompleteComponent implements OnInit {\r\n    loginInfoFormGroup: FormGroup\r\n\r\n    constructor(\r\n        private formBuilder: RxFormBuilder    ) { }\r\n\r\n    ngOnInit() {\r\n        let loginInfo = new LoginInfo();\r\n        this.loginInfoFormGroup = this.formBuilder.formGroup(loginInfo);\r\n    }\r\n}\r\n","html":"<div>\r\n  <form  [formGroup]=\"loginInfoFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label>New Password</label>\r\n      <input type=\"text\" formControlName=\"newPassword\" class=\"form-control\"  />\r\n     <small class=\"form-text text-danger\" *ngIf=\"loginInfoFormGroup.controls.newPassword.errors\">{{loginInfoFormGroup.controls.newPassword.errors.password.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Reset Password</label>\r\n      <input type=\"text\" formControlName=\"resetPassword\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">password with multiple error messages<br/></small>\r\n     <small class=\"form-text text-danger\" *ngIf=\"loginInfoFormGroup.controls.resetPassword.errors\">{{loginInfoFormGroup.controls.resetPassword.errors.password.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Old Password</label>\r\n      <input type=\"text\" formControlName=\"oldPassword\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">Shows Custom Validation Message<br/></small>\r\n     <small class=\"form-text text-danger\" *ngIf=\"loginInfoFormGroup.controls.oldPassword.errors\">{{loginInfoFormGroup.controls.oldPassword.errors.password.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Confirm Password</label>\r\n      <input type=\"text\" formControlName=\"confirmPassword\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">Shows Custom Validation Message using message key<br/></small>\r\n     <small class=\"form-text text-danger\" *ngIf=\"loginInfoFormGroup.controls.confirmPassword.errors\">{{loginInfoFormGroup.controls.confirmPassword.errors.passwordMessageKey.message}}<br/></small>\t\t\r\n    </div>\r\n    <button [disabled]=\"!loginInfoFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","model":"import {  passwordAsync, } from   \"@rxweb/reactive-form-validators\" \r\n\rimport { of } from \"rxjs\" \r\n\r\n   \r\n\r\nexport class LoginInfo {\r\n\r\n\t@passwordAsync({validation:{maxLength: 10,minLength: 5,digit: true,specialCharacter: true} }) \r\n\tnewPassword: string;\r\n\t\r\n\t\r\n\t@passwordAsync({validation:{maxLength: 10,minLength: 5,digit: true,specialCharacter: true}  ,message:{\r\n                  minLength: 'Minimum Character length should be 5.',\r\n                  maxLength: 'MaxLength allowed is 5'\r\n                } }) \r\n\tresetPassword: string;\r\n\t\r\n\t\r\n\t@passwordAsync({validation:{maxLength: 10,minLength: 5,digit: true,specialCharacter: true}  ,message:'Password is not valid' }) \r\n\toldPassword: string;\r\n\t\r\n\t\r\n\t@passwordAsync({validation:{maxLength: 10,minLength: 5,digit: true,specialCharacter: true}  ,messageKey:'passwordMessageKey' }) \r\n\tconfirmPassword: string;\r\n\t\r\n\t\r\n}\r\n","modelName":"login-info.model.ts","json":{}},"validationExample":{"notes":null,"component":null,"html":null,"model":"@passwordAsync({validation:{maxLength: 10,minLength: 5,digit: true,specialCharacter: true} }) \r\nnewPassword: string;\r\n","modelName":null,"json":{}},"validation":{"notes":null,"component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from \"@angular/forms\"\r\nimport { RxFormBuilder } from '@rxweb/reactive-form-validators';\r\n\r\nimport { LoginInfo } from './login-info.model';\r\n\r\n@Component({\r\n    selector: 'app-passwordAsync-validation',\r\n    templateUrl: './password-async-validation.component.html'\r\n})\r\nexport class PasswordAsyncValidationComponent implements OnInit {\r\n    loginInfoFormGroup: FormGroup\r\n\r\n    constructor(\r\n        private formBuilder: RxFormBuilder    ) { }\r\n\r\n    ngOnInit() {\r\n        let loginInfo = new LoginInfo();\r\n        this.loginInfoFormGroup = this.formBuilder.formGroup(loginInfo);\r\n    }\r\n}\r\n","html":"<div>\r\n  <form  [formGroup]=\"loginInfoFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label>New Password</label>\r\n      <input type=\"text\" formControlName=\"newPassword\" class=\"form-control\"  />\r\n     <small class=\"form-text text-danger\" *ngIf=\"loginInfoFormGroup.controls.newPassword.errors\">{{loginInfoFormGroup.controls.newPassword.errors.password.message}}<br/></small>\t\r\n    </div>\r\n    <button [disabled]=\"!loginInfoFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","model":"import {  passwordAsync, } from   \"@rxweb/reactive-form-validators\" \r\n\rimport { of } from \"rxjs\" \r\n\r\n   \r\n\r\nexport class LoginInfo {\r\n\r\n\t@passwordAsync({validation:{maxLength: 10,minLength: 5,digit: true,specialCharacter: true} }) \r\n\tnewPassword: string;\r\n\t\r\n\t\r\n}\r\n","modelName":"login-info.model.ts","json":{}},"messageExample":{"notes":null,"component":null,"html":null,"model":"@passwordAsync({validation:{maxLength: 10,minLength: 5,digit: true,specialCharacter: true}  ,message:{\r\n                  minLength: 'Minimum Character length should be 5.',\r\n                  maxLength: 'MaxLength allowed is 5'\r\n                } }) \r\nresetPassword: string;\r\n","modelName":null,"json":{}},"message":{"notes":null,"component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from \"@angular/forms\"\r\nimport { RxFormBuilder } from '@rxweb/reactive-form-validators';\r\n\r\nimport { LoginInfo } from './login-info.model';\r\n\r\n@Component({\r\n    selector: 'app-passwordAsync-message',\r\n    templateUrl: './password-async-message.component.html'\r\n})\r\nexport class PasswordAsyncMessageComponent implements OnInit {\r\n    loginInfoFormGroup: FormGroup\r\n\r\n    constructor(\r\n        private formBuilder: RxFormBuilder    ) { }\r\n\r\n    ngOnInit() {\r\n        let loginInfo = new LoginInfo();\r\n        this.loginInfoFormGroup = this.formBuilder.formGroup(loginInfo);\r\n    }\r\n}\r\n","html":"<div>\r\n  <form  [formGroup]=\"loginInfoFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label>Reset Password</label>\r\n      <input type=\"text\" formControlName=\"resetPassword\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">password with multiple error messages<br/></small>\r\n     <small class=\"form-text text-danger\" *ngIf=\"loginInfoFormGroup.controls.resetPassword.errors\">{{loginInfoFormGroup.controls.resetPassword.errors.password.message}}<br/></small>\t\r\n    </div>\r\n    <button [disabled]=\"!loginInfoFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","model":"import {  passwordAsync, } from   \"@rxweb/reactive-form-validators\" \r\n\rimport { of } from \"rxjs\" \r\n\r\n   \r\n\r\nexport class LoginInfo {\r\n\r\n\t@passwordAsync({validation:{maxLength: 10,minLength: 5,digit: true,specialCharacter: true}  ,message:{\r\n                  minLength: 'Minimum Character length should be 5.',\r\n                  maxLength: 'MaxLength allowed is 5'\r\n                } }) \r\n\tresetPassword: string;\r\n\t\r\n\t\r\n}\r\n","modelName":"login-info.model.ts","json":{}},"messageKeyExample":{"notes":null,"component":null,"html":null,"model":"@passwordAsync({validation:{maxLength: 10,minLength: 5,digit: true,specialCharacter: true}  ,messageKey:'passwordMessageKey' }) \r\nconfirmPassword: string;\r\n","modelName":null,"json":{}},"messageKey":{"notes":null,"component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from \"@angular/forms\"\r\nimport { RxFormBuilder } from '@rxweb/reactive-form-validators';\r\n\r\nimport { LoginInfo } from './login-info.model';\r\n\r\n@Component({\r\n    selector: 'app-passwordAsync-messageKey',\r\n    templateUrl: './password-async-message-key.component.html'\r\n})\r\nexport class PasswordAsyncMessageKeyComponent implements OnInit {\r\n    loginInfoFormGroup: FormGroup\r\n\r\n    constructor(\r\n        private formBuilder: RxFormBuilder    ) { }\r\n\r\n    ngOnInit() {\r\n        let loginInfo = new LoginInfo();\r\n        this.loginInfoFormGroup = this.formBuilder.formGroup(loginInfo);\r\n    }\r\n}\r\n","html":"<div>\r\n  <form  [formGroup]=\"loginInfoFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label>Confirm Password</label>\r\n      <input type=\"text\" formControlName=\"confirmPassword\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">Shows Custom Validation Message using message key<br/></small>\r\n     <small class=\"form-text text-danger\" *ngIf=\"loginInfoFormGroup.controls.confirmPassword.errors\">{{loginInfoFormGroup.controls.confirmPassword.errors.passwordMessageKey.message}}<br/></small>\t\t\r\n    </div>\r\n    <button [disabled]=\"!loginInfoFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","model":"import {  passwordAsync, } from   \"@rxweb/reactive-form-validators\" \r\n\rimport { of } from \"rxjs\" \r\n\r\n   \r\n\r\nexport class LoginInfo {\r\n\r\n\t@passwordAsync({validation:{maxLength: 10,minLength: 5,digit: true,specialCharacter: true}  ,messageKey:'passwordMessageKey' }) \r\n\tconfirmPassword: string;\r\n\t\r\n\t\r\n}\r\n","modelName":"login-info.model.ts","json":{}},"dynamic":{"notes":null,"component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from \"@angular/forms\"\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { environment } from 'src/environments/environment';\r\nimport { RxFormBuilder } from '@rxweb/reactive-form-validators';\r\nimport { FormBuilderConfiguration,} from '@rxweb/reactive-form-validators';\r\n\r\nimport { LoginInfo } from './login-info.model';\r\n\r\n@Component({\r\n    selector: 'app-passwordAsync-dynamic',\r\n    templateUrl: './password-async-dynamic.component.html'\r\n})\r\nexport class PasswordAsyncDynamicComponent implements OnInit {\r\n    loginInfoFormGroup: FormGroup\r\n\r\n    constructor(\r\n        private formBuilder: RxFormBuilder,private http: HttpClient    ) { }\r\n\r\n    ngOnInit() {\r\n        let loginInfo = new LoginInfo();\r\n        let formBuilderConfiguration = new FormBuilderConfiguration();\r\n\t\tthis.http.get('assets/examples/reactive-form-validators/decorators/passwordAsync/dynamic/dynamic.json?v=' + environment.appVersion).subscribe(dynamic => {\r\n            formBuilderConfiguration.dynamicValidation = JSON.parse(JSON.stringify(dynamic));\r\n\t\t\tthis.loginInfoFormGroup = this.formBuilder.formGroup(loginInfo,formBuilderConfiguration);\r\n        })\r\n    }\r\n}\r\n","html":"<div>\r\n  <form  *ngIf=\"loginInfoFormGroup\"  [formGroup]=\"loginInfoFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label>New Password</label>\r\n      <input type=\"text\" formControlName=\"newPassword\" class=\"form-control\"  />\r\n     <small class=\"form-text text-danger\" *ngIf=\"loginInfoFormGroup.controls.newPassword.errors\">{{loginInfoFormGroup.controls.newPassword.errors.password.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Reset Password</label>\r\n      <input type=\"text\" formControlName=\"resetPassword\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">password with multiple error messages<br/></small>\r\n     <small class=\"form-text text-danger\" *ngIf=\"loginInfoFormGroup.controls.resetPassword.errors\">{{loginInfoFormGroup.controls.resetPassword.errors.password.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Old Password</label>\r\n      <input type=\"text\" formControlName=\"oldPassword\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">Shows Custom Validation Message<br/></small>\r\n     <small class=\"form-text text-danger\" *ngIf=\"loginInfoFormGroup.controls.oldPassword.errors\">{{loginInfoFormGroup.controls.oldPassword.errors.password.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Confirm Password</label>\r\n      <input type=\"text\" formControlName=\"confirmPassword\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">Shows Custom Validation Message using message key<br/></small>\r\n     <small class=\"form-text text-danger\" *ngIf=\"loginInfoFormGroup.controls.confirmPassword.errors\">{{loginInfoFormGroup.controls.confirmPassword.errors.passwordMessageKey.message}}<br/></small>\t\t\r\n    </div>\r\n    <button [disabled]=\"!loginInfoFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","model":"import {  passwordAsync,prop, } from   \"@rxweb/reactive-form-validators\" \r\n\rimport { of } from \"rxjs\" \r\n\r\n   \r\n\r\nexport class LoginInfo {\r\n\r\n\t@prop()\r\n\tnewPassword: string;\r\n\r\n\t@prop()\r\n\tresetPassword: string;\r\n\r\n\t@prop()\r\n\toldPassword: string;\r\n\r\n\t@prop()\r\n\tconfirmPassword: string;\r\n\r\n}\r\n","modelName":"login-info.model.ts","json":{"dynamic.json":"{\"newPassword\":{\"passwordAsync\":{\"validation\":\"{maxLength: 10,minLength: 5,digit: true,specialCharacter: true}\"}},\"resetPassword\":{\"passwordAsync\":{\"validation\":\"{maxLength: 10,minLength: 5,digit: true,specialCharacter: true}\",\"message\":\"{\\r\\n                  minLength: Minimum Character length should be 5.,\\r\\n                  maxLength: MaxLength allowed is 5\\r\\n                }\"}},\"oldPassword\":{\"passwordAsync\":{\"validation\":\"{maxLength: 10,minLength: 5,digit: true,specialCharacter: true}\",\"message\":\"Password is not valid\"}},\"confirmPassword\":{\"passwordAsync\":{\"validation\":\"{maxLength: 10,minLength: 5,digit: true,specialCharacter: true}\",\"messageKey\":\"passwordMessageKey\"}}}"}},"add":{"notes":null,"component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from \"@angular/forms\"\r\nimport { RxFormBuilder } from '@rxweb/reactive-form-validators';\r\n\r\nimport { LoginInfo } from './login-info.model';\r\n\r\n@Component({\r\n    selector: 'app-passwordAsync-add',\r\n    templateUrl: './password-async-add.component.html'\r\n})\r\nexport class PasswordAsyncAddComponent implements OnInit {\r\n    loginInfoFormGroup: FormGroup\r\n\r\n    constructor(\r\n        private formBuilder: RxFormBuilder    ) { }\r\n\r\n    ngOnInit() {\r\n        let loginInfo = new LoginInfo();\r\n        this.loginInfoFormGroup = this.formBuilder.formGroup(loginInfo);\r\n    }\r\n}\r\n","html":"<div>\r\n  <form  [formGroup]=\"loginInfoFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label>Password</label>\r\n      <input type=\"text\" formControlName=\"password\" class=\"form-control\"  />\r\n     <small class=\"form-text text-danger\" *ngIf=\"loginInfoFormGroup.controls.password.errors\">{{loginInfoFormGroup.controls.password.errors.password.message}}<br/></small>\t\r\n    </div>\r\n    <button [disabled]=\"!loginInfoFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","model":"import {  passwordAsync, } from   \"@rxweb/reactive-form-validators\" \r\n\rimport { of } from \"rxjs\" \r\n\r\n   \r\n\r\nexport class LoginInfo {\r\n\r\n\t@passwordAsync({validation:{maxLength: 10,minLength: 5,digit: true,specialCharacter: true} }) \r\n\tpassword: string;\r\n\t\r\n\t\r\n}\r\n","modelName":"login-info.model.ts","json":{}},"edit":{"notes":null,"component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from \"@angular/forms\"\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { environment } from 'src/environments/environment';\r\nimport { RxFormBuilder } from '@rxweb/reactive-form-validators';\r\n\r\nimport { LoginInfo } from './login-info.model';\r\n\r\n@Component({\r\n    selector: 'app-passwordAsync-edit',\r\n    templateUrl: './password-async-edit.component.html'\r\n})\r\nexport class PasswordAsyncEditComponent implements OnInit {\r\n    loginInfoFormGroup: FormGroup\r\n\r\n    constructor(\r\n        private formBuilder: RxFormBuilder,private http: HttpClient    ) { }\r\n\r\n    ngOnInit() {\r\n        this.http.get('assets/examples/reactive-form-validators/decorators/passwordAsync/edit/login-info-data.json?v=' + environment.appVersion).subscribe(loginInfo => {\r\n            this.loginInfoFormGroup = this.formBuilder.formGroup<LoginInfo>(LoginInfo,loginInfo);\r\n        })\r\n    }\r\n}\r\n","html":"<div>\r\n  <form  *ngIf=\"loginInfoFormGroup\"  [formGroup]=\"loginInfoFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label>Password</label>\r\n      <input type=\"text\" formControlName=\"password\" class=\"form-control\"  />\r\n     <small class=\"form-text text-danger\" *ngIf=\"loginInfoFormGroup.controls.password.errors\">{{loginInfoFormGroup.controls.password.errors.password.message}}<br/></small>\t\r\n    </div>\r\n    <button [disabled]=\"!loginInfoFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","model":"import {  passwordAsync, } from   \"@rxweb/reactive-form-validators\" \r\n\rimport { of } from \"rxjs\" \r\n\r\n   \r\n\r\nexport class LoginInfo {\r\n\r\n\t@passwordAsync({validation:{maxLength: 10,minLength: 5,digit: true,specialCharacter: true} }) \r\n\tpassword: string;\r\n\t\r\n\t\r\n}\r\n","modelName":"login-info.model.ts","json":{"login-info-data.json":"{\"password\":\"Admin@123\"}"}}}