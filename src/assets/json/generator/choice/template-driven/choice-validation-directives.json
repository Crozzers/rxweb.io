{
  "complete": {
    "notes": [],
    "component": "import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from \"@angular/forms\"\r\nimport { RxFormBuilder } from '@rxweb/reactive-form-validators';\r\n\r\nimport { EmployeeInfo } from './employee-info.model';\r\nimport { HttpClient } from '@angular/common/http';\r\n\r\n@Component({\r\n    selector: 'app-choice-complete-template-driven-validation-directives',\r\n    templateUrl: './choice-complete.component.html'\r\n})\r\nexport class ChoiceCompleteTemplateDrivenValidationDirectivesComponent implements OnInit {\r\n    employeeInfo: EmployeeInfo\r\n\r\n    selectedQualifications: string[] = [];\r\n    selectedSkills: string[] = [];\r\n    selectedHobbies: string[] = [];\r\n    selectedProjectDomains : string[] = [];\r\n    selectedLanguages:string[] = [];\r\n\r\n    constructor(\r\n        private formBuilder: RxFormBuilder, private http: HttpClient) { }\r\n\r\n    qualificationsArray: string[] = [];\r\n    languagesArray: string[] = [];\r\n    skillsArray: string[] = [];\r\n    hobbiesArray: string[] = [];\r\n    projectDomainsArray : string[] = [];\r\n\r\n    ngOnInit() {\r\n        this.employeeInfo = new EmployeeInfo();\r\n        this.http.get(\"assets/examples/reactive-form-validators/template-driven/validation-directives/choice/complete/choice.json\").subscribe(response => {\r\n            this.qualificationsArray = response['qualificationsArray'];\r\n            this.skillsArray = response['skillsArray'];\r\n            this.languagesArray = response['languagesArray'];\r\n            this.hobbiesArray = response['hobbiesArray'];\r\n            this.projectDomainsArray = response['projectDomainsArray'];\r\n        })\r\n\r\n    }\r\n\r\n    addProjectDomain(element: any, index: number) {\r\n        element.checked ? this.selectedProjectDomains.push(element.value) : this.selectedProjectDomains.splice(index, 1);\r\n        this.employeeInfo.projectDomains = this.selectedProjectDomains;\r\n    }\r\n\r\n    addQualification(element: any, index: number) {\r\n        element.checked ? this.selectedQualifications.push(element.value) : this.selectedQualifications.splice(index, 1);\r\n        this.employeeInfo.qualifications = this.selectedQualifications;\r\n    }\r\n    \r\n    addSkill(element: any, index: number) {\r\n        element.checked ? this.selectedSkills.push(element.value) : this.selectedSkills.splice(index, 1);\r\n        this.employeeInfo.skills = this.selectedSkills;\r\n    }\r\n    \r\n    addHobby(element: any, index: number) {\r\n        element.checked ? this.selectedHobbies.push(element.value) : this.selectedHobbies.splice(index, 1);\r\n        this.employeeInfo.hobbies = this.selectedHobbies;\r\n    }\r\n\r\n    addLanguages(element: any, index: number) {\r\n        element.checked ? this.selectedLanguages.push(element.value) : this.selectedLanguages.splice(index, 1);\r\n        this.employeeInfo.languages = this.selectedLanguages;\r\n    }\r\n}",
    "html": "<div>\r\n  <form #employeeInfoForm=\"ngForm\" [rxwebForm]=\"employeeInfoForm\">\r\n    <div class=\"form-group\">\r\n      <label>Department</label>\r\n      <input type=\"text\" name=\"department\" [ngModel]=\"employeeInfo.department\" class=\"form-control\" placeholder=\"Enter any department\" />\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Project Domains</label>\r\n      <div class=\"form-check\" *ngFor=\"let tag of projectDomainsArray; let i = index;\">\r\n        <h4>\r\n          <input (click)=\"addProjectDomain($event.target,i)\" [ngModel]=\"employeeInfo.projectDomains[i]\" type=\"checkbox\"\r\n            value=\"{{tag.name}}\" name=\"projectDomains{{i}}\" /> {{tag.name}}\r\n        </h4>\r\n      </div>\r\n      <br />\r\n      <small class=\"form-text text-muted\">Select atleast 3 option.</small><br>\r\n      <small class=\"form-text text-danger\" *ngIf=\"employeeInfoForm.controls?.projectDomains?.errors\">{{employeeInfoForm.controls?.projectDomains?.errors?.choice.message}}</small>\r\n      <br />\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Qualifications</label>\r\n      <div class=\"form-check\" *ngFor=\"let tag of qualificationsArray; let i = index;\">\r\n        <h4>\r\n          <input (click)=\"addQualification($event.target,i)\" [ngModel]=\"employeeInfo.qualifications[i]\" type=\"checkbox\"\r\n            value=\"{{tag.name}}\" name=\"qualifications{{i}}\" /> {{tag.name}}\r\n        </h4>\r\n      </div>\r\n      <br />\r\n      <small class=\"form-text text-danger\" *ngIf=\"employeeInfoForm.controls?.qualifications?.errors\">{{employeeInfoForm.controls?.qualifications?.errors?.choice.message}}</small>\r\n      <br />\r\n      <small class=\"form-text text-muted\">To apply the validation on 'Qualifications' field, enter 'DotNet' in\r\n        'Department' field</small><br />\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Languages</label><small>( With Conditional Expression )</small><br>\r\n      <div class=\"form-check\" *ngFor=\"let tag of languagesArray; let i = index;\">\r\n        <h4>\r\n          <input (click)=\"addLanguages($event.target,i)\" [ngModel]=\"employeeInfo.languages[i]\" name=\"languages{{i}}\" type=\"checkbox\" value=\"{{tag.name}}\" />\r\n          {{tag.name}}\r\n        </h4>\r\n      </div>\r\n      <br />\r\n      <small class=\"form-text text-danger\" *ngIf=\"employeeInfoForm.controls?.languages?.errors\">{{employeeInfoForm.controls?.languages?.errors?.choice.message}}</small>\r\n      <br />\r\n      <small class=\"form-text text-muted\">To apply the validation on 'Qualifications' field, enter 'DotNet' in\r\n        'Department' field</small><br>\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Skills</label><small>( With Conditional Expression )</small><br>\r\n      <div class=\"form-check\" *ngFor=\"let tag of skillsArray; let i = index;\">\r\n        <h4>\r\n          <input (click)=\"addSkill($event.target,i)\" [ngModel]=\"employeeInfo.skills[i]\" type=\"checkbox\" value=\"{{tag.name}}\" name=\"skills{{i}}\" />\r\n          {{tag.name}}\r\n        </h4>\r\n      </div>\r\n      <br />\r\n      <small class=\"form-text text-danger\" *ngIf=\"employeeInfoForm.controls?.skills?.errors\">{{employeeInfoForm.controls?.skills?.errors?.choice.message}}</small>\r\n      <br />\r\n      <small class=\"form-text text-muted\">To apply the validation on 'Skills' field, enter 'DotNet' in 'Department'\r\n        field</small><br>\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Hobbies</label>\r\n      <div class=\"form-check\" *ngFor=\"let tag of hobbiesArray; let i = index;\">\r\n        <h4>\r\n          <input (click)=\"addHobby($event.target,i)\" [ngModel]=\"employeeInfo.hobbies\" type=\"checkbox\" value=\"{{tag.name}}\" name=\"hobbies{{i}}\" />\r\n          {{tag.name}}\r\n        </h4>\r\n      </div>\r\n      <br />\r\n      <small class=\"form-text text-danger\" *ngIf=\"employeeInfoForm.controls?.hobbies?.errors\">{{employeeInfoForm.controls?.hobbies?.errors?.choice.message}}</small>\r\n      <br />\r\n      <small class=\"form-text text-muted\">Shows custom message</small><br />\r\n    </div>\r\n    <button [disabled]=\"!employeeInfoForm.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>",
    "model": "import {  prop, choice  } from \"@rxweb/reactive-form-validators\"\r\n\r\nexport class EmployeeInfo{\r\n\r\n    @prop()\r\n    department: string;\r\n    \r\n    @choice({minLength:3})\r\n    projectDomains: string[] = [];\r\n\r\n    @choice({maxLength:8})\r\n\tqualifications: string[] = [];\r\n\r\n    @choice({minLength:3, conditionalExpression: (x,y) => x.department == \"DotNet\" })\r\n\tlanguages: string[] = [];\r\n\r\n    @choice({minLength:3, conditionalExpression: \"x => x.department =='DotNet'\"})\r\n    skills: string[] = [];\r\n\r\n    @choice({maxLength:5,message: \"Please select upto 5 hobby\"})\r\n    hobbies: string[] = [];\r\n}",
    "modelName": "employee-info.model.ts",
    "json": { "choice.json": "{\r\n    \"projectsArray\": [\r\n        {\r\n            \"name\": \"ECommerce\",\r\n            \"checked\": false\r\n        },\r\n        {\r\n            \"name\": \"Banking\",\r\n            \"checked\": false\r\n        },\r\n        {\r\n            \"name\":\"Educational\",\r\n            \"checked\":false\r\n        },\r\n        {\r\n            \"name\":\"Gaming\",\r\n            \"checked\":false\r\n        }\r\n    ],\r\n    \"qualificationsArray\": [\r\n        {\r\n            \"name\": \"Secondary\",\r\n            \"checked\": false\r\n        },\r\n        {\r\n            \"name\": \"Senior Secondary\",\r\n            \"checked\": false\r\n        },\r\n        {\r\n            \"name\":\"B.Tech.\",\r\n            \"checked\":false\r\n        },\r\n        {\r\n            \"name\":\"M.Tech.\",\r\n            \"checked\":false\r\n        },\r\n        {\r\n            \"name\":\"B.C.A.\",\r\n            \"checked\":false\r\n        },\r\n        {\r\n            \"name\":\"M.C.A.\",\r\n            \"checked\":false\r\n        }\r\n    ],\r\n    \"skillsArray\":[\r\n        {\r\n            \"name\":\"MVC\",\r\n            \"checked\":false\r\n        },\r\n        {\r\n            \"name\":\"AngularJS\",\r\n            \"checked\":false\r\n        },\r\n        {\r\n            \"name\":\"Angular 5\",\r\n            \"checked\":false\r\n        },\r\n        {\r\n            \"name\":\"C#\",\r\n            \"checked\":false\r\n        },\r\n        {\r\n            \"name\":\"Web Api\",\r\n            \"checked\":false\r\n        },\r\n        {\r\n            \"name\":\"SQL Server\",\r\n            \"checked\":false\r\n        }\r\n    ],\r\n    \"hobbiesArray\":[\r\n        {\r\n            \"name\":\"Drawing\",\r\n            \"checked\":false\r\n        },\r\n        {\r\n            \"name\":\"Singing\",\r\n            \"checked\":false\r\n        },\r\n        {\r\n            \"name\":\"Dancing\",\r\n            \"checked\":false\r\n        },\r\n        {\r\n            \"name\":\"Travelling\",\r\n            \"checked\":false\r\n        },\r\n        {\r\n            \"name\":\"Sports\",\r\n            \"checked\":false\r\n        }\r\n    ],\r\n    \"languagesArray\":[\r\n        {\r\n            \"name\":\"English\",\r\n            \"checked\":false\r\n        },\r\n        {\r\n            \"name\":\"Gujarati\",\r\n            \"checked\":false\r\n        },\r\n        {\r\n            \"name\":\"Hindi\",\r\n            \"checked\":false\r\n        },\r\n        {\r\n            \"name\":\"Marathi\",\r\n            \"checked\":false\r\n        },\r\n        {\r\n            \"name\":\"Telugu\",\r\n            \"checked\":false\r\n        }\r\n    ]\r\n}" }
  },
  "conditionalExpressionExampleFunction": {
    "notes": null,
    "component": null,
    "html": null,
    "model": "@choice({minLength:3, conditionalExpression: (x,y) => x.department =='DotNet'})\r\n\tqualifications: string[] = [];",
    "modelName": null,
    "json": null
  },
  "conditionalExpression": {
    "notes": [],
    "component": "import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from \"@angular/forms\"\r\nimport { RxFormBuilder } from '@rxweb/reactive-form-validators';\r\n\r\nimport { EmployeeInfo } from './employee-info.model';\r\nimport { HttpClient } from '@angular/common/http';\r\n\r\n@Component({\r\n    selector: 'app-choice-conditionalExpression-template-driven-validation-directives',\r\n    templateUrl: './choice-conditional-expression.component.html'\r\n})\r\nexport class ChoiceConditionalExpressionTemplateDrivenValidationDirectivesComponent implements OnInit {\r\n    employeeInfo = new EmployeeInfo();\r\n\r\n    selectedQualifications: string[] = [];\r\n    selectedSkills: string[] = [];\r\n\r\n    constructor(\r\n        private formBuilder: RxFormBuilder, private http: HttpClient) { }\r\n\r\n    qualificationsArray: string[] = [];\r\n    skillsArray: string[] = [];\r\n\r\n    ngOnInit() {\r\n        this.employeeInfo = new EmployeeInfo();\r\n        this.http.get(\"assets/examples/reactive-form-validators/template-driven/validation-directives/choice/conditionalExpression/choice.json\").subscribe(response => {\r\n            this.qualificationsArray = response['qualificationsArray'];\r\n            this.skillsArray = response['skillsArray'];\r\n        })\r\n    }\r\n\r\n    addQualification(element: any, index: number) {\r\n        element.checked ? this.selectedQualifications.push(element.value) : this.selectedQualifications.splice(index, 1);\r\n        this.employeeInfo.qualifications = this.selectedQualifications;\r\n    }\r\n    \r\n    addSkill(element: any, index: number) {\r\n        element.checked ? this.selectedSkills.push(element.value) : this.selectedSkills.splice(index, 1);\r\n        this.employeeInfo.skills = this.selectedSkills;\r\n    }\r\n\r\n}",
    "html": "<div>\r\n  <form #employeeInfoForm=\"ngForm\" [rxwebForm]=\"employeeInfoForm\">\r\n    <div class=\"form-group\">\r\n      <label>Department</label>\r\n      <input type=\"text\" [ngModel]=\"employeeInfo.department\" class=\"form-control\" placeholder=\"Enter any department\"\r\n        [ngModelOptions]=\"{standalone: true}\" />\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Qualifications</label>\r\n      <div class=\"form-check\" *ngFor=\"let tag of qualificationsArray; let i = index;\">\r\n        <h4>\r\n          <input (click)=\"addQualification($event.target,i)\" [ngModel]=\"employeeInfo.qualifications\" type=\"checkbox\"\r\n            value=\"{{tag.name}}\" [ngModelOptions]=\"{standalone: true}\" /> {{tag.name}}\r\n        </h4>\r\n      </div>\r\n      <br />\r\n      <small class=\"form-text text-danger\" *ngIf=\"employeeInfoForm.controls?.qualifications?.errors\">{{employeeInfoForm.controls?.qualifications?.errors?.choice.message}}</small>\r\n      <br />\r\n      <small class=\"form-text text-muted\">To apply the validation on 'Qualifications' field, enter 'DotNet' in\r\n        'Department' field</small><br />\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Skills</label><small>( With Conditional Expression )</small><br>\r\n      <div class=\"form-check\" *ngFor=\"let tag of skillsArray; let i = index;\">\r\n        <h4>\r\n          <input (click)=\"addSkill($event.target,i)\" [ngModel]=\"employeeInfo.skills\" type=\"checkbox\" value=\"{{tag.name}}\"\r\n            [ngModelOptions]=\"{standalone: true}\" /> {{tag.name}}\r\n        </h4>\r\n      </div>\r\n      <br />\r\n      <small class=\"form-text text-danger\" *ngIf=\"employeeInfoForm.controls?.skills?.errors\">{{employeeInfoForm.controls?.skills?.errors?.choice.message}}<br /></small>\r\n      <small class=\"form-text text-muted\">To apply the validation on 'Skills' field, enter 'DotNet' in 'Department'\r\n        field</small><br />\r\n    </div>\r\n    <button [disabled]=\"!employeeInfoForm.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>",
    "model": "import {  prop, choice  } from \"@rxweb/reactive-form-validators\"\r\n\r\nexport class EmployeeInfo{\r\n\r\n    @prop()\r\n    department: string;\r\n\r\n    @choice({minLength:3, conditionalExpression: (x,y) => x.department =='DotNet'})\r\n\tqualifications: string[] = [];\r\n\r\n    @choice({maxLength: 5, conditionalExpression: \"x => x.department =='DotNet'\"})\r\n    skills: string[] = [];\r\n\r\n}",
    "modelName": "employee-info.model.ts",
    "json": { "choice.json": "{\r\n    \"qualificationsArray\": [\r\n        {\r\n            \"name\": \"Secondary\",\r\n            \"checked\": false\r\n        },\r\n        {\r\n            \"name\": \"Senior Secondary\",\r\n            \"checked\": false\r\n        },\r\n        {\r\n            \"name\":\"B.Tech.\",\r\n            \"checked\":false\r\n        },\r\n        {\r\n            \"name\":\"M.Tech.\",\r\n            \"checked\":false\r\n        },\r\n        {\r\n            \"name\":\"B.C.A.\",\r\n            \"checked\":false\r\n        },\r\n        {\r\n            \"name\":\"M.C.A.\",\r\n            \"checked\":false\r\n        }\r\n    ],\r\n    \"skillsArray\":[\r\n        {\r\n            \"name\":\"MVC\",\r\n            \"checked\":false\r\n        },\r\n        {\r\n            \"name\":\"AngularJS\",\r\n            \"checked\":false\r\n        },\r\n        {\r\n            \"name\":\"Angular 5\",\r\n            \"checked\":false\r\n        },\r\n        {\r\n            \"name\":\"C#\",\r\n            \"checked\":false\r\n        },\r\n        {\r\n            \"name\":\"Web Api\",\r\n            \"checked\":false\r\n        },\r\n        {\r\n            \"name\":\"SQL Server\",\r\n            \"checked\":false\r\n        }\r\n    ]\r\n}" }
  },
  "conditionalExpressionExampleString": {
    "notes": null,
    "component": null,
    "html": null,
    "model": "@choice({maxLength: 5, conditionalExpression: \"x => x.department =='DotNet'\"})\r\n    skills: string[] = [];",
    "modelName": null,
    "json": null
  },
  "maxLengthExample": {
    "notes": null,
    "component": null,
    "html": null,
    "model": "@choice({maxLength:4})\r\n    hobbies: string[] = [];",
    "modelName": null,
    "json": null
  },
  "maxLength": {
    "notes": null,
    "component": "import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from \"@angular/forms\"\r\nimport { RxFormBuilder } from '@rxweb/reactive-form-validators';\r\n\r\nimport { EmployeeInfo } from './employee-info.model';\r\nimport { HttpClient } from '@angular/common/http';\r\n\r\n@Component({\r\n    selector: 'app-choice-maxLength-template-driven-validation-directives',\r\n    templateUrl: './choice-max-length.component.html'\r\n})\r\n\r\nexport class ChoiceMaxLengthTemplateDrivenValidationDirectivesComponent implements OnInit {\r\n    employeeInfo = new EmployeeInfo();\r\n\r\n    selectedHobbies: string[] = [];\r\n\r\n    constructor(\r\n        private formBuilder: RxFormBuilder, private http: HttpClient) { }\r\n\r\n        hobbiesArray: string[] = [];\r\n\r\n    ngOnInit() {\r\n        this.employeeInfo = new EmployeeInfo();\r\n        this.http.get(\"assets/examples/reactive-form-validators/template-driven/validation-directives/choice/maxLength/choice.json\").subscribe(response => {\r\n            this.hobbiesArray = response['hobbiesArray'];\r\n        })\r\n\r\n    }\r\n\r\n    addHobbies(element: any, index: number) {\r\n        element.checked ? this.selectedHobbies.push(element.value) : this.selectedHobbies.splice(index, 1);\r\n        this.employeeInfo.hobbies = this.selectedHobbies;\r\n    }\r\n}",
    "html": "<div>\r\n<form #employeeInfoForm=\"ngForm\" [rxwebForm]=\"employeeInfoForm\">\r\n  <div class=\"form-group\">\r\n    <label>Hobbies</label>\r\n    <div class=\"form-check\" *ngFor=\"let tag of hobbiesArray; let i = index;\">\r\n        <h4>\r\n          <input [ngModel]=\"employeeInfo.hobbies[i]\" [ngModelOptions]=\"{standalone: true}\" (click)=\"addHobbies($event.target,i)\" type=\"checkbox\" value=\"{{tag.name}}\" /> {{tag.name}}\r\n        </h4>\r\n      </div>\r\n      <br />\r\n      <small class=\"form-text text-danger\" *ngIf=\"employeeInfoForm.controls?.hobbies?.errors\">{{employeeInfoForm.controls?.hobbies?.errors?.choice.message}}</small>\r\n      <br />\r\n      <small class=\"form-text text-muted\">You can select upto 4 options.</small>\r\n    <br />\r\n  </div>\r\n  <button [disabled]=\"!employeeInfoForm.valid\" class=\"btn btn-primary\">Submit</button>\r\n</form>\r\n</div>",
    "model": "import {  choice  } from \"@rxweb/reactive-form-validators\"\r\n\r\nexport class EmployeeInfo{\r\n\r\n    @choice({maxLength:4})\r\n    hobbies: string[] = [];\r\n}",
    "modelName": "employee-info.model.ts",
    "json": { "choice.json": "{\r\n    \"hobbiesArray\":[\r\n        {\r\n            \"name\":\"Drawing\",\r\n            \"checked\":false\r\n        },\r\n        {\r\n            \"name\":\"Singing\",\r\n            \"checked\":false\r\n        },\r\n        {\r\n            \"name\":\"Dancing\",\r\n            \"checked\":false\r\n        },\r\n        {\r\n            \"name\":\"Travelling\",\r\n            \"checked\":false\r\n        },\r\n        {\r\n            \"name\":\"Sports\",\r\n            \"checked\":false\r\n        }\r\n    ]\r\n}" }
  },
  "messageExample": {
    "notes": null,
    "component": null,
    "html": null,
    "model": "@choice({maxLength:4,message: \"Please select upto 4 hobbies\"})\r\n    hobbies: string[] = [];",
    "modelName": null,
    "json": null
  },
  "minLengthExample": {
    "notes": null,
    "component": null,
    "html": null,
    "model": "@choice({minLength:3})\r\n    qualifications: string[] = [];",
    "modelName": null,
    "json": null
  },
  "minLength": {
    "notes": null,
    "component": "import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from \"@angular/forms\"\r\nimport { RxFormBuilder } from '@rxweb/reactive-form-validators';\r\n\r\nimport { EmployeeInfo } from './employee-info.model';\r\nimport { HttpClient } from '@angular/common/http';\r\n\r\n@Component({\r\n    selector: 'app-choice-minLength-template-driven-validation-directives',\r\n    templateUrl: './choice-min-length.component.html'\r\n})\r\n\r\nexport class ChoiceMinLengthTemplateDrivenValidationDirectivesComponent implements OnInit {\r\n    employeeInfo = new EmployeeInfo();\r\n\r\n    selectedQualification: string[] = [];\r\n\r\n    constructor(\r\n        private formBuilder: RxFormBuilder, private http: HttpClient) { }\r\n\r\n        qualificationsArray: string[] = [];\r\n\r\n    ngOnInit() {\r\n        this.employeeInfo = new EmployeeInfo();\r\n        this.http.get(\"assets/examples/reactive-form-validators/template-driven/validation-directives/choice/minLength/choice.json\").subscribe(response => {\r\n            this.qualificationsArray = response['qualificationsArray'];\r\n        })\r\n    }\r\n\r\n    addQualification(element: any, index: number) {\r\n        element.checked ? this.selectedQualification.push(element.value) : this.selectedQualification.splice(index, 1);\r\n        this.employeeInfo.qualifications = this.selectedQualification;\r\n    }\r\n}",
    "html": "<div>\r\n<form #employeeInfoForm=\"ngForm\" [rxwebForm]=\"employeeInfoForm\">\r\n  <div class=\"form-group\">\r\n    <label>Qualifications</label>\r\n    <div class=\"form-check\" *ngFor=\"let tag of qualificationsArray; let i = index;\">\r\n        <h4>\r\n          <input [ngModel]=\"employeeInfo.qualifications[i]\"  (click)=\"addQualification($event.target,i)\" type=\"checkbox\" value=\"{{tag.name}}\"  [ngModelOptions]=\"{standalone: true}\"/> {{tag.name}}\r\n        </h4>\r\n      </div>\r\n      <br />\r\n      <small class=\"form-text text-danger\" *ngIf=\"employeeInfoForm.controls?.qualifications?.errors\">{{employeeInfoForm.controls?.qualifications?.errors?.choice.message}}</small>\r\n      <br />\r\n      <small class=\"form-text text-muted\">You can select upto 3 options.</small>\r\n      <br />\r\n  </div>\r\n  <button [disabled]=\"!employeeInfoForm.valid\" class=\"btn btn-primary\">Submit</button>\r\n</form>\r\n</div>",
    "model": "import {  choice  } from \"@rxweb/reactive-form-validators\"\r\n\r\nexport class EmployeeInfo{\r\n\r\n    @choice({minLength:3})\r\n    qualifications: string[] = [];\r\n}",
    "modelName": "employee-info.model.ts",
    "json": { "choice.json": "{\r\n    \"projectDomainsArray\": [\r\n        {\r\n            \"name\": \"ECommerce\",\r\n            \"checked\": false\r\n        },\r\n        {\r\n            \"name\": \"Banking\",\r\n            \"checked\": false\r\n        },\r\n        {\r\n            \"name\":\"Educational\",\r\n            \"checked\":false\r\n        },\r\n        {\r\n            \"name\":\"Gaming\",\r\n            \"checked\":false\r\n        },\r\n        {\r\n            \"name\":\"Financial\",\r\n            \"checked\":false\r\n        }\r\n    ]\r\n}" }
  },
  "message": {
    "notes": [],
    "component": "import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from \"@angular/forms\"\r\nimport { RxFormBuilder } from '@rxweb/reactive-form-validators';\r\n\r\nimport { EmployeeInfo } from './employee-info.model';\r\nimport { HttpClient } from '@angular/common/http';\r\n\r\n@Component({\r\n    selector: 'app-choice-message-template-driven-validation-directives',\r\n    templateUrl: './choice-message.component.html'\r\n})\r\nexport class ChoiceMessageTemplateDrivenValidationDirectivesComponent implements OnInit {\r\n    employeeInfo = new EmployeeInfo();\r\n\r\n    selectedHobbies: string[] = [];\r\n\r\n    constructor(\r\n        private formBuilder: RxFormBuilder, private http: HttpClient) { }\r\n\r\n    hobbiesArray: string[] = [];\r\n\r\n    ngOnInit() {\r\n        this.employeeInfo = new EmployeeInfo();\r\n        this.http.get(\"assets/examples/reactive-form-validators/template-driven/validation-directives/choice/message/choice.json\").subscribe(response => {\r\n            this.hobbiesArray = response['hobbiesArray'];\r\n        })\r\n\r\n    }\r\n\r\n    addHobby(element: any, index: number) {\r\n        element.checked ? this.selectedHobbies.push(element.value) : this.selectedHobbies.splice(index, 1);\r\n        this.employeeInfo.hobbies = this.selectedHobbies;\r\n    }\r\n}",
    "html": "<div>\r\n<form #employeeInfoForm=\"ngForm\" [rxwebForm]=\"employeeInfoForm\">\r\n  <div class=\"form-group\">\r\n    <label>Hobbies</label>\r\n    <div class=\"form-check\" *ngFor=\"let tag of hobbiesArray; let i = index;\">\r\n        <h4>\r\n          <input (click)=\"addHobby($event.target,i)\" [ngModel]=\"employeeInfo.hobbies[i]\" [ngModelOptions]=\"{standalone: true}\" type=\"checkbox\" value=\"{{tag.name}}\" /> {{tag.name}}\r\n        </h4>\r\n      </div>\r\n      <br />\r\n      <small class=\"form-text text-danger\" *ngIf=\"employeeInfoForm.controls?.hobbies?.errors\">{{employeeInfoForm.controls?.hobbies?.errors?.choice.message}}</small>\r\n      <br />\r\n      <small class=\"form-text text-muted\">Shows custom message</small>\r\n      <br />\r\n  </div>\r\n  <button [disabled]=\"!employeeInfoForm.valid\" class=\"btn btn-primary\">Submit</button>\r\n</form>\r\n</div>",
    "model": "import {  choice  } from \"@rxweb/reactive-form-validators\"\r\n\r\nexport class EmployeeInfo{\r\n\r\n    @choice({maxLength:4,message: \"Please select upto 4 hobbies\"})\r\n    hobbies: string[] = [];\r\n}",
    "modelName": "employee-info.model.ts",
    "json": { "choice.json": "{\r\n    \"hobbiesArray\":[\r\n        {\r\n            \"name\":\"Drawing\",\r\n            \"checked\":false\r\n        },\r\n        {\r\n            \"name\":\"Singing\",\r\n            \"checked\":false\r\n        },\r\n        {\r\n            \"name\":\"Dancing\",\r\n            \"checked\":false\r\n        },\r\n        {\r\n            \"name\":\"Travelling\",\r\n            \"checked\":false\r\n        },\r\n        {\r\n            \"name\":\"Sports\",\r\n            \"checked\":false\r\n        }\r\n    ]\r\n}" }
  },
  "add": {
    "notes": [],
    "component": "import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from \"@angular/forms\"\r\nimport { RxFormBuilder } from '@rxweb/reactive-form-validators';\r\n\r\nimport { EmployeeInfo } from './employee-info.model';\r\nimport { HttpClient } from '@angular/common/http';\r\n\r\n@Component({\r\n    selector: 'app-choice-add-template-driven-validation-directives',\r\n    templateUrl: './choice-add.component.html'\r\n})\r\nexport class ChoiceAddTemplateDrivenValidationDirectivesComponent implements OnInit {\r\n    employeeInfo: EmployeeInfo\r\n\r\n    selectedProjectDomains:string[] = [];\r\n \r\n    constructor(\r\n        private formBuilder: RxFormBuilder ,private http: HttpClient) { }\r\n\r\n        projectDomainsArray : string[] = [];\r\n      \r\n        ngOnInit() {\r\n          this.employeeInfo = new EmployeeInfo();\r\n          this.http.get(\"assets/examples/reactive-form-validators/template-driven/validation-directives/choice/add/choice.json\").subscribe(response => {\r\n            this.projectDomainsArray = response['projectDomainsArray'];\r\n        })\r\n        }\r\n\r\n        addProjectDomain(element: any, index: number) {\r\n            element.checked ? this.selectedProjectDomains.push(element.value) : this.selectedProjectDomains.splice(index, 1);\r\n            this.employeeInfo.projectDomains = this.selectedProjectDomains;\r\n        }\r\n}",
    "html": "<div>\r\n  <form #employeeInfoForm = \"ngForm\" [rxwebForm]=\"employeeInfoForm\">\r\n    <div class=\"form-group\">\r\n      <label>Project Domains</label>\r\n      <div class=\"form-check\" *ngFor=\"let tag of projectDomainsArray; let i = index;\">\r\n        <h4>\r\n          <input (click)=\"addProjectDomain($event.target,i)\" [ngModel]=\"employeeInfo.projectDomains[i]\" name=\"projectDomains{{i}}\"  type=\"checkbox\" value=\"{{tag.name}}\" /> {{tag.name}}\r\n        </h4>\r\n      </div>\r\n      <br />\r\n      <small class=\"form-text text-danger\" *ngIf=\"employeeInfoForm.controls?.projectDomains?.errors\">{{employeeInfoForm.controls?.projectDomains?.errors?.choice.message}}</small>\r\n      <br />\r\n      <small class=\"form-text text-muted\">Select atleast 3 option.</small><br>\r\n    </div>\r\n    <button [disabled]=\"!employeeInfoForm.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>",
    "model": "import {  choice  } from \"@rxweb/reactive-form-validators\"\r\n\r\nexport class EmployeeInfo{\r\n\r\n    @choice({minLength:3})\r\n    projectDomains: string[] = [];\r\n\r\n}",
    "modelName": "employee-info.model.ts",
    "json": { "choice.json": "{\r\n    \"projectDomainsArray\": [\r\n        {\r\n            \"name\": \"ECommerce\",\r\n            \"checked\": false\r\n        },\r\n        {\r\n            \"name\": \"Banking\",\r\n            \"checked\": false\r\n        },\r\n        {\r\n            \"name\":\"Educational\",\r\n            \"checked\":false\r\n        },\r\n        {\r\n            \"name\":\"Gaming\",\r\n            \"checked\":false\r\n        }\r\n    ]\r\n}" }
  }
}
