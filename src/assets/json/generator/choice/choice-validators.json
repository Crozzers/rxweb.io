{
  "complete": {
    "notes": [],
    "component": "import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from \"@angular/forms\"\r\nimport { RxFormBuilder, RxwebValidators } from '@rxweb/reactive-form-validators';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { environment } from 'src/environments/environment';\r\n@Component({\r\n    selector: 'app-choice-complete-validator',\r\n    templateUrl: './choice-complete.component.html'\r\n})\r\nexport class ChoiceCompleteValidatorComponent implements OnInit {\r\n    employeeInfoFormGroup: FormGroup\r\n    qualifications: string[] = [];\r\n    skills: string[] = [];\r\n    hobbies: string[] = [];\r\n    projectDomains : string[] = [];\r\n    languages:string[] = [];\r\n\r\n    constructor(\r\n        private formBuilder: RxFormBuilder, private http: HttpClient) { }\r\n\r\n    languagesArray: string[] = [\"English\",\"Chinese\",\"Japanese\",\"Spanish\",\"French\"];\r\n    qualificationsArray: string[] = [\"Secondary\",\"Senior Secondary\",\"B.Tech.\",\"M.Tech.\",\"B.C.A.\",\"M.C.A.\"];\r\n    skillsArray: string[] = [\"MVC\",\"AngularJS\",\"Angular 5\",\"C#\",\"Web Api\",\"SQL Server\"];\r\n    hobbiesArray: string[] = [\"Drawing\",\"Singing\",\"Dancing\",\"Travelling\",\"Sports\"];\r\n    projectDomainsArray : string[] = [\"ECommerce\", \"Banking\", \"Educational\", \"Gaming\"];\r\n\r\n    ngOnInit() {\r\n        this.employeeInfoFormGroup = this.formBuilder.group({\r\n            department:[''],\r\n            projectDomains:['', RxwebValidators.choice({minLength:2})], \r\n            qualifications:['',RxwebValidators.choice({maxLength:4})],\r\n            languages:['',RxwebValidators.choice({minLength:2, conditionalExpression: (x,y) => x.department == \"DotNet\" })],\r\n            skills:['',RxwebValidators.choice({minLength:2, conditionalExpression: \"x => x.department =='DotNet'\"})],\r\n            hobbies:['',RxwebValidators.choice({maxLength:4,message: \"Please select upto 4 hobby\"})]\r\n        });\r\n    }\r\n\r\n    addProjectDomain(element: any,index:number) {\r\n      var indexOf = this.projectDomains.indexOf(element.value);\r\n      element.checked ? this.projectDomains.push(element.value) : this.projectDomains.splice(indexOf,1);\r\n       this.employeeInfoFormGroup.controls.projectDomains.setValue(this.projectDomains);\r\n    }\r\n\r\n    addQualification(element: any,index:number) {\r\n      var indexOf = this.qualifications.indexOf(element.value);\r\n      element.checked ? this.qualifications.push(element.value) : this.qualifications.splice(indexOf,1);\r\n       this.employeeInfoFormGroup.controls.qualifications.setValue(this.qualifications);\r\n    }\r\n\r\n    addSkill(element: any,index:number) {\r\n      var indexOf = this.skills.indexOf(element.value);\r\n      element.checked ? this.skills.push(element.value) : this.skills.splice(indexOf,1);\r\n       this.employeeInfoFormGroup.controls.skills.setValue(this.skills);\r\n    }\r\n\r\n      addHobby(element: any,index:number) {\r\n        var indexOf = this.hobbies.indexOf(element.value);\r\n        element.checked ? this.hobbies.push(element.value) : this.hobbies.splice(indexOf,1);\r\n         this.employeeInfoFormGroup.controls.hobbies.setValue(this.hobbies);\r\n      }\r\n\r\n  addLanguages(element: any, index: number) {\r\n      var indexOf = this.languages.indexOf(element.value);\r\n        element.checked ? this.languages.push(element.value) : this.languages.splice(indexOf,1);\r\n         this.employeeInfoFormGroup.controls.languages.setValue(this.languages);\r\n  }\r\n}",
    "html": "<div>\r\n  <form [formGroup]=\"employeeInfoFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label>Department</label>\r\n      <input type=\"text\" formControlName=\"department\" class=\"form-control\" placeholder=\"Enter any department\" />\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Project Domains</label>\r\n      <div class=\"form-check\" *ngFor=\"let tag of projectDomainsArray; let i = index;\">\r\n        <h4>\r\n          <input (click)=\"addProjectDomain($event.target,i)\" type=\"checkbox\" value=\"{{tag}}\" /> {{tag}}\r\n        </h4>\r\n      </div>\r\n      <br />\r\n      <small class=\"form-text text-muted\">You must select atleast 2 option.</small>\r\n      <small class=\"form-text text-danger\" *ngIf=\"employeeInfoFormGroup.controls.projectDomains.errors\"><br />{{employeeInfoFormGroup.controls.projectDomains.errors.choice.message}}</small>\r\n      <br />\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Qualifications</label>\r\n      <div class=\"form-check\" *ngFor=\"let tag of qualificationsArray; let i = index;\">\r\n        <h4>\r\n          <input (click)=\"addQualification($event.target,i)\" type=\"checkbox\" value=\"{{tag}}\" /> {{tag}}\r\n        </h4>\r\n      </div> \r\n      <small class=\"form-text text-danger\" *ngIf=\"employeeInfoFormGroup.controls.qualifications.errors\"><br />{{employeeInfoFormGroup.controls.qualifications.errors.choice.message}}</small>\r\n      <br />\r\n      <small class=\"form-text text-muted\">To apply the validation on 'Qualifications' field, enter 'DotNet' in 'Department' field</small>\r\n      <br />\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Languages</label>\r\n      <div class=\"form-check\" *ngFor=\"let tag of languagesArray; let i = index;\">\r\n        <h4>\r\n          <input (click)=\"addLanguages($event.target,i)\" type=\"checkbox\" value=\"{{tag}}\" /> {{tag}}\r\n        </h4>\r\n      </div>\r\n      <small class=\"form-text text-danger\" *ngIf=\"employeeInfoFormGroup.controls.languages.errors\"><br />{{employeeInfoFormGroup.controls.languages.errors.choice.message}}</small>\r\n      <br />\r\n      <small class=\"form-text text-muted\">To apply the validation on 'Qualifications' field, enter 'DotNet' in 'Department' field</small><br>\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Skills</label><small>( With Conditional Expression )</small><br>\r\n      <div class=\"form-check\" *ngFor=\"let tag of skillsArray; let i = index;\">\r\n        <h4>\r\n          <input (click)=\"addSkill($event.target,i)\" type=\"checkbox\" value=\"{{tag}}\" /> {{tag}}\r\n        </h4>\r\n      </div>\r\n      <small class=\"form-text text-danger\" *ngIf=\"employeeInfoFormGroup.controls.skills.errors\"><br />{{employeeInfoFormGroup.controls.skills.errors.choice.message}}</small>\r\n      <br />\r\n      <small class=\"form-text text-muted\">To apply the validation on 'Skills' field, enter 'DotNet' in 'Department' field</small><br>\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Hobbies</label>\r\n      <div class=\"form-check\" *ngFor=\"let tag of hobbiesArray; let i = index;\">\r\n        <h4>\r\n          <input (click)=\"addHobby($event.target,i)\" type=\"checkbox\" value=\"{{tag}}\" /> {{tag}}\r\n        </h4>\r\n      </div>\r\n      <small class=\"form-text text-danger\" *ngIf=\"employeeInfoFormGroup.controls.hobbies.errors\"><br />{{employeeInfoFormGroup.controls.hobbies.errors.choice.message}}</small>\r\n      <br />\r\n      <small class=\"form-text text-muted\">Shows custom message</small><br>\r\n    </div>\r\n    <button [disabled]=\"!employeeInfoFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>",
    "model": null,
    "modelName": null,
    "json": null
  },
  "conditionalExpressionExampleFunction": {
    "notes": null,
    "component": null,
    "html": null,
    "model": "RxwebValidators.choice({minLength:2, conditionalExpression: (x,y) => x.department =='DotNet'})",
    "modelName": null,
    "json": null
  },
  "conditionalExpression": {
    "notes": [],
    "component": "import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from \"@angular/forms\"\r\nimport { RxFormBuilder, RxwebValidators } from '@rxweb/reactive-form-validators';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { environment } from 'src/environments/environment';\r\n@Component({\r\n  selector: 'app-choice-conditionalExpression-validator',\r\n  templateUrl: './choice-conditional-expression.component.html'\r\n})\r\nexport class ChoiceConditionalExpressionValidatorComponent implements OnInit {\r\n  employeeInfoFormGroup: FormGroup\r\n  qualifications: string[] = [];\r\n  skills: string[] = [];\r\n\r\n  constructor(\r\n    private formBuilder: RxFormBuilder, private http: HttpClient) { }\r\n\r\n  qualificationsArray: string[] = [\"Secondary\", \"Senior Secondary\", \"B.Tech.\", \"M.Tech.\", \"B.C.A.\", \"M.C.A.\"];\r\n  skillsArray: string[] = [\"MVC\", \"AngularJS\", \"Angular 5\", \"C#\", \"Web Api\", \"SQL Server\"];\r\n\r\n  ngOnInit() {\r\n    this.employeeInfoFormGroup = this.formBuilder.group({\r\n      department: [''],\r\n      qualifications: ['', RxwebValidators.choice({ minLength: 2, conditionalExpression: (x, y) => x.department == 'DotNet' })],\r\n      skills: ['', RxwebValidators.choice({ maxLength: 3, conditionalExpression: \"x => x.department =='DotNet'\" })]\r\n    });\r\n  }\r\n\r\n  addQualification(element: any, index: number) {\r\n    var indexOf = this.qualifications.indexOf(element.value);\r\n    element.checked ? this.qualifications.push(element.value) : this.qualifications.splice(indexOf, 1);\r\n    this.employeeInfoFormGroup.controls.qualifications.setValue(this.qualifications);\r\n  }\r\n\r\n  addSkill(element: any, index: number) {\r\n    var indexOf = this.skills.indexOf(element.value);\r\n    element.checked ? this.skills.push(element.value) : this.skills.splice(indexOf, 1);\r\n    this.employeeInfoFormGroup.controls.skills.setValue(this.skills);\r\n  }\r\n}",
    "html": "<div>\r\n    <form [formGroup]=\"employeeInfoFormGroup\">\r\n      <div class=\"form-group\">\r\n        <label>Department</label>\r\n        <input type=\"text\" formControlName=\"department\" class=\"form-control\" placeholder=\"Enter any department\" />\r\n      </div>\r\n      <div class=\"form-group\">\r\n        <label>Qualifications</label>\r\n        <div class=\"form-check\" *ngFor=\"let tag of qualificationsArray; let i = index;\">\r\n          <h4>\r\n            <input (click)=\"addQualification($event.target,i)\"  type=\"checkbox\" value=\"{{tag}}\" /> {{tag}}\r\n          </h4>\r\n        </div>\r\n        <small class=\"form-text text-danger\" *ngIf=\"employeeInfoFormGroup.controls.qualifications.errors\"><br />{{employeeInfoFormGroup.controls.qualifications.errors.choice.message}}</small>\r\n        <br />\r\n        <small class=\"form-text text-muted\" >To apply the validation on 'Qualifications' field, enter 'DotNet' in 'Department' field</small>\r\n        <br />\r\n      </div>\r\n      <div class=\"form-group\">\r\n        <label>Skills</label><small>( With Conditional Expression )</small><br>\r\n        <div class=\"form-check\" *ngFor=\"let tag of skillsArray; let i = index;\">\r\n          <h4>\r\n            <input (click)=\"addSkill($event.target,i)\" type=\"checkbox\" value=\"{{tag}}\" /> {{tag}}\r\n          </h4>\r\n        </div>\r\n        <small class=\"form-text text-danger\" *ngIf=\"employeeInfoFormGroup.controls.skills.errors\"> <br />{{employeeInfoFormGroup.controls.skills.errors.choice.message}}</small>\r\n        <br />\r\n        <small class=\"form-text text-muted\" >To apply the validation on 'Skills' field, enter 'DotNet' in 'Department' field</small><br />\r\n      </div>\r\n      <button [disabled]=\"!employeeInfoFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n    </form>\r\n    </div>",
    "model": null,
    "modelName": null,
    "json": null
  },
  "conditionalExpressionExampleString": {
    "notes": null,
    "component": null,
    "html": null,
    "model": "RxwebValidators.choice({maxLength:3, conditionalExpression: \"x => x.department =='DotNet'\"})",
    "modelName": null,
    "json": null
  },
  "maxLengthExample": {
    "notes": null,
    "component": null,
    "html": null,
    "model": "RxwebValidators.choice({maxLength:3})",
    "modelName": null,
    "json": null
  },
  "maxLength": {
    "notes": null,
    "component": "import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from \"@angular/forms\"\r\nimport { RxFormBuilder, RxwebValidators } from '@rxweb/reactive-form-validators';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { environment } from 'src/environments/environment';\r\n@Component({\r\n  selector: 'app-choice-maxLength-validator',\r\n  templateUrl: './choice-max-length.component.html'\r\n})\r\nexport class ChoiceMaxLengthValidatorComponent implements OnInit {\r\n  employeeInfoFormGroup: FormGroup\r\n  projectDomains: string[] = [];\r\n\r\n  constructor(\r\n    private formBuilder: RxFormBuilder, private http: HttpClient) { }\r\n\r\n  projectDomainsArray: string[] = [\"ECommerce\", \"Banking\", \"Educational\", \"Gaming\"];\r\n\r\n  ngOnInit() {\r\n    this.employeeInfoFormGroup = this.formBuilder.group({\r\n      projectDomains: ['', RxwebValidators.choice({ maxLength: 3 })]\r\n    });\r\n  }\r\n\r\n  addProjectDomain(element: any, index: number) {\r\n    var indexOf = this.projectDomains.indexOf(element.value);\r\n    element.checked ? this.projectDomains.push(element.value) : this.projectDomains.splice(indexOf, 1);\r\n    this.employeeInfoFormGroup.controls.projectDomains.setValue(this.projectDomains);\r\n  }\r\n}\r\n",
    "html": "<div>\r\n    <form [formGroup]=\"employeeInfoFormGroup\">\r\n      <div class=\"form-group\">\r\n        <label>Project Domains</label>\r\n        <div class=\"form-check\" *ngFor=\"let tag of projectDomainsArray; let i = index;\">\r\n          <h4>\r\n            <input (click)=\"addProjectDomain($event.target,i)\"  type=\"checkbox\" value=\"{{tag}}\" /> {{tag}}\r\n          </h4>\r\n        </div>\r\n        <br />\r\n        <small class=\"form-text text-muted\">You must select atmost 3 option.</small>\r\n        <small class=\"form-text text-danger\" *ngIf=\"employeeInfoFormGroup.controls.projectDomains.errors\"><br>{{employeeInfoFormGroup.controls.projectDomains.errors.choice.message}}</small>\r\n        <br />\r\n      </div>\r\n      <button [disabled]=\"!employeeInfoFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n    </form>\r\n  </div>",
    "model": null,
    "modelName": null,
    "json": null
  },
  "minLengthExample": {
    "notes": null,
    "component": null,
    "html": null,
    "model": "RxwebValidators.choice({minLength:3})",
    "modelName": null,
    "json": null
  },
  "minLength": {
    "notes": null,
    "component": "import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from \"@angular/forms\"\r\nimport { RxFormBuilder, RxwebValidators } from '@rxweb/reactive-form-validators';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { environment } from 'src/environments/environment';\r\n@Component({\r\n  selector: 'app-choice-minLength-validator',\r\n  templateUrl: './choice-min-length.component.html'\r\n})\r\nexport class ChoiceMinLengthValidatorComponent implements OnInit {\r\n  employeeInfoFormGroup: FormGroup\r\n  projectDomains: string[] = [];\r\n\r\n  constructor(\r\n    private formBuilder: RxFormBuilder, private http: HttpClient) { }\r\n\r\n  projectDomainsArray: string[] = [\"ECommerce\", \"Banking\", \"Educational\", \"Gaming\"];\r\n\r\n  ngOnInit() {\r\n    this.employeeInfoFormGroup = this.formBuilder.group({\r\n      projectDomains: ['', RxwebValidators.choice({ minLength: 3 })]\r\n\r\n    });\r\n  }\r\n\r\n  addProjectDomain(element: any, index: number) {\r\n    var indexOf = this.projectDomains.indexOf(element.value);\r\n    element.checked ? this.projectDomains.push(element.value) : this.projectDomains.splice(indexOf, 1);\r\n    this.employeeInfoFormGroup.controls.projectDomains.setValue(this.projectDomains);\r\n  }\r\n}\r\n",
    "html": "<div>\r\n    <form [formGroup]=\"employeeInfoFormGroup\">\r\n      <div class=\"form-group\">\r\n        <label>Project Domains</label>\r\n        <div class=\"form-check\" *ngFor=\"let tag of projectDomainsArray; let i = index;\">\r\n          <h4>\r\n            <input (click)=\"addProjectDomain($event.target,i)\"  type=\"checkbox\" value=\"{{tag}}\" /> {{tag}}\r\n          </h4>\r\n        </div>\r\n        \r\n        <small class=\"form-text text-danger\" *ngIf=\"employeeInfoFormGroup.controls.projectDomains.errors\"><br />{{employeeInfoFormGroup.controls.projectDomains.errors.choice.message}}</small>\r\n      </div>\r\n      <button [disabled]=\"!employeeInfoFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n    </form>\r\n  </div>\r\n",
    "model": null,
    "modelName": null,
    "json": null
  },
  "messageExample": {
    "notes": null,
    "component": null,
    "html": null,
    "model": "RxwebValidators.choice({maxLength:4,message: \"You can select atmost 4 hobbies\"})",
    "modelName": null,
    "json": null
  },
  "message": {
    "notes": [],
    "component": "import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from \"@angular/forms\"\r\nimport { RxFormBuilder, RxwebValidators } from '@rxweb/reactive-form-validators';\r\nimport { environment } from 'src/environments/environment';\r\nimport { HttpClient } from '@angular/common/http';\r\n\r\n@Component({\r\n  selector: 'app-choice-message-validator',\r\n  templateUrl: './choice-message.component.html'\r\n})\r\nexport class ChoiceMessageValidatorComponent implements OnInit {\r\n  employeeInfoFormGroup: FormGroup\r\n  hobbies: string[] = [];\r\n\r\n  constructor(\r\n    private formBuilder: RxFormBuilder, private http: HttpClient) { }\r\n\r\n  hobbiesArray: string[] = [\"Drawing\", \"Singing\", \"Dancing\", \"Travelling\", \"Sports\"];\r\n\r\n  ngOnInit() {\r\n    this.employeeInfoFormGroup = this.formBuilder.group({\r\n      hobbies: ['', RxwebValidators.choice({ maxLength: 4, message: \"You can select atmost 4 hobbies\" })]\r\n    });\r\n  }\r\n\r\n  addHobby(element: any, index: number) {\r\n    var indexOf = this.hobbies.indexOf(element.value);\r\n    element.checked ? this.hobbies.push(element.value) : this.hobbies.splice(indexOf, 1);\r\n    this.employeeInfoFormGroup.controls.hobbies.setValue(this.hobbies);\r\n  }\r\n}",
    "html": "<div>\r\n    <form [formGroup]=\"employeeInfoFormGroup\">\r\n      <div class=\"form-group\">\r\n        <label>Hobbies</label>\r\n        <div class=\"form-check\" *ngFor=\"let tag of hobbiesArray; let i = index;\">\r\n            <h4>\r\n              <input (click)=\"addHobby($event.target,i)\" type=\"checkbox\" value=\"{{tag}}\" /> {{tag}}\r\n            </h4>\r\n          </div>\r\n          \r\n          <small class=\"form-text text-danger\" *ngIf=\"employeeInfoFormGroup.controls.hobbies.errors\"><br />{{employeeInfoFormGroup.controls.hobbies.errors.choice.message}}</small>\r\n          <br />\r\n          <small class=\"form-text text-muted\">Shows custom message</small><br>\r\n          <br />\r\n      </div>\r\n      <button [disabled]=\"!employeeInfoFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n    </form>\r\n    </div>\r\n",
    "model": null,
    "modelName": null,
    "json": null
  },
  "messageKeyExample": {
    "notes": null,
    "component": null,
    "html": null,
    "model": "RxwebValidators.choice({ minLength: 2, messageKey: 'choiceMessageKey' })",
    "modelName": null,
    "json": null
  },
  "messageKey": {
    "notes": null,
    "component": "import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from \"@angular/forms\"\r\nimport { RxFormBuilder, RxwebValidators } from '@rxweb/reactive-form-validators';\r\n\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { environment } from 'src/environments/environment';\r\n@Component({\r\n  selector: 'app-choice-messageKey-validator',\r\n  templateUrl: './choice-message-key.component.html'\r\n})\r\nexport class ChoiceMessageKeyValidatorComponent implements OnInit {\r\n  employeeInfoFormGroup: FormGroup\r\n  certifications: string[] = [];\r\n\r\n  constructor(\r\n    private formBuilder: RxFormBuilder, private http: HttpClient) { }\r\n\r\n  certificationsArray: string[] = [\"Microsoft certified\", \"Google certified\", \"Oracle certified\", \"AWS certified\", \"Adobe certified\", \"VMware certified\"];\r\n\r\n  ngOnInit() {\r\n    this.employeeInfoFormGroup = this.formBuilder.group({\r\n      certifications: ['', RxwebValidators.choice({ minLength: 2, messageKey: 'choiceMessageKey' })]\r\n    });\r\n  }\r\n\r\n  addCertification(element: any) {\r\n    var indexOf = this.certifications.indexOf(element.value);\r\n    element.checked ? this.certifications.push(element.value) : this.certifications.splice(indexOf, 1);\r\n    this.employeeInfoFormGroup.controls.certifications.setValue(this.certifications);\r\n  }\r\n}",
    "html": "<div>\r\n  <form [formGroup]=\"employeeInfoFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label>Certifications</label>\r\n      <div class=\"form-check\" *ngFor=\"let tag of certificationsArray\">\r\n        <h4>\r\n          <input (click)=\"addCertification($event.target)\" type=\"checkbox\" value=\"{{tag}}\" /> {{tag}}\r\n        </h4>\r\n      </div>\r\n      <br>\r\n      <small class=\"form-text text-muted\">choice validation using messageKey.</small><br>\r\n      <small class=\"form-text text-danger\" *ngIf=\"employeeInfoFormGroup.controls?.certifications?.errors\">{{employeeInfoFormGroup.controls.certifications.errors.choice.message}}</small><br>\r\n    </div>\r\n    <button [disabled]=\"!employeeInfoFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>",
    "model": null,
    "modelName": null,
    "json": null
  },
  "dynamic": {
    "notes": [],
    "component": "import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup, FormBuilder } from \"@angular/forms\"\r\nimport { RxwebValidators } from '@rxweb/reactive-form-validators';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { FormBuilderConfiguration,RxFormBuilder} from '@rxweb/reactive-form-validators';\r\nimport { environment } from 'src/environments/environment';\r\n@Component({\r\n    selector: 'app-choice-dynamic-validator',\r\n    templateUrl: './choice-dynamic.component.html'\r\n})\r\nexport class ChoiceDynamicValidatorComponent implements OnInit {\r\n\r\n    employeeInfoFormGroup: FormGroup\r\n    skills: string[] = [];\r\n    hobbies: string[] = [];\r\n    projectDomains : string[] = [];\r\n    languages:string[] = [];\r\n\r\n    constructor(\r\n        private formBuilder: RxFormBuilder, private http: HttpClient) { }\r\n\r\n    languagesArray: string[] = [\"English\",\"Chinese\",\"Japanese\",\"Spanish\",\"French\"];\r\n    skillsArray: string[] = [\"MVC\",\"AngularJS\",\"Angular 5\",\"C#\",\"Web Api\",\"SQL Server\"];\r\n    hobbiesArray: string[] = [\"Drawing\",\"Singing\",\"Dancing\",\"Travelling\",\"Sports\"];\r\n    projectDomainsArray : string[] = [\"ECommerce\", \"Banking\", \"Educational\", \"Gaming\"];\r\n\r\n    ngOnInit() {\r\n\t\tlet formBuilderConfiguration = new FormBuilderConfiguration();\r\n\t\tthis.http.get('assets/examples/reactive-form-validators/validators/choice/dynamic/dynamic.json').subscribe(dynamic => {\r\n\t\t\tformBuilderConfiguration.dynamicValidation = JSON.parse(JSON.stringify(dynamic));\r\n\t\t\tvar employeeInfo = { department:'', projectDomains:'', skills:'', hobbies:'' ,languages:'' }\r\n\t\t\tthis.employeeInfoFormGroup = this.formBuilder.group(employeeInfo,formBuilderConfiguration);\r\n\t\t})\r\n    }\r\n\r\n    addProjectDomain(element: any,index:number) {\r\n      var indexOf = this.projectDomains.indexOf(element.value);\r\n      element.checked ? this.projectDomains.push(element.value) : this.projectDomains.splice(indexOf,1);\r\n       this.employeeInfoFormGroup.controls.projectDomains.setValue(this.projectDomains);\r\n    }\r\n    \r\n    addSkill(element: any,index:number) {\r\n      var indexOf = this.skills.indexOf(element.value);\r\n      element.checked ? this.skills.push(element.value) : this.skills.splice(indexOf,1);\r\n       this.employeeInfoFormGroup.controls.skills.setValue(this.skills);\r\n    }\r\n\r\n      addHobby(element: any,index:number) {\r\n        var indexOf = this.hobbies.indexOf(element.value);\r\n        element.checked ? this.hobbies.push(element.value) : this.hobbies.splice(indexOf,1);\r\n         this.employeeInfoFormGroup.controls.hobbies.setValue(this.hobbies);\r\n      }\r\n\r\n  addLanguage(element: any, index: number) {\r\n      var indexOf = this.languages.indexOf(element.value);\r\n        element.checked ? this.languages.push(element.value) : this.languages.splice(indexOf,1);\r\n         this.employeeInfoFormGroup.controls.languages.setValue(this.languages);\r\n  }\r\n}",
    "html": "<div>\r\n  <form *ngIf=\"employeeInfoFormGroup\" [formGroup]=\"employeeInfoFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label>Department</label>\r\n      <input type=\"text\" formControlName=\"department\" class=\"form-control\" placeholder=\"Enter any department\" />\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Project Domains</label>\r\n      <div class=\"form-check\" *ngFor=\"let tag of projectDomainsArray; let i = index;\">\r\n        <h4>\r\n          <input (click)=\"addProjectDomain($event.target,i)\" type=\"checkbox\" value=\"{{tag}}\" /> {{tag}}\r\n        </h4>\r\n      </div>\r\n      <small class=\"form-text text-danger\" *ngIf=\"employeeInfoFormGroup.controls.projectDomains.errors\"> <br />{{employeeInfoFormGroup.controls.projectDomains.errors.choice.message}}</small><br>\r\n      <small class=\"form-text text-muted\">You must select atleast 3 option.</small><br>\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Languages</label>\r\n      <div class=\"form-check\" *ngFor=\"let tag of languagesArray; let i = index;\">\r\n        <h4>\r\n          <input (click)=\"addLanguage($event.target,i)\" type=\"checkbox\" value=\"{{tag}}\" /> {{tag}}\r\n        </h4>\r\n      </div>\r\n      <small class=\"form-text text-danger\" *ngIf=\"employeeInfoFormGroup.controls.languages.errors\"><br />{{employeeInfoFormGroup.controls.languages.errors.choice.message}}</small>\r\n      <br />\r\n      <small class=\"form-text text-muted\">You must select atmost 4 option</small>\r\n      <br />\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Skills</label><small>( With Conditional Expression )</small><br>\r\n      <div class=\"form-check\" *ngFor=\"let tag of skillsArray; let i = index;\">\r\n        <h4>\r\n          <input (click)=\"addSkill($event.target,i)\" type=\"checkbox\" value=\"{{tag}}\" /> {{tag}}\r\n        </h4>\r\n      </div>\r\n      <small class=\"form-text text-danger\" *ngIf=\"employeeInfoFormGroup.controls.skills.errors\"><br />{{employeeInfoFormGroup.controls.skills.errors.choice.message}}</small>\r\n      <br />\r\n      <small class=\"form-text text-muted\">To apply the validation on 'Skills' field, enter 'DotNet' in 'Department' field</small>\r\n      <br />\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Hobbies</label>\r\n      <div class=\"form-check\" *ngFor=\"let tag of hobbiesArray; let i = index;\">\r\n        <h4>\r\n          <input (click)=\"addHobby($event.target,i)\" type=\"checkbox\" value=\"{{tag}}\" /> {{tag}}\r\n        </h4>\r\n      </div>\r\n      <small class=\"form-text text-danger\" *ngIf=\"employeeInfoFormGroup.controls.hobbies.errors\"> <br />{{employeeInfoFormGroup.controls.hobbies.errors.choice.message}}</small>\r\n      <br />\r\n      <small class=\"form-text text-muted\">Shows custom message</small><br>\r\n    </div>\r\n    <button [disabled]=\"!employeeInfoFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>",
    "model": null,
    "modelName": null,
    "json": {
      "dynamic.json": "{\r\n    \"department\": {\r\n        \"choice\": false\r\n    },\r\n    \"projectDomains\": {\r\n        \"choice\": {\r\n            \"minLength\": 2\r\n        }\r\n    },\r\n    \"languages\": {\r\n        \"choice\": {\r\n            \"maxLength\": 4\r\n        }\r\n    },\r\n    \"skills\": {\r\n        \"choice\": {\r\n            \"minLength\":2,\r\n            \"conditionalExpression\": \"x => x.department =='DotNet'\"\r\n        }\r\n    },\r\n    \"hobbies\": {\r\n        \"choice\": {\r\n            \"maxLength\":3,\r\n            \"message\": \"You can select atmost 3 hobbies\"\r\n        }\r\n    }\r\n}"
    }
  },
  "add": {
    "notes": [],
    "component": "import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from \"@angular/forms\"\r\nimport { RxFormBuilder, RxwebValidators } from '@rxweb/reactive-form-validators';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { environment } from 'src/environments/environment';\r\n@Component({\r\n    selector: 'app-choice-add-validator',\r\n    templateUrl: './choice-add.component.html'\r\n})\r\nexport class ChoiceAddValidatorComponent implements OnInit {\r\n    employeeInfoFormGroup: FormGroup\r\n    projectDomains: string[] = [];\r\n\r\n    constructor(\r\n        private formBuilder: RxFormBuilder, private http: HttpClient) { }\r\n\r\n        projectDomainsArray : string[] = [\"ECommerce\", \"Banking\", \"Educational\", \"Gaming\"];\r\n\r\n    ngOnInit() {\r\n        this.employeeInfoFormGroup = this.formBuilder.group({\r\n            department: [''],\r\n            projectDomains: ['', RxwebValidators.choice({ minLength: 3 })],\r\n        });\r\n    }\r\n\r\n    addProjectDomain(element: any,index:number) {\r\n        var indexOf = this.projectDomains.indexOf(element.value);\r\n        element.checked ? this.projectDomains.push(element.value) : this.projectDomains.splice(indexOf,1);\r\n         this.employeeInfoFormGroup.controls.projectDomains.setValue(this.projectDomains);\r\n      }\r\n}\r\n",
    "html": "<div>\r\n    <form [formGroup]=\"employeeInfoFormGroup\">\r\n      <div class=\"form-group\">\r\n        <label>Project Domains</label>\r\n        <div class=\"form-check\" *ngFor=\"let tag of projectDomainsArray; let i = index;\">\r\n          <h4>\r\n            <input (click)=\"addProjectDomain($event.target,i)\"  type=\"checkbox\" value=\"{{tag}}\" /> {{tag}}\r\n          </h4>\r\n        </div>\r\n        <small class=\"form-text text-danger\" *ngIf=\"employeeInfoFormGroup.controls?.projectDomains?.errors\"><br />{{employeeInfoFormGroup.controls.projectDomains?.errors?.choice?.message}}</small>\r\n        <br>\r\n        <small class=\"form-text text-muted\">You must select atleast 2 option.</small>\r\n      </div>\r\n      <button [disabled]=\"!employeeInfoFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n    </form>\r\n  </div>",
    "model": null,
    "modelName": null,
    "json": null
  }
}
