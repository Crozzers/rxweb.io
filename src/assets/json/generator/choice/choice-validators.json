{
  "complete": {
    "notes": [],
    "component": "import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from \"@angular/forms\"\r\nimport { RxFormBuilder, RxwebValidators } from '@rxweb/reactive-form-validators';\r\nimport { HttpClient } from '@angular/common/http';\r\n\r\n@Component({\r\n    selector: 'app-choice-complete-validator',\r\n    templateUrl: './choice-complete.component.html'\r\n})\r\nexport class ChoiceCompleteValidatorComponent implements OnInit {\r\n    employeeInfoFormGroup: FormGroup\r\n\r\n    constructor(\r\n        private formBuilder: RxFormBuilder, private http: HttpClient) { }\r\n\r\n    qualificationsArray: string[] = [];\r\n    skillsArray: string[] = [];\r\n    hobbiesArray: string[] = [];\r\n    projectDomainsArray : string[] = [];\r\n    languagesArray:string[]=[];\r\n\r\n    ngOnInit() {\r\n        this.employeeInfoFormGroup = this.formBuilder.group({\r\n            department:[''],\r\n            projectDomains:['', RxwebValidators.choice({minLength:3})], \r\n            qualifications:['',RxwebValidators.choice({maxLength:4})],\r\n            languages:['',RxwebValidators.choice({minLength:3, conditionalExpression: (x,y) => x.department == \"DotNet\" })],\r\n            skills:['',RxwebValidators.choice({minLength:3, conditionalExpression: \"x => x.department =='DotNet'\"})],\r\n            hobbies:['',RxwebValidators.choice({maxLength:4,message: \"Please select upto 4 hobby\"})]\r\n        });\r\n        this.http.get(\"assets/examples/reactive-form-validators/validators/choice/complete/choice.json\").subscribe(response => {\r\n            this.qualificationsArray = response['qualificationsArray'];\r\n            this.skillsArray = response['skillsArray'];\r\n            this.hobbiesArray = response['hobbiesArray'];\r\n            this.projectDomainsArray = response['projectDomainsArray'];\r\n            this.languagesArray = response['languagesArray']\r\n        })\r\n    }\r\n\r\n    index = 0;\r\n    addProjectDomain(element:any) {\r\n      var value = this.employeeInfoFormGroup.controls.projectDomains.value;\r\n      if(!value)\r\n        value = [];\r\n        if(element.checked) {\r\n              value.push(element.value);\r\n              this.index++;\r\n        }\r\n        else\r\n        {\r\n        var indexOf = value.indexOf(element.value);\r\n        value.splice(indexOf,1);\r\n        }\r\n      this.employeeInfoFormGroup.controls.projectDomains.setValue(value)\r\n    }\r\n\r\n    addQualification(element:any) {\r\n        var value = this.employeeInfoFormGroup.controls.qualifications.value;\r\n        if(!value)\r\n          value = [];\r\n          if(element.checked) {\r\n                value.push(element.value);\r\n                this.index++;\r\n          }\r\n          else\r\n          {\r\n          var indexOf = value.indexOf(element.value);\r\n          value.splice(indexOf,1);\r\n          }\r\n        this.employeeInfoFormGroup.controls.qualifications.setValue(value)\r\n      }\r\n\r\n      addSkill(element:any) {\r\n        var value = this.employeeInfoFormGroup.controls.skills.value;\r\n        if(!value)\r\n          value = [];\r\n          if(element.checked) {\r\n                value.push(element.value);\r\n                this.index++;\r\n          }\r\n          else\r\n          {\r\n          var indexOf = value.indexOf(element.value);\r\n          value.splice(indexOf,1);\r\n          }\r\n        this.employeeInfoFormGroup.controls.skills.setValue(value)\r\n      }\r\n\r\n      addHobby(element:any) {\r\n        var value = this.employeeInfoFormGroup.controls.hobbies.value;\r\n        if(!value)\r\n          value = [];\r\n          if(element.checked) {\r\n                value.push(element.value);\r\n                this.index++;\r\n          }\r\n          else\r\n          {\r\n          var indexOf = value.indexOf(element.value);\r\n          value.splice(indexOf,1);\r\n          }\r\n        this.employeeInfoFormGroup.controls.hobbies.setValue(value)\r\n      }\r\n\r\n\r\n      addLanguages(element:any) {\r\n        var value = this.employeeInfoFormGroup.controls.languages.value;\r\n        if(!value)\r\n          value = [];\r\n          if(element.checked) {\r\n                value.push(element.value);\r\n                this.index++;\r\n          }\r\n          else\r\n          {\r\n          var indexOf = value.indexOf(element.value);\r\n          value.splice(indexOf,1);\r\n          }\r\n        this.employeeInfoFormGroup.controls.languages.setValue(value)\r\n      }\r\n}",
    "html": "<div>\r\n  <form [formGroup]=\"employeeInfoFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label>Department</label>\r\n      <input type=\"text\" formControlName=\"department\" class=\"form-control\" placeholder=\"Enter any department\" />\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Project Domains</label>\r\n      <div class=\"form-check\" *ngFor=\"let tag of projectDomainsArray; let i = index;\">\r\n        <h4>\r\n          <input (click)=\"addProjectDomain($event.target,i)\" type=\"checkbox\" value=\"{{tag.name}}\" /> {{tag.name}}\r\n        </h4>\r\n      </div>\r\n      <br />\r\n      <small class=\"form-text text-muted\">You must select atleast 3 option.</small><br>\r\n      <small class=\"form-text text-danger\" *ngIf=\"employeeInfoFormGroup.controls.projectDomains.errors\">{{employeeInfoFormGroup.controls.projectDomains.errors.choice.message}}</small>\r\n      <br />\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Qualifications</label>\r\n      <div class=\"form-check\" *ngFor=\"let tag of qualificationsArray; let i = index;\">\r\n        <h4>\r\n          <input (click)=\"addQualification($event.target,i)\" type=\"checkbox\" value=\"{{tag.name}}\" /> {{tag.name}}\r\n        </h4>\r\n      </div>\r\n      <br />\r\n      <small class=\"form-text text-danger\" *ngIf=\"employeeInfoFormGroup.controls.qualifications.errors\">{{employeeInfoFormGroup.controls.qualifications.errors.choice.message}}</small>\r\n      <br />\r\n      <small class=\"form-text text-muted\">To apply the validation on 'Qualifications' field, enter 'DotNet' in 'Department' field</small>\r\n      <br />\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Languages</label>\r\n      <div class=\"form-check\" *ngFor=\"let tag of languagesArray; let i = index;\">\r\n        <h4>\r\n          <input (click)=\"addLanguages($event.target,i)\" type=\"checkbox\" value=\"{{tag.name}}\" /> {{tag.name}}\r\n        </h4>\r\n      </div>\r\n      <br />\r\n      <small class=\"form-text text-danger\" *ngIf=\"employeeInfoFormGroup.controls.languages.errors\">{{employeeInfoFormGroup.controls.languages.errors.choice.message}}</small>\r\n      <br />\r\n      <small class=\"form-text text-muted\">To apply the validation on 'Qualifications' field, enter 'DotNet' in 'Department' field</small><br>\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Skills</label><small>( With Conditional Expression )</small><br>\r\n      <div class=\"form-check\" *ngFor=\"let tag of skillsArray; let i = index;\">\r\n        <h4>\r\n          <input (click)=\"addSkill($event.target,i)\" type=\"checkbox\" value=\"{{tag.name}}\" /> {{tag.name}}\r\n        </h4>\r\n      </div>\r\n      <br />\r\n      <small class=\"form-text text-danger\" *ngIf=\"employeeInfoFormGroup.controls.skills.errors\">{{employeeInfoFormGroup.controls.skills.errors.choice.message}}</small>\r\n      <br />\r\n      <small class=\"form-text text-muted\">To apply the validation on 'Skills' field, enter 'DotNet' in 'Department' field</small><br>\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Hobbies</label>\r\n      <div class=\"form-check\" *ngFor=\"let tag of hobbiesArray; let i = index;\">\r\n        <h4>\r\n          <input (click)=\"addHobby($event.target,i)\" type=\"checkbox\" value=\"{{tag.name}}\" /> {{tag.name}}\r\n        </h4>\r\n      </div>\r\n      <br />\r\n      <small class=\"form-text text-danger\" *ngIf=\"employeeInfoFormGroup.controls.hobbies.errors\">{{employeeInfoFormGroup.controls.hobbies.errors.choice.message}}</small>\r\n      <br />\r\n      <small class=\"form-text text-muted\">Shows custom message</small><br>\r\n    </div>\r\n    <button [disabled]=\"!employeeInfoFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>",
    "model": null,
    "modelName": null,
    "json": { "choice.json": "{\r\n    \"projectDomainsArray\": [\r\n        {\r\n            \"name\": \"ECommerce\",\r\n            \"checked\": false\r\n        },\r\n        {\r\n            \"name\": \"Banking\",\r\n            \"checked\": false\r\n        },\r\n        {\r\n            \"name\":\"Educational\",\r\n            \"checked\":false\r\n        },\r\n        {\r\n            \"name\":\"Gaming\",\r\n            \"checked\":false\r\n        }\r\n    ],\r\n    \"qualificationsArray\": [\r\n        {\r\n            \"name\": \"Secondary\",\r\n            \"checked\": false\r\n        },\r\n        {\r\n            \"name\": \"Senior Secondary\",\r\n            \"checked\": false\r\n        },\r\n        {\r\n            \"name\":\"B.Tech.\",\r\n            \"checked\":false\r\n        },\r\n        {\r\n            \"name\":\"M.Tech.\",\r\n            \"checked\":false\r\n        },\r\n        {\r\n            \"name\":\"B.C.A.\",\r\n            \"checked\":false\r\n        },\r\n        {\r\n            \"name\":\"M.C.A.\",\r\n            \"checked\":false\r\n        }\r\n    ],\r\n    \"skillsArray\":[\r\n        {\r\n            \"name\":\"MVC\",\r\n            \"checked\":false\r\n        },\r\n        {\r\n            \"name\":\"AngularJS\",\r\n            \"checked\":false\r\n        },\r\n        {\r\n            \"name\":\"Angular 5\",\r\n            \"checked\":false\r\n        },\r\n        {\r\n            \"name\":\"C#\",\r\n            \"checked\":false\r\n        },\r\n        {\r\n            \"name\":\"Web Api\",\r\n            \"checked\":false\r\n        },\r\n        {\r\n            \"name\":\"SQL Server\",\r\n            \"checked\":false\r\n        }\r\n    ],\r\n    \"hobbiesArray\":[\r\n        {\r\n            \"name\":\"Drawing\",\r\n            \"checked\":false\r\n        },\r\n        {\r\n            \"name\":\"Singing\",\r\n            \"checked\":false\r\n        },\r\n        {\r\n            \"name\":\"Dancing\",\r\n            \"checked\":false\r\n        },\r\n        {\r\n            \"name\":\"Travelling\",\r\n            \"checked\":false\r\n        },\r\n        {\r\n            \"name\":\"Sports\",\r\n            \"checked\":false\r\n        }\r\n    ],\r\n    \"languagesArray\":[\r\n        {\r\n            \"name\":\"English\",\r\n            \"checked\":false\r\n        },\r\n        {\r\n            \"name\":\"Gujarati\",\r\n            \"checked\":false\r\n        },\r\n        {\r\n            \"name\":\"Hindi\",\r\n            \"checked\":false\r\n        },\r\n        {\r\n            \"name\":\"Marathi\",\r\n            \"checked\":false\r\n        },\r\n        {\r\n            \"name\":\"Telugu\",\r\n            \"checked\":false\r\n        }\r\n    ]\r\n}" }
  },
  "conditionalExpressionExampleFunction": {
    "notes": null,
    "component": null,
    "html": null,
    "model": "RxwebValidators.choice({minLength:3, conditionalExpression: (x,y) => x.department =='DotNet'})",
    "modelName": null,
    "jsonName": null,
    "json": null
  },
  "conditionalExpression": {
    "notes": [],
    "component": "import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from \"@angular/forms\"\r\nimport { RxFormBuilder, RxwebValidators } from '@rxweb/reactive-form-validators';\r\nimport { HttpClient } from '@angular/common/http';\r\n\r\n@Component({\r\n    selector: 'app-choice-conditionalExpression-validator',\r\n    templateUrl: './choice-conditional-expression.component.html'\r\n})\r\nexport class ChoiceConditionalExpressionValidatorComponent implements OnInit {\r\n    employeeInfoFormGroup: FormGroup\r\n\r\n    constructor(\r\n        private formBuilder: RxFormBuilder, private http: HttpClient) { }\r\n\r\n    qualificationsArray: string[] = [];\r\n    skillsArray: string[] = [];\r\n\r\n    ngOnInit() {\r\n        this.employeeInfoFormGroup = this.formBuilder.group({\r\n            department:[''],\r\n            qualifications:['',RxwebValidators.choice({minLength:3, conditionalExpression: (x,y) => x.department =='DotNet'})],\r\n            skills:['',RxwebValidators.choice({maxLength:4, conditionalExpression: \"x => x.department =='DotNet'\"})]\r\n            \r\n        });\r\n        this.http.get(\"assets/examples/reactive-form-validators/validators/choice/conditionalExpression/choice.json\").subscribe(response => {\r\n            this.qualificationsArray = response['qualificationsArray'];\r\n            this.skillsArray = response['skillsArray'];\r\n        })\r\n    }\r\n\r\n    index = 0;\r\n    addQualification(element:any) {\r\n        var value = this.employeeInfoFormGroup.controls.qualifications.value;\r\n        if(!value)\r\n          value = [];\r\n          if(element.checked) {\r\n                value.push(element.value);\r\n                this.index++;\r\n          }\r\n          else\r\n          {\r\n          var indexOf = value.indexOf(element.value);\r\n          value.splice(indexOf,1);\r\n          }\r\n        this.employeeInfoFormGroup.controls.qualifications.setValue(value)\r\n      }\r\n\r\n      addSkill(element:any) {\r\n        var value = this.employeeInfoFormGroup.controls.skills.value;\r\n        if(!value)\r\n          value = [];\r\n          if(element.checked) {\r\n                value.push(element.value);\r\n                this.index++;\r\n          }\r\n          else\r\n          {\r\n          var indexOf = value.indexOf(element.value);\r\n          value.splice(indexOf,1);\r\n          }\r\n        this.employeeInfoFormGroup.controls.skills.setValue(value)\r\n      }\r\n\r\n}\r\n",
    "html": "<div>\r\n    <form [formGroup]=\"employeeInfoFormGroup\">\r\n      <div class=\"form-group\">\r\n        <label>Department</label>\r\n        <input type=\"text\" formControlName=\"department\" class=\"form-control\" placeholder=\"Enter any department\" />\r\n      </div>\r\n      <div class=\"form-group\">\r\n        <label>Qualifications</label>\r\n        <div class=\"form-check\" *ngFor=\"let tag of qualificationsArray; let i = index;\">\r\n          <h4>\r\n            <input (click)=\"addQualification($event.target,i)\"  type=\"checkbox\" value=\"{{tag.name}}\" /> {{tag.name}}\r\n          </h4>\r\n        </div>\r\n        <br />\r\n        <small class=\"form-text text-danger\" *ngIf=\"employeeInfoFormGroup.controls.qualifications.errors\">{{employeeInfoFormGroup.controls.qualifications.errors.choice.message}}</small>\r\n        <br />\r\n        <small class=\"form-text text-muted\" >To apply the validation on 'Qualifications' field, enter 'DotNet' in 'Department' field</small>\r\n        <br />\r\n      </div>\r\n      <div class=\"form-group\">\r\n        <label>Skills</label><small>( With Conditional Expression )</small><br>\r\n        <div class=\"form-check\" *ngFor=\"let tag of skillsArray; let i = index;\">\r\n          <h4>\r\n            <input (click)=\"addSkill($event.target,i)\" type=\"checkbox\" value=\"{{tag.name}}\" /> {{tag.name}}\r\n          </h4>\r\n        </div>\r\n        <br />\r\n        <small class=\"form-text text-danger\" *ngIf=\"employeeInfoFormGroup.controls.skills.errors\">{{employeeInfoFormGroup.controls.skills.errors.choice.message}}</small>\r\n        <br />\r\n        <small class=\"form-text text-muted\" >To apply the validation on 'Skills' field, enter 'DotNet' in 'Department' field</small><br />\r\n      </div>\r\n      <button [disabled]=\"!employeeInfoFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n    </form>\r\n    </div>",
    "model": null,
    "modelName": null,
    "json": { "choice.json": "{\r\n    \"qualificationsArray\": [\r\n        {\r\n            \"name\": \"Secondary\",\r\n            \"checked\": false\r\n        },\r\n        {\r\n            \"name\": \"Senior Secondary\",\r\n            \"checked\": false\r\n        },\r\n        {\r\n            \"name\":\"B.Tech.\",\r\n            \"checked\":false\r\n        },\r\n        {\r\n            \"name\":\"M.Tech.\",\r\n            \"checked\":false\r\n        },\r\n        {\r\n            \"name\":\"B.C.A.\",\r\n            \"checked\":false\r\n        },\r\n        {\r\n            \"name\":\"M.C.A.\",\r\n            \"checked\":false\r\n        }\r\n    ],\r\n    \"skillsArray\":[\r\n        {\r\n            \"name\":\"MVC\",\r\n            \"checked\":false\r\n        },\r\n        {\r\n            \"name\":\"AngularJS\",\r\n            \"checked\":false\r\n        },\r\n        {\r\n            \"name\":\"Angular 5\",\r\n            \"checked\":false\r\n        },\r\n        {\r\n            \"name\":\"C#\",\r\n            \"checked\":false\r\n        },\r\n        {\r\n            \"name\":\"Web Api\",\r\n            \"checked\":false\r\n        },\r\n        {\r\n            \"name\":\"SQL Server\",\r\n            \"checked\":false\r\n        }\r\n    ]\r\n}" }
  },
  "conditionalExpressionExampleString": {
    "notes": null,
    "component": null,
    "html": null,
    "model": "RxwebValidators.choice({maxLength:4, conditionalExpression: \"x => x.department =='DotNet'\"})",
    "modelName": null,
    "jsonName": null,
    "json": null
  },
  "maxLengthExample": {
    "notes": null,
    "component": null,
    "html": null,
    "model": "RxwebValidators.choice({maxLength:4})",
    "modelName": null,
    "jsonName": null,
    "json": null
  },
  "maxLength": {
    "notes": null,
    "component": "import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from \"@angular/forms\"\r\nimport { RxFormBuilder, RxwebValidators } from '@rxweb/reactive-form-validators';\r\nimport { HttpClient } from '@angular/common/http';\r\n\r\n@Component({\r\n    selector: 'app-choice-maxLength-validator',\r\n    templateUrl: './choice-max-length.component.html'\r\n})\r\nexport class ChoiceMaxLengthValidatorComponent implements OnInit {\r\n    employeeInfoFormGroup: FormGroup\r\n\r\n    constructor(\r\n        private formBuilder: RxFormBuilder ,private http: HttpClient) { }\r\n\r\n        projectDomainsArray : string[] = [];\r\n      \r\n        ngOnInit() {\r\n            this.employeeInfoFormGroup = this.formBuilder.group({\r\n                projectDomains:['', RxwebValidators.choice({maxLength:4})]\r\n                \r\n            });\r\n          this.http.get(\"assets/examples/reactive-form-validators/validators/choice/maxLength/choice.json\").subscribe(response => {\r\n            this.projectDomainsArray = response['projectDomainsArray'];\r\n        })\r\n      \r\n        }\r\n\r\n        index = 0;\r\n        addProjectDomain(element:any) {\r\n          var value = this.employeeInfoFormGroup.controls.projectDomains.value;\r\n          if(!value)\r\n            value = [];\r\n            if(element.checked) {\r\n                  value.push(element.value);\r\n                  this.index++;\r\n            }\r\n            else\r\n            {\r\n            var indexOf = value.indexOf(element.value);\r\n            value.splice(indexOf,1);\r\n            }\r\n          this.employeeInfoFormGroup.controls.projectDomains.setValue(value)\r\n        }\r\n}",
    "html": "<div>\r\n    <form [formGroup]=\"employeeInfoFormGroup\">\r\n      <div class=\"form-group\">\r\n        <label>Project Domains</label>\r\n        <div class=\"form-check\" *ngFor=\"let tag of projectDomainsArray; let i = index;\">\r\n          <h4>\r\n            <input (click)=\"addProjectDomain($event.target,i)\"  type=\"checkbox\" value=\"{{tag.name}}\" /> {{tag.name}}\r\n          </h4>\r\n        </div>\r\n        <br />\r\n        <small class=\"form-text text-muted\">You must select atmost 4 option.</small><br>\r\n        <small class=\"form-text text-danger\" *ngIf=\"employeeInfoFormGroup.controls.projectDomains.errors\">{{employeeInfoFormGroup.controls.projectDomains.errors.choice.message}}</small>\r\n        <br />\r\n      </div>\r\n      <button [disabled]=\"!employeeInfoFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n    </form>\r\n  </div>",
    "model": "import {  choice  } from \"@rxweb/reactive-form-validators\"\r\n\r\nexport class EmployeeInfo{\r\n\r\n    @choice({maxLength:4})\r\n    qualifications: string;\r\n}",
    "modelName": "employee-info.model.ts",
    "json": { "choice.json": "{\r\n    \"projectDomainsArray\": [\r\n        {\r\n            \"name\": \"ECommerce\",\r\n            \"checked\": false\r\n        },\r\n        {\r\n            \"name\": \"Banking\",\r\n            \"checked\": false\r\n        },\r\n        {\r\n            \"name\":\"Educational\",\r\n            \"checked\":false\r\n        },\r\n        {\r\n            \"name\":\"Gaming\",\r\n            \"checked\":false\r\n        },\r\n        {\r\n            \"name\":\"Financial\",\r\n            \"checked\":false\r\n        }\r\n    ]\r\n}" }
  },
  "messageExample": {
    "notes": null,
    "component": null,
    "html": null,
    "model": "RxwebValidators.choice({maxLength:4,message: \"Please select upto 4 hobby\"})",
    "modelName": null,
    "jsonName": null,
    "json": null
  },
  "minLengthExample": {
    "notes": null,
    "component": null,
    "html": null,
    "model": "RxwebValidators.choice({minLength:3})",
    "modelName": null,
    "json": null
  },
  "minLength": {
    "notes": null,
    "component": "import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from \"@angular/forms\"\r\nimport { RxFormBuilder, RxwebValidators } from '@rxweb/reactive-form-validators';\r\nimport { HttpClient } from '@angular/common/http';\r\n\r\n@Component({\r\n    selector: 'app-choice-minLength-validator',\r\n    templateUrl: './choice-min-length.component.html'\r\n})\r\nexport class ChoiceMinLengthValidatorComponent implements OnInit {\r\n    employeeInfoFormGroup: FormGroup\r\n\r\n    constructor(\r\n        private formBuilder: RxFormBuilder ,private http: HttpClient) { }\r\n\r\n        projectDomainsArray : string[] = [];\r\n      \r\n        ngOnInit() {\r\n            this.employeeInfoFormGroup = this.formBuilder.group({\r\n                projectDomains:['', RxwebValidators.choice({minLength:3})]\r\n                \r\n            });\r\n          this.http.get(\"assets/examples/reactive-form-validators/validators/choice/minLength/choice.json\").subscribe(response => {\r\n            this.projectDomainsArray = response['projectDomainsArray'];\r\n        })\r\n      \r\n        }\r\n\r\n        index = 0;\r\n        addProjectDomain(element:any) {\r\n          var value = this.employeeInfoFormGroup.controls.projectDomains.value;\r\n          if(!value)\r\n            value = [];\r\n            if(element.checked) {\r\n                  value.push(element.value);\r\n                  this.index++;\r\n            }\r\n            else\r\n            {\r\n            var indexOf = value.indexOf(element.value);\r\n            value.splice(indexOf,1);\r\n            }\r\n          this.employeeInfoFormGroup.controls.projectDomains.setValue(value)\r\n        }\r\n}\r\n",
    "html": "<div>\r\n    <form [formGroup]=\"employeeInfoFormGroup\">\r\n      <div class=\"form-group\">\r\n        <label>Project Domains</label>\r\n        <div class=\"form-check\" *ngFor=\"let tag of projectDomainsArray; let i = index;\">\r\n          <h4>\r\n            <input (click)=\"addProjectDomain($event.target,i)\"  type=\"checkbox\" value=\"{{tag.name}}\" /> {{tag.name}}\r\n          </h4>\r\n        </div>\r\n        <br />\r\n        <small class=\"form-text text-muted\">You must select atleast 3 option.</small><br>\r\n        <small class=\"form-text text-danger\" *ngIf=\"employeeInfoFormGroup.controls.projectDomains.errors\">{{employeeInfoFormGroup.controls.projectDomains.errors.choice.message}}</small>\r\n        <br />\r\n      </div>\r\n      <button [disabled]=\"!employeeInfoFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n    </form>\r\n  </div>",
    "model": null,
    "modelName": null,
    "json": { "choice.json": "{\r\n    \"projectDomainsArray\": [\r\n        {\r\n            \"name\": \"ECommerce\",\r\n            \"checked\": false\r\n        },\r\n        {\r\n            \"name\": \"Banking\",\r\n            \"checked\": false\r\n        },\r\n        {\r\n            \"name\":\"Educational\",\r\n            \"checked\":false\r\n        },\r\n        {\r\n            \"name\":\"Gaming\",\r\n            \"checked\":false\r\n        },\r\n        {\r\n            \"name\":\"Financial\",\r\n            \"checked\":false\r\n        }\r\n    ]\r\n}" }
  },
  "message": {
    "notes": [],
    "component": "import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from \"@angular/forms\"\r\nimport { RxFormBuilder, RxwebValidators } from '@rxweb/reactive-form-validators';\r\n\r\nimport { HttpClient } from '@angular/common/http';\r\n\r\n@Component({\r\n    selector: 'app-choice-message-validator',\r\n    templateUrl: './choice-message.component.html'\r\n})\r\nexport class ChoiceMessageValidatorComponent implements OnInit {\r\n    employeeInfoFormGroup: FormGroup\r\n\r\n    selectedHobbies: string[] = [];\r\n\r\n    constructor(\r\n        private formBuilder: RxFormBuilder, private http: HttpClient) { }\r\n\r\n    hobbiesArray: string[] = [];\r\n\r\n    ngOnInit() {\r\n        this.employeeInfoFormGroup = this.formBuilder.group({\r\n            hobbies:['',RxwebValidators.choice({maxLength:4,message: \"Please select upto 4 hobby\"})]\r\n        });\r\n        this.http.get(\"assets/examples/reactive-form-validators/validators/choice/message/choice.json\").subscribe(response => {\r\n            this.hobbiesArray = response['hobbiesArray'];\r\n        })\r\n    }\r\n\r\n    addHobby(element: any, index: number) {\r\n        element.checked ? this.selectedHobbies.push(element.value) : this.selectedHobbies.splice(index, 1);\r\n        this.employeeInfoFormGroup.controls.hobbies.setValue(this.selectedHobbies);\r\n    }\r\n}\r\n",
    "html": "<div>\r\n    <form [formGroup]=\"employeeInfoFormGroup\">\r\n      <div class=\"form-group\">\r\n        <label>Hobbies</label>\r\n        <div class=\"form-check\" *ngFor=\"let tag of hobbiesArray; let i = index;\">\r\n            <h4>\r\n              <input (click)=\"addHobby($event.target,i)\" type=\"checkbox\" value=\"{{tag.name}}\" /> {{tag.name}}\r\n            </h4>\r\n          </div>\r\n          <br />\r\n          <small class=\"form-text text-danger\" *ngIf=\"employeeInfoFormGroup.controls.hobbies.errors\">{{employeeInfoFormGroup.controls.hobbies.errors.choice.message}}</small>\r\n          <br />\r\n          <small class=\"form-text text-muted\">Shows custom message</small><br>\r\n          <br />\r\n      </div>\r\n      <button [disabled]=\"!employeeInfoFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n    </form>\r\n    </div>",
    "model": null,
    "modelName": null,
    "json": { "choice.json": "{\r\n    \"hobbiesArray\":[\r\n        {\r\n            \"name\":\"Drawing\",\r\n            \"checked\":false\r\n        },\r\n        {\r\n            \"name\":\"Singing\",\r\n            \"checked\":false\r\n        },\r\n        {\r\n            \"name\":\"Dancing\",\r\n            \"checked\":false\r\n        },\r\n        {\r\n            \"name\":\"Travelling\",\r\n            \"checked\":false\r\n        },\r\n        {\r\n            \"name\":\"Sports\",\r\n            \"checked\":false\r\n        }\r\n    ]\r\n}" }
  },
  "dynamic": {
    "notes": [],
    "component": "import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup, FormBuilder } from \"@angular/forms\"\r\nimport { RxwebValidators } from '@rxweb/reactive-form-validators';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { FormBuilderConfiguration,RxFormBuilder} from '@rxweb/reactive-form-validators';\r\n\r\n@Component({\r\n    selector: 'app-choice-dynamic-validator',\r\n    templateUrl: './choice-dynamic.component.html'\r\n})\r\nexport class ChoiceDynamicValidatorComponent implements OnInit {\r\n\r\n    employeeInfoFormGroup: FormGroup\r\n\r\n    selectedQualifications: string[] = [];\r\n    selectedSkills: string[] = [];\r\n    selectedHobbies: string[] = [];\r\n    projectDomains : string[] = [];\r\n\r\n\tconstructor(\r\n        private formBuilder: RxFormBuilder , private http: HttpClient )\r\n\t{ }\r\n\r\n\tqualificationsArray: string[] = [];\r\n\tskillsArray: string[] = [];\r\n\thobbiesArray: string[] = [];\r\n\tprojectDomainsArray : string[] = [];\r\n\r\n    ngOnInit() {\r\n\t\tlet formBuilderConfiguration = new FormBuilderConfiguration();\r\n\t\tthis.http.get('assets/examples/reactive-form-validators/validators/choice/dynamic/dynamic.json').subscribe(dynamic => {\r\n\t\t\tformBuilderConfiguration.dynamicValidation = JSON.parse(JSON.stringify(dynamic));\r\n\t\t\tvar employeeInfo = { department:'', projectDomains:'', skills:'', hobbies:'' ,qualifications:'' }\r\n\t\t\tthis.employeeInfoFormGroup = this.formBuilder.group(employeeInfo,formBuilderConfiguration);\r\n\t\t})\r\n\r\n\t\tthis.http.get(\"assets/examples/reactive-form-validators/validators/choice/dynamic/choice.json\").subscribe(response => {\r\n            this.skillsArray = response['skillsArray'];\r\n            this.hobbiesArray = response['hobbiesArray'];\r\n            this.projectDomainsArray = response['projectDomainsArray'];\r\n            this.qualificationsArray = response['qualificationsArray']\r\n        })\r\n    }\r\n    \r\n    index = 0;\r\n    addProjectDomain(element:any) {\r\n      var value = this.employeeInfoFormGroup.controls.projectDomains.value;\r\n      if(!value)\r\n        value = [];\r\n        if(element.checked) {\r\n              value.push(element.value);\r\n              this.index++;\r\n        }\r\n        else\r\n        {\r\n        var indexOf = value.indexOf(element.value);\r\n        value.splice(indexOf,1);\r\n        }\r\n      this.employeeInfoFormGroup.controls.projectDomains.setValue(value)\r\n    }\r\n\r\n      addSkill(element:any) {\r\n        var value = this.employeeInfoFormGroup.controls.skills.value;\r\n        if(!value)\r\n          value = [];\r\n          if(element.checked) {\r\n                value.push(element.value);\r\n                this.index++;\r\n          }\r\n          else\r\n          {\r\n          var indexOf = value.indexOf(element.value);\r\n          value.splice(indexOf,1);\r\n          }\r\n        this.employeeInfoFormGroup.controls.skills.setValue(value)\r\n      }\r\n\r\n      addHobby(element:any) {\r\n        var value = this.employeeInfoFormGroup.controls.hobbies.value;\r\n        if(!value)\r\n          value = [];\r\n          if(element.checked) {\r\n                value.push(element.value);\r\n                this.index++;\r\n          }\r\n          else\r\n          {\r\n          var indexOf = value.indexOf(element.value);\r\n          value.splice(indexOf,1);\r\n          }\r\n        this.employeeInfoFormGroup.controls.hobbies.setValue(value)\r\n      }\r\n\r\n\r\n     \r\n}\r\n",
    "html": "<div>\r\n  <form *ngIf=\"employeeInfoFormGroup\" [formGroup]=\"employeeInfoFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label>Department</label>\r\n      <input type=\"text\" formControlName=\"department\" class=\"form-control\" placeholder=\"Enter any department\" />\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Project Domains</label>\r\n      <div class=\"form-check\" *ngFor=\"let tag of projectDomainsArray; let i = index;\">\r\n          <h4>\r\n            <input (click)=\"addProjectDomain($event.target,i)\" type=\"checkbox\" value=\"{{tag.name}}\" /> {{tag.name}}\r\n          </h4>\r\n        </div>\r\n        <br />\r\n        <small class=\"form-text text-danger\" *ngIf=\"employeeInfoFormGroup.controls.projectDomains.errors\">{{employeeInfoFormGroup.controls.projectDomains.errors.choice.message}}</small><br>\r\n        <small class=\"form-text text-muted\">You must select atleast 3 option.</small><br>\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Qualifications</label>\r\n      <div class=\"form-check\" *ngFor=\"let tag of qualificationsArray; let i = index;\">\r\n        <h4>\r\n          <input (click)=\"addQualification($event.target,i)\"  type=\"checkbox\" value=\"{{tag.name}}\" /> {{tag.name}}\r\n        </h4>\r\n      </div>\r\n      <br />\r\n      <small class=\"form-text text-danger\" *ngIf=\"employeeInfoFormGroup.controls.qualifications.errors\">{{employeeInfoFormGroup.controls.qualifications.errors.choice.message}}</small>\r\n      <br />\r\n      <small class=\"form-text text-muted\" >You must select atmost 4 option</small>\r\n      <br />\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Skills</label><small>( With Conditional Expression )</small><br>\r\n      <div class=\"form-check\" *ngFor=\"let tag of skillsArray; let i = index;\">\r\n        <h4>\r\n          <input (click)=\"addSkill($event.target,i)\" type=\"checkbox\" value=\"{{tag.name}}\" /> {{tag.name}}\r\n        </h4>\r\n      </div>\r\n      <br />\r\n      <small class=\"form-text text-danger\" *ngIf=\"employeeInfoFormGroup.controls.skills.errors\">{{employeeInfoFormGroup.controls.skills.errors.choice.message}}</small>\r\n      <br />\r\n      <small class=\"form-text text-muted\" >To apply the validation on 'Skills' field, enter 'DotNet' in 'Department' field</small>\r\n      <br />\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Hobbies</label>\r\n      <div class=\"form-check\" *ngFor=\"let tag of hobbiesArray; let i = index;\">\r\n          <h4>\r\n            <input (click)=\"addHobby($event.target,i)\" type=\"checkbox\" value=\"{{tag.name}}\" /> {{tag.name}}\r\n          </h4>\r\n        </div>\r\n        <br />\r\n        <small class=\"form-text text-danger\" *ngIf=\"employeeInfoFormGroup.controls.hobbies.errors\">{{employeeInfoFormGroup.controls.hobbies.errors.choice.message}}</small>\r\n        <br />\r\n        <small class=\"form-text text-muted\">Shows custom message</small><br>\r\n    </div>\r\n    <button [disabled]=\"!employeeInfoFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n  </div>",
    "model": null,
    "modelName": null,
    "json": {
      "dynamic.json": "{\r\n    \"department\": {\r\n        \"choice\": false\r\n    },\r\n    \"projectDomains\": {\r\n        \"choice\": {\r\n            \"minLength\": 3\r\n        }\r\n    },\r\n    \"qualifications\": {\r\n        \"choice\": {\r\n            \"maxLength\": 4\r\n        }\r\n    },\r\n    \"skills\": {\r\n        \"choice\": {\r\n            \"minLength\":3,\r\n            \"conditionalExpression\": \"x => x.department =='DotNet'\"\r\n        }\r\n    },\r\n    \"hobbies\": {\r\n        \"choice\": {\r\n            \"maxLength\":4,\r\n            \"message\": \"Please select upto 4 hobby\"\r\n        }\r\n    }\r\n}"
    }
  },
  "add": {
    "notes": [],
    "component": "import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from \"@angular/forms\"\r\nimport { RxFormBuilder, RxwebValidators } from '@rxweb/reactive-form-validators';\r\nimport { HttpClient } from '@angular/common/http';\r\n\r\n@Component({\r\n    selector: 'app-choice-add-validator',\r\n    templateUrl: './choice-add.component.html'\r\n})\r\nexport class ChoiceAddValidatorComponent implements OnInit {\r\n    employeeInfoFormGroup: FormGroup\r\n    showComponent:boolean=false;\r\n\r\n    projectDomains: string[] = [];\r\n\r\n    constructor(\r\n        private formBuilder: RxFormBuilder, private http: HttpClient) { }\r\n\r\n    projectDomainsArray: string[] = [];\r\n\r\n    ngOnInit() {\r\n        this.employeeInfoFormGroup = this.formBuilder.group({\r\n            department: [''],\r\n            projectDomains: ['', RxwebValidators.choice({ minLength: 3 })],\r\n        });\r\n        this.http.get(\"assets/examples/reactive-form-validators/validators/choice/add/choice.json\").subscribe(response => {\r\n            this.projectDomainsArray = response['projectDomainsArray'];\r\n            this.showComponent = true;\r\n        })\r\n    }\r\n\r\n    index = 0;\r\n    addProjectDomain(element: any) {\r\n        var value = this.employeeInfoFormGroup.controls.projectDomains.value;\r\n        if (!value)\r\n            value = [];\r\n        if (element.checked) {\r\n            value.push(element.value);\r\n            this.index++;\r\n        }\r\n        else {\r\n            var indexOf = value.indexOf(element.value);\r\n            value.splice(indexOf, 1);\r\n        }\r\n        this.employeeInfoFormGroup.controls.projectDomains.setValue(value)\r\n    }\r\n}\r\n",
    "html": "<div *ngIf=\"showComponent\">\r\n    <form [formGroup]=\"employeeInfoFormGroup\">\r\n      <div class=\"form-group\">\r\n        <label>Project Domains</label>\r\n        <div class=\"form-check\" *ngFor=\"let tag of projectDomainsArray; let i = index;\">\r\n          <h4>\r\n            <input (click)=\"addProjectDomain($event.target,i)\"  type=\"checkbox\" value=\"{{tag.name}}\" /> {{tag.name}}\r\n          </h4>\r\n        </div>\r\n        <br />\r\n        <small class=\"form-text text-danger\" *ngIf=\"employeeInfoFormGroup.controls.projectDomains.errors\">{{employeeInfoFormGroup.controls.projectDomains.errors.choice.message}}</small>\r\n        <br />\r\n        <small class=\"form-text text-muted\">You must select atleast 3 option.</small><br>\r\n        <br />\r\n      </div>\r\n      <button [disabled]=\"!employeeInfoFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n    </form>\r\n  </div>",
    "model": null,
    "modelName": null,
    "json": { "choice.json": "{\r\n    \"projectDomainsArray\": [\r\n        {\r\n            \"name\": \"ECommerce\",\r\n            \"checked\": false\r\n        },\r\n        {\r\n            \"name\": \"Banking\",\r\n            \"checked\": false\r\n        },\r\n        {\r\n            \"name\":\"Educational\",\r\n            \"checked\":false\r\n        },\r\n        {\r\n            \"name\":\"Gaming\",\r\n            \"checked\":false\r\n        }\r\n    ]\r\n}" }
  }
}
