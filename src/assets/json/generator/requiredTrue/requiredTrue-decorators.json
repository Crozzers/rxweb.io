{
    "complete": {
        "notes": null,
        "component": "import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from \"@angular/forms\"\r\nimport { RxFormBuilder } from '@rxweb/reactive-form-validators';\r\n\r\nimport { User } from './user.model';\r\n\r\n@Component({\r\n    selector: 'app-requiredTrue-complete',\r\n    templateUrl: './required-true-complete.component.html'\r\n})\r\nexport class RequiredTrueCompleteComponent implements OnInit {\r\n    userFormGroup: FormGroup\r\n\r\n    constructor(\r\n        private formBuilder: RxFormBuilder    ) { }\r\n\r\n    ngOnInit() {\r\n        let user = new User();\r\n        this.userFormGroup = this.formBuilder.formGroup(user);\r\n    }\r\n}\r\n",
        "html": "<div>\r\n  <form  [formGroup]=\"userFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label>Agree to terms and conditions</label>\r\n      <input type=\"checkbox\" formControlName=\"isAgree\" class=\"form-control\" />\r\n     <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.isAgree.errors\">{{userFormGroup.controls.isAgree.errors.requiredTrue.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Is Checked</label>\r\n      <input type=\"checkbox\" formControlName=\"isChecked\" class=\"form-control\" />\r\n      <small class=\"form-text text-muted\">Conditional validation will be applied if the isAgree checkbox is  true<br/></small>\r\n      <small class=\"form-text text-muted\">Conditional Expression with type 'function'<br/></small>\r\n     <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.isChecked.errors\">{{userFormGroup.controls.isChecked.errors.requiredTrue.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>CheckMeOut</label>\r\n      <input type=\"checkbox\" formControlName=\"checkMeOut\" class=\"form-control\" />\r\n      <small class=\"form-text text-muted\">Conditional validation will be applied if the isAgree checkbox is  true<br/></small>\r\n      <small class=\"form-text text-muted\">Conditional Expression with type 'string'<br/></small>\r\n     <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.checkMeOut.errors\">{{userFormGroup.controls.checkMeOut.errors.requiredTrue.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>IsActive</label>\r\n      <input type=\"checkbox\" formControlName=\"isActive\" class=\"form-control\" />\r\n      <small class=\"form-text text-muted\">Shows Custom Validation Message.<br/></small>\r\n     <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.isActive.errors\">{{userFormGroup.controls.isActive.errors.requiredTrue.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>IsBlocked</label>\r\n      <input type=\"checkbox\" formControlName=\"isBlocked\" class=\"form-control\" />\r\n      <small class=\"form-text text-muted\">Shows Custom Validation Message based on message key<br/></small>\r\n     <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.isBlocked.errors\">{{userFormGroup.controls.isBlocked.errors.requiredTrueMessageKey.message}}<br/></small>\t\t\r\n    </div>\r\n    <button [disabled]=\"!userFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n",
        "model": "import {  requiredTrue, } from   \"@rxweb/reactive-form-validators\"   \r\n\r\nexport class User {\r\n\r\n\t@requiredTrue() \r\n\tisAgree: boolean;\r\n\t\r\n\t\r\n\t//If you want to apply conditional expression of type 'function'\r\n\t@requiredTrue({conditionalExpression:(x,y) => x.isAgree == true }) \r\n\tisChecked: boolean;\r\n\t\r\n\t\r\n\t//If you want to apply conditional expression of type 'string'\r\n\t@requiredTrue({conditionalExpression:'x => x.isAgree == true' }) \r\n\tcheckMeOut: boolean;\r\n\t\r\n\t\r\n\t@requiredTrue({message:'Should be active' }) \r\n\tisActive: string;\r\n\t\r\n\t\r\n\t@requiredTrue({messageKey:'requiredTrueMessageKey' }) \r\n\tisBlocked: string;\r\n\t\r\n\t\r\n}\r\n",
        "modelName": "user.model.ts",
        "json": {}
    },
    "conditionalExpressionExampleFunction": {
        "notes": null,
        "component": null,
        "html": null,
        "model": "@requiredTrue({conditionalExpression:(x,y) => x.isAgree == true }) \r\nisChecked: boolean;\r\n",
        "modelName": null,
        "json": {}
    },
    "conditionalExpression": {
        "notes": null,
        "component": "import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from \"@angular/forms\"\r\nimport { RxFormBuilder } from '@rxweb/reactive-form-validators';\r\n\r\nimport { User } from './user.model';\r\n\r\n@Component({\r\n    selector: 'app-requiredTrue-conditionalExpression',\r\n    templateUrl: './required-true-conditional-expression.component.html'\r\n})\r\nexport class RequiredTrueConditionalExpressionComponent implements OnInit {\r\n    userFormGroup: FormGroup\r\n\r\n    constructor(\r\n        private formBuilder: RxFormBuilder    ) { }\r\n\r\n    ngOnInit() {\r\n        let user = new User();\r\n        this.userFormGroup = this.formBuilder.formGroup(user);\r\n    }\r\n}\r\n",
        "html": "<div>\r\n  <form  [formGroup]=\"userFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label>Agree to terms and conditions</label>\r\n      <input type=\"checkbox\" formControlName=\"isAgree\" class=\"form-control\" />\r\n     <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.isAgree.errors\">{{userFormGroup.controls.isAgree.errors.requiredTrue.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>CheckMeOut</label>\r\n      <input type=\"checkbox\" formControlName=\"checkMeOut\" class=\"form-control\" />\r\n      <small class=\"form-text text-muted\">Conditional validation will be applied if the isAgree checkbox is  true<br/></small>\r\n      <small class=\"form-text text-muted\">Conditional Expression with type 'string'<br/></small>\r\n     <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.checkMeOut.errors\">{{userFormGroup.controls.checkMeOut.errors.requiredTrue.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Is Checked</label>\r\n      <input type=\"checkbox\" formControlName=\"isChecked\" class=\"form-control\" />\r\n      <small class=\"form-text text-muted\">Conditional validation will be applied if the isAgree checkbox is  true<br/></small>\r\n      <small class=\"form-text text-muted\">Conditional Expression with type 'function'<br/></small>\r\n     <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.isChecked.errors\">{{userFormGroup.controls.isChecked.errors.requiredTrue.message}}<br/></small>\t\r\n    </div>\r\n    <button [disabled]=\"!userFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n",
        "model": "import {  requiredTrue, } from   \"@rxweb/reactive-form-validators\"   \r\n\r\nexport class User {\r\n\r\n\t@requiredTrue() \r\n\tisAgree: boolean;\r\n\t\r\n\t\r\n\t//If you want to apply conditional expression of type 'string'\r\n\t@requiredTrue({conditionalExpression:'x => x.isAgree == true' }) \r\n\tcheckMeOut: boolean;\r\n\t\r\n\t\r\n\t//If you want to apply conditional expression of type 'function'\r\n\t@requiredTrue({conditionalExpression:(x,y) => x.isAgree == true }) \r\n\tisChecked: boolean;\r\n\t\r\n\t\r\n}\r\n",
        "modelName": "user.model.ts",
        "json": {}
    },
    "conditionalExpressionExampleString": {
        "notes": null,
        "component": null,
        "html": null,
        "model": "@requiredTrue({conditionalExpression:'x => x.isAgree == true' }) \r\ncheckMeOut: boolean;\r\n",
        "modelName": null,
        "json": {}
    },
    "messageExample": {
        "notes": null,
        "component": null,
        "html": null,
        "model": "@requiredTrue({message:'Should be active' }) \r\nisActive: string;\r\n",
        "modelName": null,
        "json": {}
    },
    "message": {
        "notes": null,
        "component": "import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from \"@angular/forms\"\r\nimport { RxFormBuilder } from '@rxweb/reactive-form-validators';\r\n\r\nimport { User } from './user.model';\r\n\r\n@Component({\r\n    selector: 'app-requiredTrue-message',\r\n    templateUrl: './required-true-message.component.html'\r\n})\r\nexport class RequiredTrueMessageComponent implements OnInit {\r\n    userFormGroup: FormGroup\r\n\r\n    constructor(\r\n        private formBuilder: RxFormBuilder    ) { }\r\n\r\n    ngOnInit() {\r\n        let user = new User();\r\n        this.userFormGroup = this.formBuilder.formGroup(user);\r\n    }\r\n}\r\n",
        "html": "<div>\r\n  <form  [formGroup]=\"userFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label>IsActive</label>\r\n      <input type=\"checkbox\" formControlName=\"isActive\" class=\"form-control\" />\r\n      <small class=\"form-text text-muted\">Shows Custom Validation Message.<br/></small>\r\n     <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.isActive.errors\">{{userFormGroup.controls.isActive.errors.requiredTrue.message}}<br/></small>\t\r\n    </div>\r\n    <button [disabled]=\"!userFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n",
        "model": "import {  requiredTrue, } from   \"@rxweb/reactive-form-validators\"   \r\n\r\nexport class User {\r\n\r\n\t@requiredTrue({message:'Should be active' }) \r\n\tisActive: string;\r\n\t\r\n\t\r\n}\r\n",
        "modelName": "user.model.ts",
        "json": {}
    },
    "messageKeyExample": {
        "notes": null,
        "component": null,
        "html": null,
        "model": "@requiredTrue({messageKey:'requiredTrueMessageKey' }) \r\nisBlocked: string;\r\n",
        "modelName": null,
        "json": {}
    },
    "messageKey": {
        "notes": null,
        "component": "import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from \"@angular/forms\"\r\nimport { RxFormBuilder } from '@rxweb/reactive-form-validators';\r\n\r\nimport { User } from './user.model';\r\n\r\n@Component({\r\n    selector: 'app-requiredTrue-messageKey',\r\n    templateUrl: './required-true-message-key.component.html'\r\n})\r\nexport class RequiredTrueMessageKeyComponent implements OnInit {\r\n    userFormGroup: FormGroup\r\n\r\n    constructor(\r\n        private formBuilder: RxFormBuilder    ) { }\r\n\r\n    ngOnInit() {\r\n        let user = new User();\r\n        this.userFormGroup = this.formBuilder.formGroup(user);\r\n    }\r\n}\r\n",
        "html": "<div>\r\n  <form  [formGroup]=\"userFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label>IsBlocked</label>\r\n      <input type=\"checkbox\" formControlName=\"isBlocked\" class=\"form-control\" />\r\n      <small class=\"form-text text-muted\">Shows Custom Validation Message based on message key<br/></small>\r\n     <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.isBlocked.errors\">{{userFormGroup.controls.isBlocked.errors.requiredTrueMessageKey.message}}<br/></small>\t\t\r\n    </div>\r\n    <button [disabled]=\"!userFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n",
        "model": "import {  requiredTrue, } from   \"@rxweb/reactive-form-validators\"   \r\n\r\nexport class User {\r\n\r\n\t@requiredTrue({messageKey:'requiredTrueMessageKey' }) \r\n\tisBlocked: string;\r\n\t\r\n\t\r\n}\r\n",
        "modelName": "user.model.ts",
        "json": {}
    },
    "dynamic": {
        "notes": null,
        "component": "import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from \"@angular/forms\"\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { environment } from 'src/environments/environment';\r\nimport { RxFormBuilder } from '@rxweb/reactive-form-validators';\r\nimport { FormBuilderConfiguration,} from '@rxweb/reactive-form-validators';\r\n\r\nimport { User } from './user.model';\r\n\r\n@Component({\r\n    selector: 'app-requiredTrue-dynamic',\r\n    templateUrl: './required-true-dynamic.component.html'\r\n})\r\nexport class RequiredTrueDynamicComponent implements OnInit {\r\n    userFormGroup: FormGroup\r\n\r\n    constructor(\r\n        private formBuilder: RxFormBuilder,private http: HttpClient    ) { }\r\n\r\n    ngOnInit() {\r\n        let user = new User();\r\n        let formBuilderConfiguration = new FormBuilderConfiguration();\r\n\t\tthis.http.get('assets/examples/reactive-form-validators/decorators/requiredTrue/dynamic/dynamic.json?v=' + environment.appVersion).subscribe(dynamic => {\r\n            formBuilderConfiguration.dynamicValidation = JSON.parse(JSON.stringify(dynamic));\r\n\t\t\tthis.userFormGroup = this.formBuilder.formGroup(user,formBuilderConfiguration);\r\n        })\r\n    }\r\n}\r\n",
        "html": "<div>\r\n  <form  *ngIf=\"userFormGroup\"  [formGroup]=\"userFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label>Agree to terms and conditions</label>\r\n      <input type=\"checkbox\" formControlName=\"isAgree\" class=\"form-control\" />\r\n      <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.isAgree.errors\">{{userFormGroup.controls.isAgree.errors.requiredTrue.message}}<br/></small>\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>CheckMeOut</label>\r\n      <input type=\"checkbox\" formControlName=\"checkMeOut\" class=\"form-control\" />\r\n      <small class=\"form-text text-muted\">Conditional validation will be applied if the isAgree checkbox is  true<br/></small>\r\n      <small class=\"form-text text-muted\">Conditional Expression with type 'string'<br/></small>\r\n     <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.checkMeOut.errors\">{{userFormGroup.controls.checkMeOut.errors.requiredTrue.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>IsActive</label>\r\n      <input type=\"checkbox\" formControlName=\"isActive\" class=\"form-control\" />\r\n      <small class=\"form-text text-muted\">Shows Custom Validation Message.<br/></small>\r\n     <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.isActive.errors\">{{userFormGroup.controls.isActive.errors.requiredTrue.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>IsBlocked</label>\r\n      <input type=\"checkbox\" formControlName=\"isBlocked\" class=\"form-control\" />\r\n      <small class=\"form-text text-muted\">Shows Custom Validation Message based on message key<br/></small>\r\n     <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.isBlocked.errors\">{{userFormGroup.controls.isBlocked.errors.requiredTrueMessageKey.message}}<br/></small>\t\t\r\n    </div>\r\n    <button [disabled]=\"!userFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n",
        "model": "import {  requiredTrue,prop, } from   \"@rxweb/reactive-form-validators\"   \r\n\r\nexport class User {\r\n\r\n\t@prop()\r\n\tisAgree: boolean;\r\n\r\n\t@prop()\r\n\tcheckMeOut: boolean;\r\n\r\n\t@prop()\r\n\tisActive: string;\r\n\r\n\t@prop()\r\n\tisBlocked: string;\r\n\r\n}\r\n",
        "modelName": "user.model.ts",
        "json": {
            "dynamic.json": "{\"isAgree\":{\"requiredTrue\":true},\"checkMeOut\":{\"requiredTrue\":{\"conditionalExpression\":\"x => x.isAgree == true\"}},\"isActive\":{\"requiredTrue\":{\"message\":\"'Should be active\"'}},\"isBlocked\":{\"requiredTrue\":{\"messageKey\":\"requiredTrueMessageKey\"}}}"
        }
    },
    "add": {
        "notes": null,
        "component": "import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from \"@angular/forms\"\r\nimport { RxFormBuilder } from '@rxweb/reactive-form-validators';\r\n\r\nimport { UserInfo } from './user-info.model';\r\n\r\n@Component({\r\n    selector: 'app-requiredTrue-add',\r\n    templateUrl: './required-true-add.component.html'\r\n})\r\nexport class RequiredTrueAddComponent implements OnInit {\r\n    userInfoFormGroup: FormGroup\r\n\r\n    constructor(\r\n        private formBuilder: RxFormBuilder    ) { }\r\n\r\n    ngOnInit() {\r\n        let userInfo = new UserInfo();\r\n        this.userInfoFormGroup = this.formBuilder.formGroup(userInfo);\r\n    }\r\n}\r\n",
        "html": "<div>\r\n  <form  [formGroup]=\"userInfoFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label>Is Checked</label>\r\n      <input type=\"checkbox\" formControlName=\"ischecked\" class=\"form-control\"  />\r\n     <small class=\"form-text text-danger\" *ngIf=\"userInfoFormGroup.controls.ischecked.errors\">{{userInfoFormGroup.controls.ischecked.errors.requiredTrue.message}}<br/></small>\t\r\n    </div>\r\n    <button [disabled]=\"!userInfoFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n",
        "model": "import {  requiredTrue, } from   \"@rxweb/reactive-form-validators\"   \r\n\r\nexport class UserInfo {\r\n\r\n\t@requiredTrue() \r\n\tischecked: boolean;\r\n\t\r\n\t\r\n}\r\n",
        "modelName": "user-info.model.ts",
        "json": {}
    },
    "edit": {
        "notes": null,
        "component": "import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from \"@angular/forms\"\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { environment } from 'src/environments/environment';\r\nimport { RxFormBuilder } from '@rxweb/reactive-form-validators';\r\n\r\nimport { UserInfo } from './user-info.model';\r\n\r\n@Component({\r\n    selector: 'app-requiredTrue-edit',\r\n    templateUrl: './required-true-edit.component.html'\r\n})\r\nexport class RequiredTrueEditComponent implements OnInit {\r\n    userInfoFormGroup: FormGroup\r\n\r\n    constructor(\r\n        private formBuilder: RxFormBuilder,private http: HttpClient    ) { }\r\n\r\n    ngOnInit() {\r\n        this.http.get('assets/examples/reactive-form-validators/decorators/requiredTrue/edit/user-info-data.json?v=' + environment.appVersion).subscribe(userInfo => {\r\n            this.userInfoFormGroup = this.formBuilder.formGroup<UserInfo>(UserInfo,userInfo);\r\n        })\r\n    }\r\n}\r\n",
        "html": "<div>\r\n  <form  *ngIf=\"userInfoFormGroup\"  [formGroup]=\"userInfoFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label>Is Checked</label>\r\n      <input type=\"checkbox\" formControlName=\"isChecked\" class=\"form-control\"  />\r\n     <small class=\"form-text text-danger\" *ngIf=\"userInfoFormGroup.controls.isChecked.errors\">{{userInfoFormGroup.controls.isChecked.errors.requiredTrue.message}}<br/></small>\t\r\n    </div>\r\n    <button [disabled]=\"!userInfoFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n",
        "model": "import {  requiredTrue, } from   \"@rxweb/reactive-form-validators\"   \r\n\r\nexport class UserInfo {\r\n\r\n\t@requiredTrue() \r\n\tisChecked: boolean;\r\n\t\r\n\t\r\n}\r\n",
        "modelName": "user-info.model.ts",
        "json": {
            "user-info-data.json": "{\"isChecked\":true}"
        }
    }
}