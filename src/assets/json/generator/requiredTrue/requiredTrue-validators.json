{
    "complete": {
        "notes": [],
        "component": "import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup, FormBuilder } from \"@angular/forms\"\r\nimport { RxwebValidators } from '@rxweb/reactive-form-validators';\r\n\r\n@Component({\r\n    selector: 'app-requiredTrue-complete-validator',\r\n    templateUrl: './required-true-complete.component.html'\r\n})\r\nexport class RequiredTrueCompleteValidatorComponent implements OnInit {\r\n    userFormGroup: FormGroup\r\n\r\n\tconstructor(\r\n        private formBuilder: FormBuilder )\r\n\t{ }\r\n\r\n    ngOnInit() {\r\n        this.userFormGroup = this.formBuilder.group({\r\n            isAgree:['', RxwebValidators.requiredTrue()], \r\n            isChecked:['', RxwebValidators.requiredTrue({conditionalExpression:(x,y) => x.isAgree == true })], \r\n            checkMeOut:['', RxwebValidators.requiredTrue({conditionalExpression:'x => x.isAgree == true' })], \r\n            isActive:['', RxwebValidators.requiredTrue({message:'Should be active' })], \r\n            isBlocked:['', RxwebValidators.requiredTrue({messageKey:'requiredTrueMessageKey' })], \r\n        });\r\n    }\r\n}\r\n",
        "html": "<div>\r\n  <form  [formGroup]=\"userFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label>Agree to terms and conditions</label>\r\n      <input type=\"checkbox\" formControlName=\"isAgree\"  />\r\n     <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.isAgree.errors\">{{userFormGroup.controls.isAgree.errors.requiredTrue.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Is Checked</label>\r\n      <input type=\"checkbox\" formControlName=\"isChecked\"  />\r\n      <small class=\"form-text text-muted\">Conditional validation will be applied if the isAgree checkbox is  true<br/></small>\r\n      <small class=\"form-text text-muted\">Conditional Expression with type 'function'<br/></small>\r\n     <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.isChecked.errors\">{{userFormGroup.controls.isChecked.errors.requiredTrue.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>CheckMeOut</label>\r\n      <input type=\"checkbox\" formControlName=\"checkMeOut\"  />\r\n      <small class=\"form-text text-muted\">Conditional validation will be applied if the isAgree checkbox is  true<br/></small>\r\n      <small class=\"form-text text-muted\">Conditional Expression with type 'string'<br/></small>\r\n     <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.checkMeOut.errors\">{{userFormGroup.controls.checkMeOut.errors.requiredTrue.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>IsActive</label>\r\n      <input type=\"checkbox\" formControlName=\"isActive\"  />\r\n      <small class=\"form-text text-muted\">Shows Custom Validation Message.<br/></small>\r\n     <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.isActive.errors\">{{userFormGroup.controls.isActive.errors.requiredTrue.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>IsBlocked</label>\r\n      <input type=\"checkbox\" formControlName=\"isBlocked\"  />\r\n      <small class=\"form-text text-muted\">Shows Custom Validation Message based on message key<br/></small>\r\n     <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.isBlocked.errors\">{{userFormGroup.controls.isBlocked.errors.requiredTrueMessageKey.message}}<br/></small>\t\t\r\n    </div>\r\n    <button [disabled]=\"!userFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n",
        "model": null,
        "modelName": null,
        "json": {}
    },
    "conditionalExpressionExampleFunction": {
        "notes": null,
        "component": null,
        "html": null,
        "model": "RxwebValidators.requiredTrue({conditionalExpression:(x,y) => x.isAgree == true });\r\n",
        "modelName": null,
        "json": {}
    },
    "conditionalExpression": {
        "notes": [],
        "component": "import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup, FormBuilder } from \"@angular/forms\"\r\nimport { RxwebValidators } from '@rxweb/reactive-form-validators';\r\n\r\n@Component({\r\n    selector: 'app-requiredTrue-conditionalExpression-validator',\r\n    templateUrl: './required-true-conditional-expression.component.html'\r\n})\r\nexport class RequiredTrueConditionalExpressionValidatorComponent implements OnInit {\r\n    userFormGroup: FormGroup\r\n\r\n\tconstructor(\r\n        private formBuilder: FormBuilder )\r\n\t{ }\r\n\r\n    ngOnInit() {\r\n        this.userFormGroup = this.formBuilder.group({\r\n            isAgree:['', RxwebValidators.requiredTrue()], \r\n            checkMeOut:['', RxwebValidators.requiredTrue({conditionalExpression:'x => x.isAgree == true' })], \r\n            isChecked:['', RxwebValidators.requiredTrue({conditionalExpression:(x,y) => x.isAgree == true })], \r\n        });\r\n    }\r\n}\r\n",
        "html": "<div>\r\n  <form  [formGroup]=\"userFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label>Agree to terms and conditions</label>\r\n      <input type=\"checkbox\" formControlName=\"isAgree\"  />\r\n     <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.isAgree.errors\">{{userFormGroup.controls.isAgree.errors.requiredTrue.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>CheckMeOut</label>\r\n      <input type=\"checkbox\" formControlName=\"checkMeOut\"  />\r\n      <small class=\"form-text text-muted\">Conditional validation will be applied if the isAgree checkbox is  true<br/></small>\r\n      <small class=\"form-text text-muted\">Conditional Expression with type 'string'<br/></small>\r\n     <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.checkMeOut.errors\">{{userFormGroup.controls.checkMeOut.errors.requiredTrue.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Is Checked</label>\r\n      <input type=\"checkbox\" formControlName=\"isChecked\"  />\r\n      <small class=\"form-text text-muted\">Conditional validation will be applied if the isAgree checkbox is  true<br/></small>\r\n      <small class=\"form-text text-muted\">Conditional Expression with type 'function'<br/></small>\r\n     <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.isChecked.errors\">{{userFormGroup.controls.isChecked.errors.requiredTrue.message}}<br/></small>\t\r\n    </div>\r\n    <button [disabled]=\"!userFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n",
        "model": null,
        "modelName": null,
        "json": {}
    },
    "conditionalExpressionExampleString": {
        "notes": null,
        "component": null,
        "html": null,
        "model": "RxwebValidators.requiredTrue({conditionalExpression:'x => x.isAgree == true' });\r\n",
        "modelName": null,
        "json": {}
    },
    "messageExample": {
        "notes": null,
        "component": null,
        "html": null,
        "model": "RxwebValidators.requiredTrue({message:'Should be active' });\r\n",
        "modelName": null,
        "json": {}
    },
    "message": {
        "notes": [],
        "component": "import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup, FormBuilder } from \"@angular/forms\"\r\nimport { RxwebValidators } from '@rxweb/reactive-form-validators';\r\n\r\n@Component({\r\n    selector: 'app-requiredTrue-message-validator',\r\n    templateUrl: './required-true-message.component.html'\r\n})\r\nexport class RequiredTrueMessageValidatorComponent implements OnInit {\r\n    userFormGroup: FormGroup\r\n\r\n\tconstructor(\r\n        private formBuilder: FormBuilder )\r\n\t{ }\r\n\r\n    ngOnInit() {\r\n        this.userFormGroup = this.formBuilder.group({\r\n            isActive:['', RxwebValidators.requiredTrue({message:'Should be active' })], \r\n        });\r\n    }\r\n}\r\n",
        "html": "<div>\r\n  <form  [formGroup]=\"userFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label>IsActive</label>\r\n      <input type=\"checkbox\" formControlName=\"isActive\"  />\r\n      <small class=\"form-text text-muted\">Shows Custom Validation Message.<br/></small>\r\n     <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.isActive.errors\">{{userFormGroup.controls.isActive.errors.requiredTrue.message}}<br/></small>\t\r\n    </div>\r\n    <button [disabled]=\"!userFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n",
        "model": null,
        "modelName": null,
        "json": {}
    },
    "messageKeyExample": {
        "notes": null,
        "component": null,
        "html": null,
        "model": "RxwebValidators.requiredTrue({messageKey:'requiredTrueMessageKey' });\r\n",
        "modelName": null,
        "json": {}
    },
    "messageKey": {
        "notes": [],
        "component": "import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup, FormBuilder } from \"@angular/forms\"\r\nimport { RxwebValidators } from '@rxweb/reactive-form-validators';\r\n\r\n@Component({\r\n    selector: 'app-requiredTrue-messageKey-validator',\r\n    templateUrl: './required-true-message-key.component.html'\r\n})\r\nexport class RequiredTrueMessageKeyValidatorComponent implements OnInit {\r\n    userFormGroup: FormGroup\r\n\r\n\tconstructor(\r\n        private formBuilder: FormBuilder )\r\n\t{ }\r\n\r\n    ngOnInit() {\r\n        this.userFormGroup = this.formBuilder.group({\r\n            isBlocked:['', RxwebValidators.requiredTrue({messageKey:'requiredTrueMessageKey' })], \r\n        });\r\n    }\r\n}\r\n",
        "html": "<div>\r\n  <form  [formGroup]=\"userFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label>IsBlocked</label>\r\n      <input type=\"checkbox\" formControlName=\"isBlocked\"  />\r\n      <small class=\"form-text text-muted\">Shows Custom Validation Message based on message key<br/></small>\r\n     <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.isBlocked.errors\">{{userFormGroup.controls.isBlocked.errors.requiredTrueMessageKey.message}}<br/></small>\t\t\r\n    </div>\r\n    <button [disabled]=\"!userFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n",
        "model": null,
        "modelName": null,
        "json": {}
    },
    "dynamic": {
        "notes": [],
        "component": "import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup, FormBuilder } from \"@angular/forms\"\r\nimport { RxwebValidators } from '@rxweb/reactive-form-validators';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { FormBuilderConfiguration,RxFormBuilder} from '@rxweb/reactive-form-validators';\r\nimport { environment } from 'src/environments/environment';\r\n\r\n@Component({\r\n    selector: 'app-requiredTrue-dynamic-validator',\r\n    templateUrl: './required-true-dynamic.component.html'\r\n})\r\nexport class RequiredTrueDynamicValidatorComponent implements OnInit {\r\n    userFormGroup: FormGroup\r\n\r\n\tconstructor(\r\n        private formBuilder: RxFormBuilder , private http: HttpClient )\r\n\t{ }\r\n\r\n    ngOnInit() {\r\n\t\tlet formBuilderConfiguration = new FormBuilderConfiguration();\r\n\t\tthis.http.get('assets/examples/reactive-form-validators/validators/requiredTrue/dynamic/dynamic.json?v='+environment.appVersion).subscribe(dynamic => {\r\n\t\t\tformBuilderConfiguration.dynamicValidation = JSON.parse(JSON.stringify(dynamic));\r\n\t\t\tvar user = { isAgree:'', isChecked:'', checkMeOut:'', isActive:'', isBlocked:'',  }\r\n\t\t\tthis.userFormGroup = this.formBuilder.group(user,formBuilderConfiguration);\r\n\t\t})\r\n    }\r\n}\r\n",
        "html": "<div>\r\n  <form  *ngIf=\"userFormGroup\"  [formGroup]=\"userFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label>Agree to terms and conditions</label>\r\n      <input type=\"checkbox\" formControlName=\"isAgree\"  />\r\n      <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.isAgree.errors\">{{userFormGroup.controls.isAgree.errors.requiredTrue.message}}<br/></small>\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>CheckMeOut</label>\r\n      <input type=\"checkbox\" formControlName=\"checkMeOut\"  />\r\n      <small class=\"form-text text-muted\">Conditional validation will be applied if the isAgree checkbox is  true<br/></small>\r\n      <small class=\"form-text text-muted\">Conditional Expression with type 'string'<br/></small>\r\n     <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.checkMeOut.errors\">{{userFormGroup.controls.checkMeOut.errors.requiredTrue.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>IsActive</label>\r\n      <input type=\"checkbox\" formControlName=\"isActive\"  />\r\n      <small class=\"form-text text-muted\">Shows Custom Validation Message.<br/></small>\r\n     <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.isActive.errors\">{{userFormGroup.controls.isActive.errors.requiredTrue.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>IsBlocked</label>\r\n      <input type=\"checkbox\" formControlName=\"isBlocked\"  />\r\n      <small class=\"form-text text-muted\">Shows Custom Validation Message based on message key<br/></small>\r\n     <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.isBlocked.errors\">{{userFormGroup.controls.isBlocked.errors.requiredTrueMessageKey.message}}<br/></small>\t\t\r\n    </div>\r\n    <button [disabled]=\"!userFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n",
        "model": null,
        "modelName": null,
        "json": {
            "dynamic.json": "{\"isAgree\":{\"requiredTrue\":true},\"checkMeOut\":{\"requiredTrue\":{\"conditionalExpression\":\"x => x.isAgree == true\"}},\"isActive\":{\"requiredTrue\":{\"message\":\"Should be active\"}},\"isBlocked\":{\"requiredTrue\":{\"messageKey\":\"requiredTrueMessageKey\"}}}"
        }
    },
    "add": {
        "notes": [],
        "component": "import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup, FormBuilder } from \"@angular/forms\"\r\nimport { RxwebValidators } from '@rxweb/reactive-form-validators';\r\n\r\n@Component({\r\n    selector: 'app-requiredTrue-add-validator',\r\n    templateUrl: './required-true-add.component.html'\r\n})\r\nexport class RequiredTrueAddValidatorComponent implements OnInit {\r\n    userInfoFormGroup: FormGroup\r\n\r\n\tconstructor(\r\n        private formBuilder: FormBuilder )\r\n\t{ }\r\n\r\n    ngOnInit() {\r\n        this.userInfoFormGroup = this.formBuilder.group({\r\n            ischecked:['', RxwebValidators.requiredTrue()], \r\n        });\r\n    }\r\n}\r\n",
        "html": "<div>\r\n  <form  [formGroup]=\"userInfoFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label>Is Checked</label>\r\n      <input type=\"checkbox\" formControlName=\"ischecked\"   />\r\n     <small class=\"form-text text-danger\" *ngIf=\"userInfoFormGroup.controls.ischecked.errors\">{{userInfoFormGroup.controls.ischecked.errors.requiredTrue.message}}<br/></small>\t\r\n    </div>\r\n    <button [disabled]=\"!userInfoFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n",
        "model": null,
        "modelName": null,
        "json": {}
    }
}