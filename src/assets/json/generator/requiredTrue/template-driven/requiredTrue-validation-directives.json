{"complete":{"notes":[],"component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup,Validators } from \"@angular/forms\"\r\nimport { User } from './user.model';\r\n\r\n@Component({\r\n    selector: 'app-requiredTrue-complete-template-driven-validation-directives',\r\n    templateUrl: './required-true-complete.component.html'\r\n})\r\nexport class RequiredTrueCompleteTemplateDrivenValidationDirectivesComponent implements OnInit {\r\n    user: User\r\n\t\r\n    constructor(\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n       this.user= new User()\r\n    }\r\n}\r\n","html":"<div>\r\n  <form #userForm = \"ngForm\" [rxwebForm]=\"userForm\" [model]=\"user\">\r\n    <div class=\"form-group\">\r\n      <label>Agree to terms and conditions</label>\r\n\r\n\t   <small class=\"form-text text-danger\" *ngIf=\"userForm.controls?.isAgree?.errors\">{{userForm.controls?.isAgree?.errors?.requiredTrue.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>CheckMeOut</label>\r\n\r\n      <small class=\"form-text text-muted\">Conditional validation will be applied if the isAgree checkbox is  true<br/></small>\r\n      <small class=\"form-text text-muted\">Conditional Expression with type 'string'<br/></small>\r\n\t   <small class=\"form-text text-danger\" *ngIf=\"userForm.controls?.checkMeOut?.errors\">{{userForm.controls?.checkMeOut?.errors?.requiredTrue.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>IsActive</label>\r\n\r\n      <small class=\"form-text text-muted\">Shows Custom Validation Message.<br/></small>\r\n\t   <small class=\"form-text text-danger\" *ngIf=\"userForm.controls?.isActive?.errors\">{{userForm.controls?.isActive?.errors?.requiredTrue.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>IsBlocked</label>\r\n\r\n      <small class=\"form-text text-muted\">Shows Custom Validation Message based on message key<br/></small>\r\n\t   <small class=\"form-text text-danger\" *ngIf=\"userForm.controls?.isBlocked?.errors\">{{userForm.controls?.isBlocked?.errors?.requiredTrue.message}}<br/></small>\t\r\n    </div>\r\n    <button [disabled]=\"!userForm.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","model":"\r\nexport class User {\r\n\r\n\tisAgree: boolean;\r\n\t\r\n\t\r\n\tisChecked: boolean;\r\n\t\r\n\t\r\n\tcheckMeOut: boolean;\r\n\t\r\n\t\r\n\tisActive: string;\r\n\t\r\n\t\r\n\tisBlocked: string;\r\n\t\r\n\t\r\n}\r\n","modelName":"user.model.ts","json":{}},"conditionalExpressionExampleFunction":{"notes":null,"component":null,"html":null,"model":"[requiredTrue]=\"{'conditionalExpression':(x,y) => x.isAgree == true}\"","modelName":null,"json":{}},"conditionalExpression":{"notes":[],"component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup,Validators } from \"@angular/forms\"\r\nimport { User } from './user.model';\r\n\r\n@Component({\r\n    selector: 'app-requiredTrue-conditionalExpression-template-driven-validation-directives',\r\n    templateUrl: './required-true-conditional-expression.component.html'\r\n})\r\nexport class RequiredTrueConditionalExpressionTemplateDrivenValidationDirectivesComponent implements OnInit {\r\n    user: User\r\n\t\r\n    constructor(\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n       this.user= new User()\r\n    }\r\n}\r\n","html":"<div>\r\n  <form #userForm = \"ngForm\" [rxwebForm]=\"userForm\" [model]=\"user\">\r\n    <div class=\"form-group\">\r\n      <label>Agree to terms and conditions</label>\r\n\r\n\t   <small class=\"form-text text-danger\" *ngIf=\"userForm.controls?.isAgree?.errors\">{{userForm.controls?.isAgree?.errors?.requiredTrue.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>CheckMeOut</label>\r\n\r\n      <small class=\"form-text text-muted\">Conditional validation will be applied if the isAgree checkbox is  true<br/></small>\r\n      <small class=\"form-text text-muted\">Conditional Expression with type 'string'<br/></small>\r\n\t   <small class=\"form-text text-danger\" *ngIf=\"userForm.controls?.checkMeOut?.errors\">{{userForm.controls?.checkMeOut?.errors?.requiredTrue.message}}<br/></small>\t\r\n    </div>\r\n    <button [disabled]=\"!userForm.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","model":"\r\nexport class User {\r\n\r\n\tisAgree: boolean;\r\n\t\r\n\t\r\n\tcheckMeOut: boolean;\r\n\t\r\n\t\r\n\tisChecked: boolean;\r\n\t\r\n\t\r\n}\r\n","modelName":"user.model.ts","json":{}},"conditionalExpressionExampleString":{"notes":null,"component":null,"html":null,"model":"[requiredTrue]=\"{'conditionalExpression':'x => x.isAgree == true}\"","modelName":null,"json":{}},"messageExample":{"notes":null,"component":null,"html":null,"model":"[requiredTrue]=\"{'message':Should be active}\"","modelName":null,"json":{}},"message":{"notes":[],"component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup,Validators } from \"@angular/forms\"\r\nimport { User } from './user.model';\r\n\r\n@Component({\r\n    selector: 'app-requiredTrue-message-template-driven-validation-directives',\r\n    templateUrl: './required-true-message.component.html'\r\n})\r\nexport class RequiredTrueMessageTemplateDrivenValidationDirectivesComponent implements OnInit {\r\n    user: User\r\n\t\r\n    constructor(\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n       this.user= new User()\r\n    }\r\n}\r\n","html":"<div>\r\n  <form #userForm = \"ngForm\" [rxwebForm]=\"userForm\" [model]=\"user\">\r\n    <div class=\"form-group\">\r\n      <label>IsActive</label>\r\n\r\n      <small class=\"form-text text-muted\">Shows Custom Validation Message.<br/></small>\r\n\t   <small class=\"form-text text-danger\" *ngIf=\"userForm.controls?.isActive?.errors\">{{userForm.controls?.isActive?.errors?.requiredTrue.message}}<br/></small>\t\r\n    </div>\r\n    <button [disabled]=\"!userForm.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","model":"\r\nexport class User {\r\n\r\n\tisActive: string;\r\n\t\r\n\t\r\n}\r\n","modelName":"user.model.ts","json":{}},"messageKeyExample":{"notes":null,"component":null,"html":null,"model":"[requiredTrue]=\"{'messageKey':'requiredTrueMessageKey'}\"","modelName":null,"json":{}},"messageKey":{"notes":[],"component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup,Validators } from \"@angular/forms\"\r\nimport { User } from './user.model';\r\n\r\n@Component({\r\n    selector: 'app-requiredTrue-messageKey-template-driven-validation-directives',\r\n    templateUrl: './required-true-message-key.component.html'\r\n})\r\nexport class RequiredTrueMessageKeyTemplateDrivenValidationDirectivesComponent implements OnInit {\r\n    user: User\r\n\t\r\n    constructor(\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n       this.user= new User()\r\n    }\r\n}\r\n","html":"<div>\r\n  <form #userForm = \"ngForm\" [rxwebForm]=\"userForm\" [model]=\"user\">\r\n    <div class=\"form-group\">\r\n      <label>IsBlocked</label>\r\n\r\n      <small class=\"form-text text-muted\">Shows Custom Validation Message based on message key<br/></small>\r\n\t   <small class=\"form-text text-danger\" *ngIf=\"userForm.controls?.isBlocked?.errors\">{{userForm.controls?.isBlocked?.errors?.requiredTrue.message}}<br/></small>\t\r\n    </div>\r\n    <button [disabled]=\"!userForm.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","model":"\r\nexport class User {\r\n\r\n\tisBlocked: string;\r\n\t\r\n\t\r\n}\r\n","modelName":"user.model.ts","json":{}},"add":{"notes":[],"component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup,Validators } from \"@angular/forms\"\r\nimport { UserInfo } from './user-info.model';\r\n\r\n@Component({\r\n    selector: 'app-requiredTrue-add-template-driven-validation-directives',\r\n    templateUrl: './required-true-add.component.html'\r\n})\r\nexport class RequiredTrueAddTemplateDrivenValidationDirectivesComponent implements OnInit {\r\n    userinfo: UserInfo\r\n\t\r\n    constructor(\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n       this.userinfo= new UserInfo()\r\n    }\r\n}\r\n","html":"<div>\r\n  <form #userinfoForm = \"ngForm\" [rxwebForm]=\"userinfoForm\" [model]=\"userinfo\">\r\n    <div class=\"form-group\">\r\n      <label>Is Checked</label>\r\n\t    <input type=\"text\" name=\"ischecked\" [(ngModel)]=\"userinfo.ischecked\"  class=\"form-control\" rxrequiredTrue/>\r\n\r\n\t   <small class=\"form-text text-danger\" *ngIf=\"userinfoForm.controls?.ischecked?.errors\">{{userinfoForm.controls?.ischecked?.errors?.requiredTrue.message}}<br/></small>\t\r\n    </div>\r\n    <button [disabled]=\"!userinfoForm.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","model":"\r\nexport class UserInfo {\r\n\r\n\tischecked: boolean;\r\n\t\r\n\t\r\n}\r\n","modelName":"user-info.model.ts","json":{}}}