{
    "complete": {
        "notes": [],
        "component": "import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup, FormBuilder } from \"@angular/forms\"\r\nimport { RxwebValidators } from '@rxweb/reactive-form-validators';\r\n\r\n@Component({\r\n    selector: 'app-minTime-complete-validator',\r\n    templateUrl: './min-time-complete.component.html'\r\n})\r\nexport class MinTimeCompleteValidatorComponent implements OnInit {\r\n    attandanceDetailFormGroup: FormGroup\r\n\r\n\tconstructor(\r\n        private formBuilder: FormBuilder )\r\n\t{ }\r\n\r\n    ngOnInit() {\r\n        this.attandanceDetailFormGroup = this.formBuilder.group({\r\n            entryPlace:['',], \r\n            openingTime:['', RxwebValidators.minTime({value:'08:00' })], \r\n            requiredHours:['', RxwebValidators.minTime({operator:'>'  ,value:'08:30' })], \r\n            totalInTime:['', RxwebValidators.minTime({conditionalExpression:(x,y) => x.entryPlace == \"Main Entry Gate\"   ,fieldName:'netInTime' })], \r\n            entryTime:['', RxwebValidators.minTime({conditionalExpression:'x => x.entryPlace == \"Main Entry Gate\"'  ,fieldName:'openingTime' })], \r\n            totalOutTime:['', RxwebValidators.minTime({allowSeconds:true  ,value:'00:10:00' })], \r\n            exitTime:['', RxwebValidators.minTime({message:'You can enter only time format data greater than config value'  ,value:'07:00' })], \r\n            netInTime:['',RxwebValidators.minTime({value:'08:30', messageKey: 'minTimeMessageKey'})], \r\n        });\r\n    }\r\n}",
        "html": "<div>\r\n  <form  [formGroup]=\"attandanceDetailFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label>Entry Place</label>\r\n      <input type=\"text\" formControlName=\"entryPlace\" class=\"form-control\"  />\r\n     <small class=\"form-text text-danger\" *ngIf=\"attandanceDetailFormGroup.controls.entryPlace.errors\">{{attandanceDetailFormGroup.controls.entryPlace.errors.minTime.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Opening Time</label>\r\n      <input type=\"text\" formControlName=\"openingTime\" class=\"form-control\"  />\r\n     <small class=\"form-text text-danger\" *ngIf=\"attandanceDetailFormGroup.controls.openingTime.errors\">{{attandanceDetailFormGroup.controls.openingTime.errors.minTime.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Required Hours</label>\r\n      <input type=\"text\" formControlName=\"requiredHours\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">Value should be greater than 8:30<br/></small>\r\n     <small class=\"form-text text-danger\" *ngIf=\"attandanceDetailFormGroup.controls.requiredHours.errors\">{{attandanceDetailFormGroup.controls.requiredHours.errors.minTime.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Total In Time</label>\r\n      <input type=\"text\" formControlName=\"totalInTime\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">To apply the validation of minTime on 'Total In Time' field, then enter the value of 'Main Entry Gate' in Entry Place textbox.<br/></small>\r\n      <small class=\"form-text text-muted\">Conditional Expression with type 'function'<br/></small>\r\n     <small class=\"form-text text-danger\" *ngIf=\"attandanceDetailFormGroup.controls.totalInTime.errors\">{{attandanceDetailFormGroup.controls.totalInTime.errors.minTime.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Entry Time</label>\r\n      <input type=\"text\" formControlName=\"entryTime\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">To apply the validation of minTime on 'Entry Time' field, then enter the value of 'Main Entry Gate' in Entry Place textbox.<br/></small>\r\n      <small class=\"form-text text-muted\">Conditional Expression with type 'string'<br/></small>\r\n     <small class=\"form-text text-danger\" *ngIf=\"attandanceDetailFormGroup.controls.entryTime.errors\">{{attandanceDetailFormGroup.controls.entryTime.errors.minTime.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Total Time Out</label>\r\n      <input type=\"text\" formControlName=\"totalOutTime\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">This field allow seconds in input time.<br/></small>\r\n     <small class=\"form-text text-danger\" *ngIf=\"attandanceDetailFormGroup.controls.totalOutTime.errors\">{{attandanceDetailFormGroup.controls.totalOutTime.errors.minTime.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Exit Time</label>\r\n      <input type=\"text\" formControlName=\"exitTime\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">Shows Custom Validation Message.<br/></small>\r\n     <small class=\"form-text text-danger\" *ngIf=\"attandanceDetailFormGroup.controls.exitTime.errors\">{{attandanceDetailFormGroup.controls.exitTime.errors.minTime.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Net-In Time</label>\r\n      <input type=\"text\" formControlName=\"netInTime\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">Shows Custom Validation Message using message key<br/></small>\r\n     <small class=\"form-text text-danger\" *ngIf=\"attandanceDetailFormGroup.controls.netInTime.errors\">{{attandanceDetailFormGroup.controls.netInTime.errors.minTime.message}}<br/></small>\t\t\r\n    </div>\r\n    <button [disabled]=\"!attandanceDetailFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n",
        "model": null,
        "modelName": null,
        "json": {}
    },
    "valueExample": {
        "notes": null,
        "component": null,
        "html": null,
        "model": "RxwebValidators.minTime({value:'08:00' });\r\n",
        "modelName": null,
        "json": {}
    },
    "value": {
        "notes": [],
        "component": "import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup, FormBuilder } from \"@angular/forms\"\r\nimport { RxwebValidators } from '@rxweb/reactive-form-validators';\r\n\r\n@Component({\r\n    selector: 'app-minTime-value-validator',\r\n    templateUrl: './min-time-value.component.html'\r\n})\r\nexport class MinTimeValueValidatorComponent implements OnInit {\r\n    attandanceDetailFormGroup: FormGroup\r\n\r\n\tconstructor(\r\n        private formBuilder: FormBuilder )\r\n\t{ }\r\n\r\n    ngOnInit() {\r\n        this.attandanceDetailFormGroup = this.formBuilder.group({\r\n            openingTime:['', RxwebValidators.minTime({value:'08:00' })], \r\n        });\r\n    }\r\n}\r\n",
        "html": "<div>\r\n  <form  [formGroup]=\"attandanceDetailFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label>Opening Time</label>\r\n      <input type=\"text\" formControlName=\"openingTime\" class=\"form-control\"  />\r\n     <small class=\"form-text text-danger\" *ngIf=\"attandanceDetailFormGroup.controls.openingTime.errors\">{{attandanceDetailFormGroup.controls.openingTime.errors.minTime.message}}<br/></small>\t\r\n    </div>\r\n    <button [disabled]=\"!attandanceDetailFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n",
        "model": null,
        "modelName": null,
        "json": {}
    },
    "operatorExample": {
        "notes": null,
        "component": null,
        "html": null,
        "model": "RxwebValidators.minTime({operator:'>'  ,value:'08:30' });\r\n",
        "modelName": null,
        "json": {}
    },
    "operator": {
        "notes": [],
        "component": "import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup, FormBuilder } from \"@angular/forms\"\r\nimport { RxwebValidators } from '@rxweb/reactive-form-validators';\r\n\r\n@Component({\r\n    selector: 'app-minTime-operator-validator',\r\n    templateUrl: './min-time-operator.component.html'\r\n})\r\nexport class MinTimeOperatorValidatorComponent implements OnInit {\r\n    attandanceDetailFormGroup: FormGroup\r\n\r\n\tconstructor(\r\n        private formBuilder: FormBuilder )\r\n\t{ }\r\n\r\n    ngOnInit() {\r\n        this.attandanceDetailFormGroup = this.formBuilder.group({\r\n            requiredHours:['', RxwebValidators.minTime({operator:'>'  ,value:'08:30' })], \r\n        });\r\n    }\r\n}\r\n",
        "html": "<div>\r\n  <form  [formGroup]=\"attandanceDetailFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label>Required Hours</label>\r\n      <input type=\"text\" formControlName=\"requiredHours\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">Value should be greater than 8:30<br/></small>\r\n     <small class=\"form-text text-danger\" *ngIf=\"attandanceDetailFormGroup.controls.requiredHours.errors\">{{attandanceDetailFormGroup.controls.requiredHours.errors.minTime.message}}<br/></small>\t\r\n    </div>\r\n    <button [disabled]=\"!attandanceDetailFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n",
        "model": null,
        "modelName": null,
        "json": {}
    },
    "conditionalExpressionExampleFunction": {
        "notes": null,
        "component": null,
        "html": null,
        "model": "RxwebValidators.minTime({conditionalExpression:(x,y) => x.entryPlace == \"Main Entry Gate\"   ,fieldName:'netInTime' });\r\n",
        "modelName": null,
        "json": {}
    },
    "conditionalExpression": {
        "notes": [],
        "component": "import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup, FormBuilder } from \"@angular/forms\"\r\nimport { RxwebValidators } from '@rxweb/reactive-form-validators';\r\n\r\n@Component({\r\n    selector: 'app-minTime-conditionalExpression-validator',\r\n    templateUrl: './min-time-conditional-expression.component.html'\r\n})\r\nexport class MinTimeConditionalExpressionValidatorComponent implements OnInit {\r\n    attandanceDetailFormGroup: FormGroup\r\n\r\n\tconstructor(\r\n        private formBuilder: FormBuilder )\r\n\t{ }\r\n\r\n    ngOnInit() {\r\n        this.attandanceDetailFormGroup = this.formBuilder.group({\r\n            entryPlace:['',], \r\n            entryTime:['', RxwebValidators.minTime({conditionalExpression:'x => x.entryPlace == \"Main Entry Gate\"'  ,fieldName:'openingTime' })], \r\n            totalInTime:['', RxwebValidators.minTime({conditionalExpression:(x,y) => x.entryPlace == \"Main Entry Gate\"   ,fieldName:'netInTime' })], \r\n        });\r\n    }\r\n}\r\n",
        "html": "<div>\r\n  <form  [formGroup]=\"attandanceDetailFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label>Entry Place</label>\r\n      <input type=\"text\" formControlName=\"entryPlace\" class=\"form-control\"  />\r\n     <small class=\"form-text text-danger\" *ngIf=\"attandanceDetailFormGroup.controls.entryPlace.errors\">{{attandanceDetailFormGroup.controls.entryPlace.errors.minTime.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Entry Time</label>\r\n      <input type=\"text\" formControlName=\"entryTime\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">To apply the validation of minTime on 'Entry Time' field, then enter the value of 'Main Entry Gate' in Entry Place textbox.<br/></small>\r\n      <small class=\"form-text text-muted\">Conditional Expression with type 'string'<br/></small>\r\n     <small class=\"form-text text-danger\" *ngIf=\"attandanceDetailFormGroup.controls.entryTime.errors\">{{attandanceDetailFormGroup.controls.entryTime.errors.minTime.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Total In Time</label>\r\n      <input type=\"text\" formControlName=\"totalInTime\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">To apply the validation of minTime on 'Total In Time' field, then enter the value of 'Main Entry Gate' in Entry Place textbox.<br/></small>\r\n      <small class=\"form-text text-muted\">Conditional Expression with type 'function'<br/></small>\r\n     <small class=\"form-text text-danger\" *ngIf=\"attandanceDetailFormGroup.controls.totalInTime.errors\">{{attandanceDetailFormGroup.controls.totalInTime.errors.minTime.message}}<br/></small>\t\r\n    </div>\r\n    <button [disabled]=\"!attandanceDetailFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n",
        "model": null,
        "modelName": null,
        "json": {}
    },
    "fieldNameExampleFunction": {
        "notes": null,
        "component": null,
        "html": null,
        "model": "RxwebValidators.minTime({conditionalExpression:(x,y) => x.entryPlace == \"Main Entry Gate\"   ,fieldName:'netInTime' });\r\n",
        "modelName": null,
        "json": {}
    },
    "fieldName": {
        "notes": [],
        "component": "import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup, FormBuilder } from \"@angular/forms\"\r\nimport { RxwebValidators } from '@rxweb/reactive-form-validators';\r\n\r\n@Component({\r\n    selector: 'app-minTime-fieldName-validator',\r\n    templateUrl: './min-time-field-name.component.html'\r\n})\r\nexport class MinTimeFieldNameValidatorComponent implements OnInit {\r\n    attandanceDetailFormGroup: FormGroup\r\n\r\n\tconstructor(\r\n        private formBuilder: FormBuilder )\r\n\t{ }\r\n\r\n    ngOnInit() {\r\n        this.attandanceDetailFormGroup = this.formBuilder.group({\r\n            netInTime:['',], \r\n            entryTime:['', RxwebValidators.minTime({conditionalExpression:'x => x.entryPlace == \"Main Entry Gate\"'  ,fieldName:'openingTime' })], \r\n            totalInTime:['', RxwebValidators.minTime({conditionalExpression:(x,y) => x.entryPlace == \"Main Entry Gate\"   ,fieldName:'netInTime' })], \r\n        });\r\n    }\r\n}\r\n",
        "html": "<div>\r\n  <form  [formGroup]=\"attandanceDetailFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label>Net-In Time</label>\r\n      <input type=\"text\" formControlName=\"netInTime\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">Shows Custom Validation Message using message key<br/></small>\r\n     <small class=\"form-text text-danger\" *ngIf=\"attandanceDetailFormGroup.controls.netInTime.errors\">{{attandanceDetailFormGroup.controls.netInTime.errors.minTime.message}}<br/></small>\t\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Entry Time</label>\r\n      <input type=\"text\" formControlName=\"entryTime\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">To apply the validation of minTime on 'Entry Time' field, then enter the value of 'Main Entry Gate' in Entry Place textbox.<br/></small>\r\n      <small class=\"form-text text-muted\">Conditional Expression with type 'string'<br/></small>\r\n     <small class=\"form-text text-danger\" *ngIf=\"attandanceDetailFormGroup.controls.entryTime.errors\">{{attandanceDetailFormGroup.controls.entryTime.errors.minTime.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Total In Time</label>\r\n      <input type=\"text\" formControlName=\"totalInTime\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">To apply the validation of minTime on 'Total In Time' field, then enter the value of 'Main Entry Gate' in Entry Place textbox.<br/></small>\r\n      <small class=\"form-text text-muted\">Conditional Expression with type 'function'<br/></small>\r\n     <small class=\"form-text text-danger\" *ngIf=\"attandanceDetailFormGroup.controls.totalInTime.errors\">{{attandanceDetailFormGroup.controls.totalInTime.errors.minTime.message}}<br/></small>\t\r\n    </div>\r\n    <button [disabled]=\"!attandanceDetailFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n",
        "model": null,
        "modelName": null,
        "json": {}
    },
    "conditionalExpressionExampleString": {
        "notes": null,
        "component": null,
        "html": null,
        "model": "RxwebValidators.minTime({conditionalExpression:'x => x.entryPlace == \"Main Entry Gate\"'  ,fieldName:'openingTime' });\r\n",
        "modelName": null,
        "json": {}
    },
    "fieldNameExampleString": {
        "notes": null,
        "component": null,
        "html": null,
        "model": "RxwebValidators.minTime({conditionalExpression:'x => x.entryPlace == \"Main Entry Gate\"'  ,fieldName:'openingTime' });\r\n",
        "modelName": null,
        "json": {}
    },
    "allowSecondsExample": {
        "notes": null,
        "component": null,
        "html": null,
        "model": "RxwebValidators.minTime({allowSeconds:true  ,value:'00:10:00' });\r\n",
        "modelName": null,
        "json": {}
    },
    "allowSeconds": {
        "notes": [],
        "component": "import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup, FormBuilder } from \"@angular/forms\"\r\nimport { RxwebValidators } from '@rxweb/reactive-form-validators';\r\n\r\n@Component({\r\n    selector: 'app-minTime-allowSeconds-validator',\r\n    templateUrl: './min-time-allow-seconds.component.html'\r\n})\r\nexport class MinTimeAllowSecondsValidatorComponent implements OnInit {\r\n    attandanceDetailFormGroup: FormGroup\r\n\r\n\tconstructor(\r\n        private formBuilder: FormBuilder )\r\n\t{ }\r\n\r\n    ngOnInit() {\r\n        this.attandanceDetailFormGroup = this.formBuilder.group({\r\n            totalOutTime:['', RxwebValidators.minTime({allowSeconds:true  ,value:'00:10:00' })], \r\n        });\r\n    }\r\n}\r\n",
        "html": "<div>\r\n  <form  [formGroup]=\"attandanceDetailFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label>Total Time Out</label>\r\n      <input type=\"text\" formControlName=\"totalOutTime\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">This field allow seconds in input time.<br/></small>\r\n     <small class=\"form-text text-danger\" *ngIf=\"attandanceDetailFormGroup.controls.totalOutTime.errors\">{{attandanceDetailFormGroup.controls.totalOutTime.errors.minTime.message}}<br/></small>\t\r\n    </div>\r\n    <button [disabled]=\"!attandanceDetailFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n",
        "model": null,
        "modelName": null,
        "json": {}
    },
    "messageExample": {
        "notes": null,
        "component": null,
        "html": null,
        "model": "RxwebValidators.minTime({message:'Please enter valid input greater than config value'  ,value:'07:00' });\r\n",
        "modelName": null,
        "json": {}
    },
    "message": {
        "notes": [],
        "component": "import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup, FormBuilder } from \"@angular/forms\"\r\nimport { RxwebValidators } from '@rxweb/reactive-form-validators';\r\n\r\n@Component({\r\n    selector: 'app-minTime-messageKey-validator',\r\n    templateUrl: './min-time-message-key.component.html'\r\n})\r\nexport class MinTimeMessageKeyValidatorComponent implements OnInit {\r\n    attandanceDetailFormGroup: FormGroup\r\n\r\n\tconstructor(\r\n        private formBuilder: FormBuilder )\r\n\t{ }\r\n\r\n    ngOnInit() {\r\n        this.attandanceDetailFormGroup = this.formBuilder.group({\r\n            netInTime:['',RxwebValidators.minTime({messageKey:'minTimeMessageKey'  ,value:'08:30' })], \r\n        });\r\n    }\r\n}",
        "html": "<div>\r\n  <form  [formGroup]=\"attandanceDetailFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label>Exit Time</label>\r\n      <input type=\"text\" formControlName=\"exitTime\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">Shows Custom Validation Message.<br/></small>\r\n     <small class=\"form-text text-danger\" *ngIf=\"attandanceDetailFormGroup.controls.exitTime.errors\">{{attandanceDetailFormGroup.controls.exitTime.errors.minTime.message}}<br/></small>\t\r\n    </div>\r\n    <button [disabled]=\"!attandanceDetailFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n",
        "model": null,
        "modelName": null,
        "json": {}
    },
    "messageKeyExample": {
        "notes": null,
        "component": null,
        "html": null,
        "model": "RxwebValidators.minTime({messageKey:'minTimeMessageKey'  ,value:'08:30' })",
        "modelName": null,
        "json": {}
    },
    "messageKey": {
        "notes": [],
        "component": "import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup, FormBuilder } from \"@angular/forms\"\r\nimport { RxwebValidators } from '@rxweb/reactive-form-validators';\r\n\r\n@Component({\r\n    selector: 'app-minTime-messageKey-validator',\r\n    templateUrl: './min-time-message-key.component.html'\r\n})\r\nexport class MinTimeMessageKeyValidatorComponent implements OnInit {\r\n    attandanceDetailFormGroup: FormGroup\r\n\r\n\tconstructor(\r\n        private formBuilder: FormBuilder )\r\n\t{ }\r\n\r\n    ngOnInit() {\r\n        this.attandanceDetailFormGroup = this.formBuilder.group({\r\n            netInTime:['',RxwebValidators.minTime({messageKey:'minTimeMessageKey'  ,value:'08:30' })], \r\n        });\r\n    }\r\n}",
        "html": "<div>\r\n  <form  [formGroup]=\"attandanceDetailFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label>Net-In Time</label>\r\n      <input type=\"text\" formControlName=\"netInTime\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">Shows Custom Validation Message using message key<br/></small>\r\n     <small class=\"form-text text-danger\" *ngIf=\"attandanceDetailFormGroup.controls.netInTime.errors\">{{attandanceDetailFormGroup.controls.netInTime.errors.minTime.message}}<br/></small>\t\t\r\n    </div>\r\n    <button [disabled]=\"!attandanceDetailFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>",
        "model": null,
        "modelName": null,
        "json": {}
    },
    "dynamic": {
        "notes": [],
        "component": "import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup, FormBuilder } from \"@angular/forms\"\r\nimport { RxwebValidators } from '@rxweb/reactive-form-validators';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { FormBuilderConfiguration,RxFormBuilder} from '@rxweb/reactive-form-validators';\r\nimport { environment } from 'src/environments/environment';\r\n\r\n@Component({\r\n    selector: 'app-minTime-dynamic-validator',\r\n    templateUrl: './min-time-dynamic.component.html'\r\n})\r\nexport class MinTimeDynamicValidatorComponent implements OnInit {\r\n    attandanceDetailFormGroup: FormGroup\r\n\r\n\tconstructor(\r\n        private formBuilder: RxFormBuilder , private http: HttpClient )\r\n\t{ }\r\n\r\n    ngOnInit() {\r\n\t\tlet formBuilderConfiguration = new FormBuilderConfiguration();\r\n\t\tthis.http.get('assets/examples/reactive-form-validators/validators/minTime/dynamic/dynamic.json?v='+environment.appVersion).subscribe(dynamic => {\r\n\t\t\tformBuilderConfiguration.dynamicValidation = JSON.parse(JSON.stringify(dynamic));\r\n\t\t\tvar attandanceDetail = { entryPlace:'', openingTime:'', requiredHours:'', totalInTime:'', entryTime:'', totalOutTime:'', exitTime:'', netInTime:'',  }\r\n\t\t\tthis.attandanceDetailFormGroup = this.formBuilder.group(attandanceDetail,formBuilderConfiguration);\r\n\t\t})\r\n    }\r\n}\r\n",
        "html": "<div>\r\n  <form  *ngIf=\"attandanceDetailFormGroup\"  [formGroup]=\"attandanceDetailFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label>Entry Place</label>\r\n      <input type=\"text\" formControlName=\"entryPlace\" class=\"form-control\"   />\r\n      <small class=\"form-text text-danger\" *ngIf=\"attandanceDetailFormGroup.controls.entryPlace.errors\">{{attandanceDetailFormGroup.controls.entryPlace.errors.minTime.message}}<br/></small>\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Opening Time</label>\r\n      <input type=\"text\" formControlName=\"openingTime\" class=\"form-control\"  />\r\n     <small class=\"form-text text-danger\" *ngIf=\"attandanceDetailFormGroup.controls.openingTime.errors\">{{attandanceDetailFormGroup.controls.openingTime.errors.minTime.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Required Hours</label>\r\n      <input type=\"text\" formControlName=\"requiredHours\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">Value should be greater than 8:30<br/></small>\r\n     <small class=\"form-text text-danger\" *ngIf=\"attandanceDetailFormGroup.controls.requiredHours.errors\">{{attandanceDetailFormGroup.controls.requiredHours.errors.minTime.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Entry Time</label>\r\n      <input type=\"text\" formControlName=\"entryTime\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">To apply the validation of minTime on 'Entry Time' field, then enter the value of 'Main Entry Gate' in Entry Place textbox.<br/></small>\r\n      <small class=\"form-text text-muted\">Conditional Expression with type 'string'<br/></small>\r\n     <small class=\"form-text text-danger\" *ngIf=\"attandanceDetailFormGroup.controls.entryTime.errors\">{{attandanceDetailFormGroup.controls.entryTime.errors.minTime.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Total Time Out</label>\r\n      <input type=\"text\" formControlName=\"totalOutTime\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">This field allow seconds in input time.<br/></small>\r\n     <small class=\"form-text text-danger\" *ngIf=\"attandanceDetailFormGroup.controls.totalOutTime.errors\">{{attandanceDetailFormGroup.controls.totalOutTime.errors.minTime.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Exit Time</label>\r\n      <input type=\"text\" formControlName=\"exitTime\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">Shows Custom Validation Message.<br/></small>\r\n     <small class=\"form-text text-danger\" *ngIf=\"attandanceDetailFormGroup.controls.exitTime.errors\">{{attandanceDetailFormGroup.controls.exitTime.errors.minTime.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Net-In Time</label>\r\n      <input type=\"text\" formControlName=\"netInTime\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">Shows Custom Validation Message using message key<br/></small>\r\n     <small class=\"form-text text-danger\" *ngIf=\"attandanceDetailFormGroup.controls.netInTime.errors\">{{attandanceDetailFormGroup.controls.netInTime.errors.minTime.message}}<br/></small>\t\t\r\n    </div>\r\n    <button [disabled]=\"!attandanceDetailFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n",
        "model": null,
        "modelName": null,
        "json": {
            "dynamic.json": "{\"entryPlace\":{},\"openingTime\":{\"minTime\":{\"value\":\"08:00\"}},\"requiredHours\":{\"minTime\":{\"operator\":\">\",\"value\":\"08:30\"}},\"entryTime\":{\"minTime\":{\"conditionalExpression\":\"x => x.entryPlace == \\\"Main Entry Gate\\\"\",\"fieldName\":\"openingTime\"}},\"totalOutTime\":{\"minTime\":{\"allowSeconds\":\"true\",\"value\":\"00:10:00\"}},\"exitTime\":{\"minTime\":{\"message\":\"Please enter valid input greater than config value\",\"value\":\"07:00\"}},\"netInTime\":{\"minTime\":{\"messageKey\":\"minTimeMessageKey\",\"value\":\"08:30\"}}}"
        }
    },
    "add": {
        "notes": [],
        "component": "import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup, FormBuilder } from \"@angular/forms\"\r\nimport { RxwebValidators } from '@rxweb/reactive-form-validators';\r\n\r\n@Component({\r\n    selector: 'app-minTime-add-validator',\r\n    templateUrl: './min-time-add.component.html'\r\n})\r\nexport class MinTimeAddValidatorComponent implements OnInit {\r\n    attandanceDetailFormGroup: FormGroup\r\n\r\n\tconstructor(\r\n        private formBuilder: FormBuilder )\r\n\t{ }\r\n\r\n    ngOnInit() {\r\n        this.attandanceDetailFormGroup = this.formBuilder.group({\r\n            entryTime:['', RxwebValidators.minTime({value:'08:00' })], \r\n        });\r\n    }\r\n}\r\n",
        "html": "<div>\r\n  <form  [formGroup]=\"attandanceDetailFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label>Entry Time</label>\r\n      <input type=\"text\" formControlName=\"entryTime\" class=\"form-control\"  />\r\n     <small class=\"form-text text-danger\" *ngIf=\"attandanceDetailFormGroup.controls.entryTime.errors\">{{attandanceDetailFormGroup.controls.entryTime.errors.minTime.message}}<br/></small>\t\r\n    </div>\r\n    <button [disabled]=\"!attandanceDetailFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n",
        "model": null,
        "modelName": null,
        "json": {}
    }
}