{
    "add":{
        "component":"import { Injectable } from \"@angular\/core\";\r\nimport { IAuthorize, AuthorizeConfig } from \"@rxweb\/angular-router\";\r\nimport { Router, ActivatedRouteSnapshot } from \"@angular\/router\";\r\nimport { HttpClient } from \"@angular\/common\/http\";\r\n\r\nexport var dbAccessModule: any;\r\n\r\n@Injectable({\r\n  providedIn: \"root\"\r\n})\r\nexport class AuthorizationResolver implements IAuthorize {\r\n  constructor(private http: HttpClient, private router: Router) {}\r\n\r\n  authorize(\r\n    authorizeConfig: AuthorizeConfig,\r\n    route: ActivatedRouteSnapshot\r\n  ): Promise<boolean> | boolean {\r\n    var promise = new Promise<boolean>((resolve, reject) => {\r\n      var t = this;\r\n\r\n      if (dbAccessModule == undefined || dbAccessModule == null) {\r\n        \/\/server side api\r\n        this.http\r\n          .get(\"assets\/user-access\/user-access.json\")\r\n          .subscribe(response => {\r\n            dbAccessModule = response;\r\n            let isAccess = this.verifyAuthorization(authorizeConfig);\r\n            resolve(isAccess);\r\n            if (!isAccess) this.router.navigate([\"\/dashboard\"]);\r\n          });\r\n      } else {\r\n        let isAccess = this.verifyAuthorization(authorizeConfig);\r\n        resolve(isAccess);\r\n        if (!isAccess) this.router.navigate([\"\/dashboard\"]);\r\n      }\r\n    });\r\n    return promise;\r\n  }\r\n\r\n  verifyAuthorization(authorizeConfig: AuthorizeConfig): boolean {\r\n    return dbAccessModule[authorizeConfig.accessLevel][authorizeConfig.action];\r\n  }\r\n}",
        "html":"export const USER_ROUTES: Routes = [\r\n    { \r\n        component: UserComponent, \r\n        path: '', \r\n        canActivate: [BaseCanActivate]\r\n    }\r\n];",
        "model":"@routerModule({\r\n  authentication:AuthResolver,\r\n  authorization:AuthorizationResolver\r\n})\r\n@NgModule({...})\r\nexport class AppModule { }",
        "function":"@access({accessLevel:1,action:'post'})\r\nexport class UserComponent implements OnInit{\r\n    constructor(){ }\r\n\r\n    ngOnInit(){\r\n       \r\n    }\r\n}"
    }
}