{"rightSidebarLinks":[{"id":"containsasync","title":"containsAsync","subLink":null},{"id":"whentouse","title":"When to use","subLink":[]},{"id":"basiccontainsasyncvalidation","title":"Basic containsAsync Validation","subLink":[]},{"id":"validatorconfig","title":"ValidatorConfig","subLink":[{"title":"message","id":"message","thirdLevelLink":[]},{"title":"messageKey","id":"messagekey","thirdLevelLink":[]},{"title":"value","id":"value","thirdLevelLink":[]}]},{"id":"completecontainsasyncexample","title":"Complete containsAsync Example","subLink":[]}],"title":"containsAsync","description":"containsAsync  validation validators will check whether a particular value is in the input. It will not allow user to enter input that does not containsAsync the predefined value.","validatorType":"validators","validationTypeTitle":"Validators","type":"tabs","gitDocPath":"https://github.com/rxweb/rxweb.io/edit/master/docs/angular/reactive-forms/reactive-form-validators/async-validators/containsAsync.md","category":"async-validators","subCategory":"String","linkTitle":"containsAsync","tabArray":{"complete":[{"tabName":"Example","tabGroupContent":null,"content":"<div component=\"app-example-runner\" ref-component=\"app-containsAsync-complete\"></div>\r\n"},{"tabName":"Component","tabGroupContent":null,"content":"<div component=\"app-code\" key=\"containsAsync-complete-component\"></div> \r\n"},{"tabName":"Html","tabGroupContent":null,"content":"<div component=\"app-code\" key=\"containsAsync-complete-html\"></div>\r\n"}]},"innerHtml":null,"htmlContent":"<div class=\"title-bar top_title\"><p>containsAsync</p></div> <div class=\"title-bar\"><p>containsAsync validation validator will check whether a particular value is in the input. It will not allow user to enter input that does not containsAsync the predefined value asynchronously.</p></div>\r\n<div class='row page-section' id= 'whentouse'>\r\n<div class='col-lg-12'>\r\n<h2 class='showHideElement' >When to use<a title='Link to this heading' class='link-header' href='/async-validators/containsAsync/validators#whentouse'><i class='fa fa-link'></i></a></h2>\r\n\r\n<p class='showHideElement' >Suppose you want to create a User form, which containsAsync fields like Email Address, BusinessEmailAddress RecoveryEmailAddress, OtherEmailAddress and you want the user to enter the input which containsAsync the predefined value asynchronously. Here depending upon the requirement these scenarios may arise.</p>\r\n<ol class='showHideElement'>\r\n\t<li>Allow input which containsAsync the predefined value in EmailAddress.</li>\r\n\t<li>Adding Custom Message on OtherEmailAddress Field.</li>\r\n     <li>Shows the custom message on <span class='highlighted'>Organization Email Address</span> field by using <span class='highlighted'>messageKey</span> property.</li>\r\n\t<data-scope scope=\"['decorator','validator']\">\r\n\t\t<li>Apply containsAsync validation dynamically based on server rules.</li>\r\n\t</data-scope>\r\n</ol>\r\n<p class='showHideElement' >Letâ€™s see how containsAsync validator fulfil the need.</p>\r\n</div></div>\r\n<div class='row page-section' id= 'basiccontainsasyncvalidation'>\r\n<div class='col-lg-12'>\r\n<h2>Basic containsAsync Validation<a title='Link to this heading' class='link-header' href='/async-validators/containsAsync/validators#basiccontainsasyncvalidation'><i class='fa fa-link'></i></a></h2>\r\n\r\n<p class='showHideElement' >Through Angular FormBuilder service we create FormGroup in the component.</p>\r\n<p class='showHideElement' >Here we have covered Add form operations. </p>\r\n<div component=\"app-code\" key=\"containsAsync-add-component\"></div> \r\n<p class='showHideElement' >Next, we need to write html code.</p>\r\n<div component=\"app-code\" key=\"containsAsync-add-html\"></div> \r\n<div component=\"app-example-runner\" ref-component=\"app-containsAsync-add\"></div>\r\n</div></div>\r\n<div class='row page-section' id= 'validatorconfig'>\r\n<div class='col-lg-12'>\r\n<h2>ValidatorConfig<a title='Link to this heading' class='link-header' href='/async-validators/containsAsync/validators#validatorconfig'><i class='fa fa-link'></i></a></h2>\r\n\r\n<p class='showHideElement' >Type : <span class='highlighted'>Observable</span></p>\r\n<p class='showHideElement' >validator config is used to dynamically resolve the value of the property according to the server rules by using the keyword <span class='highlighted'>of</span> as below </p>\r\n<p class='showHideElement' >Below options are not mandatory to use in the <span class='highlighted'>RxwebValidators.containsAsync({validatorConfig:of({validatorConfig:of({&ltproperty_name&gt:&ltvalue&gt})})</span> validator. If needed then use the below options.</p>\r\n<table class=\"table table-bordered table-striped showHideElement\">\r\n<tr><th>Option</th><th>Description</th></tr>\r\n<tr><td><a   (click)='scrollTo(\"#message\")' title=\"message\">message</a></td><td>To override the global configuration message and set the custom error message on respective FormControl</td></tr>\r\n<tr><td><a (click)='scrollTo(\"#messageKey\")' title=\"messageKey\">messageKey</a></td><td>messageKey property of BaseConfig can be used when the user wants to show a different custom validation message on some of their fields. User can define a custom messageKey globally by defining it in ReactiveFormConfig and set it in the message property of the validation.</td></tr>\r\n<tr><td><a (click)='scrollTo(\"#value\")' title=\"value\">value</a></td><td>value property of containsAsyncConfig is used to assign a value which must be present in the field input.</td></tr>\r\n</table>\r\n</div></div>\r\n<div class='row page-section' id= 'message'>\r\n<div class='col-lg-12'>\r\n<h2>message<a title='Link to this heading' class='link-header' href='/async-validators/containsAsync/validators#message'><i class='fa fa-link'></i></a></h2>\r\n\r\n<p class='showHideElement' >Type :  <span class='highlighted'>string</span> </p>\r\n<p class='showHideElement' >To override the global configuration message and set the custom message on respective FormControl.</p>\r\n<div component=\"app-code\" key=\"containsAsync-messageExample-model\"></div> \r\n<div component=\"app-example-runner\" ref-component=\"app-containsAsync-message\" title=\"containsAsync validator with message\" key=\"message\"></div>\r\n</div></div>\r\n<div class='row page-section' id= 'messagekey'>\r\n<div class='col-lg-12'>\r\n<h2>messageKey<a title='Link to this heading' class='link-header' href='/async-validators/containsAsync/validators#messagekey'><i class='fa fa-link'></i></a></h2>\r\n\r\n<p class='showHideElement' >Type : <span class='highlighted'>string</span></p>\r\n<p class='showHideElement' >messageKey property of BaseConfig can be used when the user wants to show a different custom validation message on some of their fields. User can define a custom messageKey globally by defining it in ReactiveFormConfig and set it in the message property of the validation.</p>\r\n<div component=\"app-code\" key=\"containsAsync-messageKeyExample-model\"></div> \r\n<div component=\"app-example-runner\" ref-component=\"app-containsAsync-messageKey\" title=\"containsAsync validator with messageKey\" key=\"messageKey\"></div>\r\n</div></div>\r\n<div class='row page-section' id= 'value'>\r\n<div class='col-lg-12'>\r\n<h2>value<a title='Link to this heading' class='link-header' href='/async-validators/containsAsync/validators#value'><i class='fa fa-link'></i></a></h2>\r\n\r\n<p class='showHideElement' >Type :  <span class='highlighted'>string</span> </p>\r\n<p class='showHideElement' >value property of containsAsyncConfig is used to assign a value which must be present in the field input.</p>\r\n<div component=\"app-code\" key=\"containsAsync-valueExample-model\"></div> \r\n<div component=\"app-example-runner\" ref-component=\"app-containsAsync-value\" title=\"containsAsync validator with value\" key=\"value\"></div>\r\n</div></div>\r\n<div class='row page-section' id= 'completecontainsasyncexample'>\r\n<div class='col-lg-12'>\r\n<h2>Complete containsAsync Example<a title='Link to this heading' class='link-header' href='/async-validators/containsAsync/validators#completecontainsasyncexample'><i class='fa fa-link'></i></a></h2>\r\n\r\n<p class='showHideElement' >This Complete containsAsync example which includes all the containsAsyncConfig properties will fulfil the requirement of scenarios 1, 2, 3 and 4.</p>\r\n<div component=\"app-tabs\" key=\"complete\"></div>\r\n</div></div>\r\n"}