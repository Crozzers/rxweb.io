{
    "complete": {
        "notes": null,
        "component": "import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from \"@angular/forms\"\r\nimport { RxFormBuilder } from '@rxweb/reactive-form-validators';\r\n\r\nimport { User } from './user.model';\r\n\r\n@Component({\r\n    selector: 'app-mask-complete',\r\n    templateUrl: './mask-complete.component.html'\r\n})\r\nexport class MaskCompleteComponent implements OnInit {\r\n    userFormGroup: FormGroup\r\n\r\n    constructor(\r\n        private formBuilder: RxFormBuilder    ) { }\r\n\r\n    ngOnInit() {\r\n        let user = new User();\r\n        this.userFormGroup = this.formBuilder.formGroup(user);\r\n    }\r\n}\r\n",
        "html": "<div>\r\n  <form  [formGroup]=\"userFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label>FirstName</label>\r\n      <input type=\"text\" formControlName=\"firstName\" class=\"form-control\"  />\r\n     <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.firstName.errors\">{{userFormGroup.controls.firstName.errors.mask.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Phone Number</label>\r\n      <input type=\"text\" formControlName=\"phoneNumber\" class=\"form-control\"  />\r\n     <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.phoneNumber.errors\">{{userFormGroup.controls.phoneNumber.errors.mask.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Postal Code</label>\r\n      <input type=\"text\" formControlName=\"postalCode\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">If you want to apply conditionalExpression on 'Postal Code', then enter 'Bharat' in 'First Name'<br/></small>\r\n      <small class=\"form-text text-muted\">Conditional Expression with type 'function'<br/></small>\r\n     <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.postalCode.errors\">{{userFormGroup.controls.postalCode.errors.mask.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>ZipCode</label>\r\n      <input type=\"text\" formControlName=\"zipcode\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">If you want to apply conditionalExpression on 'ZipCode', then enter 'Bharat' in 'First Name'<br/></small>\r\n      <small class=\"form-text text-muted\">Conditional Expression with type 'string'<br/></small>\r\n     <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.zipcode.errors\">{{userFormGroup.controls.zipcode.errors.mask.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Contact Number</label>\r\n      <input type=\"text\" formControlName=\"contactNumber\" class=\"form-control\"  />\r\n     <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.contactNumber.errors\">{{userFormGroup.controls.contactNumber.errors.mask.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Residental Contact Number</label>\r\n      <input type=\"text\" formControlName=\"residentalContactNumber\" class=\"form-control\"  />\r\n     <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.residentalContactNumber.errors\">{{userFormGroup.controls.residentalContactNumber.errors.mask.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Alternate Contact Number</label>\r\n      <input type=\"text\" formControlName=\"alternateContactNumber\" class=\"form-control\"  />\r\n     <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.alternateContactNumber.errors\">{{userFormGroup.controls.alternateContactNumber.errors.maskMessageKey.message}}<br/></small>\t\t\r\n    </div>\r\n    <button [disabled]=\"!userFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n",
        "model": "import {  mask,prop, } from   \"@rxweb/reactive-form-validators\"   \r\n\r\nexport class User {\r\n\r\n\t@prop()\r\n\tfirstName: string;\r\n\r\n\t@mask({mask:'(999)-999 9999' }) \r\n\tphoneNumber: string;\r\n\t\r\n\t\r\n\t//If you want to apply conditional expression of type 'function'\r\n\t@mask({mask:'999-999'  ,conditionalExpression:(x,y)=> x.firstName == \"Bharat\" }) \r\n\tpostalCode: string;\r\n\t\r\n\t\r\n\t//If you want to apply conditional expression of type 'string'\r\n\t@mask({mask:'9999'  ,conditionalExpression:'x => x.firstName == \"Bharat\"' }) \r\n\tzipcode: string;\r\n\t\r\n\t\r\n\t//Shows custom message\r\n\t@mask({mask:'999-9999999'  ,message:'Enter a valid Contact Number' }) \r\n\tcontactNumber: string;\r\n\t\r\n\t\r\n\t//Digit Options\r\n\t@mask({mask:'999-9999999'  ,minLength:10 }) \r\n\tresidentalContactNumber: string;\r\n\t\r\n\t\r\n\t//Shows custom message based on message key\r\n\t@mask({mask:'9999999999'  ,messageKey:'maskMessageKey' }) \r\n\talternateContactNumber: string;\r\n\t\r\n\t\r\n}\r\n",
        "modelName": "user.model.ts",
        "json": {}
    },
   
    "conditionalExpressionExampleFunction": {
        "notes": null,
        "component": null,
        "html": null,
        "model": "@mask({mask:'999-999'  ,conditionalExpression:(x,y)=> x.firstName == \"Bharat\" }) \r\npostalCode: string;\r\n",
        "modelName": null,
        "json": {}
    },
    "conditionalExpression": {
        "notes": null,
        "component": "import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from \"@angular/forms\"\r\nimport { RxFormBuilder } from '@rxweb/reactive-form-validators';\r\n\r\nimport { User } from './user.model';\r\n\r\n@Component({\r\n    selector: 'app-mask-conditionalExpression',\r\n    templateUrl: './mask-conditional-expression.component.html'\r\n})\r\nexport class MaskConditionalExpressionComponent implements OnInit {\r\n    userFormGroup: FormGroup\r\n\r\n    constructor(\r\n        private formBuilder: RxFormBuilder    ) { }\r\n\r\n    ngOnInit() {\r\n        let user = new User();\r\n        this.userFormGroup = this.formBuilder.formGroup(user);\r\n    }\r\n}\r\n",
        "html": "<div>\r\n  <form  [formGroup]=\"userFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label>FirstName</label>\r\n      <input type=\"text\" formControlName=\"firstName\" class=\"form-control\"  />\r\n     <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.firstName.errors\">{{userFormGroup.controls.firstName.errors.mask.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>ZipCode</label>\r\n      <input type=\"text\" formControlName=\"zipcode\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">If you want to apply conditionalExpression on 'ZipCode', then enter 'Bharat' in 'First Name'<br/></small>\r\n      <small class=\"form-text text-muted\">Conditional Expression with type 'string'<br/></small>\r\n     <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.zipcode.errors\">{{userFormGroup.controls.zipcode.errors.mask.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Postal Code</label>\r\n      <input type=\"text\" formControlName=\"postalCode\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">If you want to apply conditionalExpression on 'Postal Code', then enter 'Bharat' in 'First Name'<br/></small>\r\n      <small class=\"form-text text-muted\">Conditional Expression with type 'function'<br/></small>\r\n     <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.postalCode.errors\">{{userFormGroup.controls.postalCode.errors.mask.message}}<br/></small>\t\r\n    </div>\r\n    <button [disabled]=\"!userFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n",
        "model": "import {  mask,prop, } from   \"@rxweb/reactive-form-validators\"   \r\n\r\nexport class User {\r\n\r\n\t@prop()\r\n\tfirstName: string;\r\n\r\n\t//If you want to apply conditional expression of type 'string'\r\n\t@mask({mask:'9999'  ,conditionalExpression:'x => x.firstName == \"Bharat\"' }) \r\n\tzipcode: string;\r\n\t\r\n\t\r\n\t//If you want to apply conditional expression of type 'function'\r\n\t@mask({mask:'999-999'  ,conditionalExpression:(x,y)=> x.firstName == \"Bharat\" }) \r\n\tpostalCode: string;\r\n\t\r\n\t\r\n}\r\n",
        "modelName": "user.model.ts",
        "json": {}
    },
    "maskExampleString": {
        "notes": null,
        "component": null,
        "html": null,
        "model": "@mask({mask:'9999'  ,conditionalExpression:'x => x.firstName == \"Bharat\"' }) \r\nzipcode: string;\r\n",
        "modelName": null,
        "json": {}
    },
    "conditionalExpressionExampleString": {
        "notes": null,
        "component": null,
        "html": null,
        "model": "@mask({mask:'9999'  ,conditionalExpression:'x => x.firstName == \"Bharat\"' }) \r\nzipcode: string;\r\n",
        "modelName": null,
        "json": {}
    },
    "messageExample": {
        "notes": null,
        "component": null,
        "html": null,
        "model": "@mask({mask:'999-9999999'  ,message:'Enter a valid Contact Number' }) \r\ncontactNumber: string;\r\n",
        "modelName": null,
        "json": {}
    },
    "message": {
        "notes": null,
        "component": "import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from \"@angular/forms\"\r\nimport { RxFormBuilder } from '@rxweb/reactive-form-validators';\r\n\r\nimport { User } from './user.model';\r\n\r\n@Component({\r\n    selector: 'app-mask-message',\r\n    templateUrl: './mask-message.component.html'\r\n})\r\nexport class MaskMessageComponent implements OnInit {\r\n    userFormGroup: FormGroup\r\n\r\n    constructor(\r\n        private formBuilder: RxFormBuilder    ) { }\r\n\r\n    ngOnInit() {\r\n        let user = new User();\r\n        this.userFormGroup = this.formBuilder.formGroup(user);\r\n    }\r\n}\r\n",
        "html": "<div>\r\n  <form  [formGroup]=\"userFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label>Contact Number</label>\r\n      <input type=\"text\" formControlName=\"contactNumber\" class=\"form-control\"  />\r\n     <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.contactNumber.errors\">{{userFormGroup.controls.contactNumber.errors.mask.message}}<br/></small>\t\r\n    </div>\r\n    <button [disabled]=\"!userFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n",
        "model": "import {  mask, } from   \"@rxweb/reactive-form-validators\"   \r\n\r\nexport class User {\r\n\r\n\t//Shows custom message\r\n\t@mask({mask:'999-9999999'  ,message:'Enter a valid Contact Number' }) \r\n\tcontactNumber: string;\r\n\t\r\n\t\r\n}\r\n",
        "modelName": "user.model.ts",
        "json": {}
    },
    "minLengthExample": {
        "notes": null,
        "component": null,
        "html": null,
        "model": "@mask({mask:'999-9999999'  ,minLength:10 }) \r\nresidentalContactNumber: string;\r\n",
        "modelName": null,
        "json": {}
    },
    "minLength": {
        "notes": null,
        "component": "import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from \"@angular/forms\"\r\nimport { RxFormBuilder } from '@rxweb/reactive-form-validators';\r\n\r\nimport { User } from './user.model';\r\n\r\n@Component({\r\n    selector: 'app-mask-minLength',\r\n    templateUrl: './mask-min-length.component.html'\r\n})\r\nexport class MaskMinLengthComponent implements OnInit {\r\n    userFormGroup: FormGroup\r\n\r\n    constructor(\r\n        private formBuilder: RxFormBuilder    ) { }\r\n\r\n    ngOnInit() {\r\n        let user = new User();\r\n        this.userFormGroup = this.formBuilder.formGroup(user);\r\n    }\r\n}\r\n",
        "html": "<div>\r\n  <form  [formGroup]=\"userFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label>Residental Contact Number</label>\r\n      <input type=\"text\" formControlName=\"residentalContactNumber\" class=\"form-control\"  />\r\n     <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.residentalContactNumber.errors\">{{userFormGroup.controls.residentalContactNumber.errors.mask.message}}<br/></small>\t\r\n    </div>\r\n    <button [disabled]=\"!userFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n",
        "model": "import {  mask, } from   \"@rxweb/reactive-form-validators\"   \r\n\r\nexport class User {\r\n\r\n\t//Digit Options\r\n\t@mask({mask:'999-9999999'  ,minLength:10 }) \r\n\tresidentalContactNumber: string;\r\n\t\r\n\t\r\n}\r\n",
        "modelName": "user.model.ts",
        "json": {}
    },
    "messageKeyExample": {
        "notes": null,
        "component": null,
        "html": null,
        "model": "@mask({mask:'9999999999'  ,messageKey:'maskMessageKey' }) \r\nalternateContactNumber: string;\r\n",
        "modelName": null,
        "json": {}
    },
    "messageKey": {
        "notes": null,
        "component": "import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from \"@angular/forms\"\r\nimport { RxFormBuilder } from '@rxweb/reactive-form-validators';\r\n\r\nimport { User } from './user.model';\r\n\r\n@Component({\r\n    selector: 'app-mask-messageKey',\r\n    templateUrl: './mask-message-key.component.html'\r\n})\r\nexport class MaskMessageKeyComponent implements OnInit {\r\n    userFormGroup: FormGroup\r\n\r\n    constructor(\r\n        private formBuilder: RxFormBuilder    ) { }\r\n\r\n    ngOnInit() {\r\n        let user = new User();\r\n        this.userFormGroup = this.formBuilder.formGroup(user);\r\n    }\r\n}\r\n",
        "html": "<div>\r\n  <form  [formGroup]=\"userFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label>Alternate Contact Number</label>\r\n      <input type=\"text\" formControlName=\"alternateContactNumber\" class=\"form-control\"  />\r\n     <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.alternateContactNumber.errors\">{{userFormGroup.controls.alternateContactNumber.errors.maskMessageKey.message}}<br/></small>\t\t\r\n    </div>\r\n    <button [disabled]=\"!userFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n",
        "model": "import {  mask, } from   \"@rxweb/reactive-form-validators\"   \r\n\r\nexport class User {\r\n\r\n\t//Shows custom message based on message key\r\n\t@mask({mask:'9999999999'  ,messageKey:'maskMessageKey' }) \r\n\talternateContactNumber: string;\r\n\t\r\n\t\r\n}\r\n",
        "modelName": "user.model.ts",
        "json": {}
    },
    "dynamic": {
        "notes": null,
        "component": "import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from \"@angular/forms\"\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { environment } from 'src/environments/environment';\r\nimport { RxFormBuilder } from '@rxweb/reactive-form-validators';\r\nimport { FormBuilderConfiguration,} from '@rxweb/reactive-form-validators';\r\n\r\nimport { User } from './user.model';\r\n\r\n@Component({\r\n    selector: 'app-mask-dynamic',\r\n    templateUrl: './mask-dynamic.component.html'\r\n})\r\nexport class MaskDynamicComponent implements OnInit {\r\n    userFormGroup: FormGroup\r\n\r\n    constructor(\r\n        private formBuilder: RxFormBuilder,private http: HttpClient    ) { }\r\n\r\n    ngOnInit() {\r\n        let user = new User();\r\n        let formBuilderConfiguration = new FormBuilderConfiguration();\r\n\t\tthis.http.get('assets/examples/reactive-form-validators/decorators/mask/dynamic/dynamic.json?v=' + environment.appVersion).subscribe(dynamic => {\r\n            formBuilderConfiguration.dynamicValidation = JSON.parse(JSON.stringify(dynamic));\r\n\t\t\tthis.userFormGroup = this.formBuilder.formGroup(user,formBuilderConfiguration);\r\n        })\r\n    }\r\n}\r\n",
        "html": "<div>\r\n  <form  *ngIf=\"userFormGroup\"  [formGroup]=\"userFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label>FirstName</label>\r\n      <input type=\"text\" formControlName=\"firstName\" class=\"form-control\"   />\r\n      <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.firstName.errors\">{{userFormGroup.controls.firstName.errors.mask.message}}<br/></small>\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Phone Number</label>\r\n      <input type=\"text\" formControlName=\"phoneNumber\" class=\"form-control\"  />\r\n     <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.phoneNumber.errors\">{{userFormGroup.controls.phoneNumber.errors.mask.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>ZipCode</label>\r\n      <input type=\"text\" formControlName=\"zipcode\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">If you want to apply conditionalExpression on 'ZipCode', then enter 'Bharat' in 'First Name'<br/></small>\r\n      <small class=\"form-text text-muted\">Conditional Expression with type 'string'<br/></small>\r\n     <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.zipcode.errors\">{{userFormGroup.controls.zipcode.errors.mask.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Contact Number</label>\r\n      <input type=\"text\" formControlName=\"contactNumber\" class=\"form-control\"  />\r\n     <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.contactNumber.errors\">{{userFormGroup.controls.contactNumber.errors.mask.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Residental Contact Number</label>\r\n      <input type=\"text\" formControlName=\"residentalContactNumber\" class=\"form-control\"  />\r\n     <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.residentalContactNumber.errors\">{{userFormGroup.controls.residentalContactNumber.errors.mask.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Alternate Contact Number</label>\r\n      <input type=\"text\" formControlName=\"alternateContactNumber\" class=\"form-control\"  />\r\n     <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.alternateContactNumber.errors\">{{userFormGroup.controls.alternateContactNumber.errors.maskMessageKey.message}}<br/></small>\t\t\r\n    </div>\r\n    <button [disabled]=\"!userFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n",
        "model": "import {  mask,prop, } from   \"@rxweb/reactive-form-validators\"   \r\n\r\nexport class User {\r\n\r\n\t@prop()\r\n\tfirstName: string;\r\n\r\n\t@prop()\r\n\tphoneNumber: string;\r\n\r\n\t@prop()\r\n\tzipcode: string;\r\n\r\n\t@prop()\r\n\tcontactNumber: string;\r\n\r\n\t@prop()\r\n\tresidentalContactNumber: string;\r\n\r\n\t@prop()\r\n\talternateContactNumber: string;\r\n\r\n}\r\n",
        "modelName": "user.model.ts",
        "json": {
            "dynamic.json": "{\"firstName\":{},\"phoneNumber\":{\"mask\":{\"mask\":\"(999)-999 9999\"}},\"zipcode\":{\"mask\":{\"mask\":\"9999\",\"conditionalExpression\":\"x => x.firstName == \\\"Bharat\\\"\"}},\"contactNumber\":{\"mask\":{\"mask\":\"999-9999999\",\"message\":\"Enter a valid Contact Number\"}},\"residentalContactNumber\":{\"mask\":{\"mask\":\"999-9999999\",\"minLength\":\"10\"}},\"alternateContactNumber\":{\"mask\":{\"mask\":\"9999999999\",\"messageKey\":\"maskMessageKey\"}}}"
        }
    },
    "add": {
        "notes": null,
        "component": "import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from \"@angular/forms\"\r\nimport { RxFormBuilder } from '@rxweb/reactive-form-validators';\r\n\r\nimport { User } from './user.model';\r\n\r\n@Component({\r\n    selector: 'app-mask-add',\r\n    templateUrl: './mask-add.component.html'\r\n})\r\nexport class MaskAddComponent implements OnInit {\r\n    userFormGroup: FormGroup\r\n\r\n    constructor(\r\n        private formBuilder: RxFormBuilder    ) { }\r\n\r\n    ngOnInit() {\r\n        let user = new User();\r\n        this.userFormGroup = this.formBuilder.formGroup(user);\r\n    }\r\n}\r\n",
        "html": "<div>\r\n  <form  [formGroup]=\"userFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label>Phone Number</label>\r\n      <input type=\"text\" formControlName=\"phoneNumber\" class=\"form-control\"  />\r\n     <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.phoneNumber.errors\">{{userFormGroup.controls.phoneNumber.errors.mask.message}}<br/></small>\t\r\n    </div>\r\n    <button [disabled]=\"!userFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n",
        "model": "import {  mask, } from   \"@rxweb/reactive-form-validators\"   \r\n\r\nexport class User {\r\n\r\n\t@mask({mask:'(999)-999 9999' }) \r\n\tphoneNumber: string;\r\n\t\r\n\t\r\n}\r\n",
        "modelName": "user.model.ts",
        "json": {}
    },
    "edit": {
        "notes": null,
        "component": "import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from \"@angular/forms\"\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { environment } from 'src/environments/environment';\r\nimport { RxFormBuilder } from '@rxweb/reactive-form-validators';\r\n\r\nimport { User } from './user.model';\r\n\r\n@Component({\r\n    selector: 'app-mask-edit',\r\n    templateUrl: './mask-edit.component.html'\r\n})\r\nexport class MaskEditComponent implements OnInit {\r\n    userFormGroup: FormGroup\r\n\r\n    constructor(\r\n        private formBuilder: RxFormBuilder,private http: HttpClient    ) { }\r\n\r\n    ngOnInit() {\r\n        this.http.get('assets/examples/reactive-form-validators/decorators/mask/edit/user-data.json?v=' + environment.appVersion).subscribe(user => {\r\n            this.userFormGroup = this.formBuilder.formGroup<User>(User,user);\r\n        })\r\n    }\r\n}\r\n",
        "html": "<div>\r\n  <form  *ngIf=\"userFormGroup\"  [formGroup]=\"userFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label>Phone Number</label>\r\n      <input type=\"text\" formControlName=\"phoneNumber\" class=\"form-control\"  />\r\n     <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.phoneNumber.errors\">{{userFormGroup.controls.phoneNumber.errors.mask.message}}<br/></small>\t\r\n    </div>\r\n    <button [disabled]=\"!userFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n",
        "model": "import {  mask, } from   \"@rxweb/reactive-form-validators\"   \r\n\r\nexport class User {\r\n\r\n\t@mask({mask:'(999)-999 9999' }) \r\n\tphoneNumber: string;\r\n\t\r\n\t\r\n}\r\n",
        "modelName": "user.model.ts",
        "json": {
            "user-data.json": "{\"phoneNumber\":\"(075)-566 8888\"}"
        }
    }
}