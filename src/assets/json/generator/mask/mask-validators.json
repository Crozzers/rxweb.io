{
    "complete": {
        "notes": [],
        "component": "import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup, FormBuilder } from \"@angular/forms\"\r\nimport { RxwebValidators } from '@rxweb/reactive-form-validators';\r\n\r\n@Component({\r\n    selector: 'app-mask-complete-validator',\r\n    templateUrl: './mask-complete.component.html'\r\n})\r\nexport class MaskCompleteValidatorComponent implements OnInit {\r\n    userFormGroup: FormGroup\r\n\r\n\tconstructor(\r\n        private formBuilder: FormBuilder )\r\n\t{ }\r\n\r\n    ngOnInit() {\r\n        this.userFormGroup = this.formBuilder.group({\r\n            firstName:['',], \r\n            phoneNumber:['', RxwebValidators.mask({mask:'(999)-999 9999' })], \r\n                macNumber:['', [RxwebValidators.mask({mask:'**:**:**:**:**:**',valueWithMask:true }),RxwebValidators.mac()]],  \r\n            postalCode:['', RxwebValidators.mask({mask:'999-999'  ,conditionalExpression:(x,y)=> x.firstName == \"Bharat\" })], \r\n            zipcode:['', RxwebValidators.mask({mask:'9999'  ,conditionalExpression:'x => x.firstName == \"Bharat\"' })], \r\n            contactNumber:['', RxwebValidators.mask({mask:'999-9999999'  ,message:'Enter a valid Contact Number' })], \r\n            residentalContactNumber:['', RxwebValidators.mask({mask:'999-9999999'  ,minLength:10 })], \r\n            alternateContactNumber:['', RxwebValidators.mask({mask:'9999999999'  ,messageKey:'maskMessageKey' })], \r\n        });\r\n    }\r\n}\r\n",
        "html": "<div>\r\n  <form  [formGroup]=\"userFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label>FirstName</label>\r\n      <input type=\"text\" formControlName=\"firstName\" class=\"form-control\"  />\r\n     <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.firstName.errors\">{{userFormGroup.controls.firstName.errors.mask.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Phone Number</label>\r\n      <input type=\"text\" formControlName=\"phoneNumber\" class=\"form-control\"  />\r\n     <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.phoneNumber.errors\">{{userFormGroup.controls.phoneNumber.errors.mask.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Mac Number</label>\r\n      <input type=\"text\" formControlName=\"macNumber\" class=\"form-control\"  />\r\n     <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.macNumber.errors\">{{userFormGroup.controls.macNumber.errors.mask.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Postal Code</label>\r\n      <input type=\"text\" formControlName=\"postalCode\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">If you want to apply conditionalExpression on 'Postal Code', then enter 'Bharat' in 'First Name'<br/></small>\r\n      <small class=\"form-text text-muted\">Conditional Expression with type 'function'<br/></small>\r\n     <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.postalCode.errors\">{{userFormGroup.controls.postalCode.errors.mask.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>ZipCode</label>\r\n      <input type=\"text\" formControlName=\"zipcode\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">If you want to apply conditionalExpression on 'ZipCode', then enter 'Bharat' in 'First Name'<br/></small>\r\n      <small class=\"form-text text-muted\">Conditional Expression with type 'string'<br/></small>\r\n     <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.zipcode.errors\">{{userFormGroup.controls.zipcode.errors.mask.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Contact Number</label>\r\n      <input type=\"text\" formControlName=\"contactNumber\" class=\"form-control\"  />\r\n     <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.contactNumber.errors\">{{userFormGroup.controls.contactNumber.errors.mask.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Residental Contact Number</label>\r\n      <input type=\"text\" formControlName=\"residentalContactNumber\" class=\"form-control\"  />\r\n     <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.residentalContactNumber.errors\">{{userFormGroup.controls.residentalContactNumber.errors.mask.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Alternate Contact Number</label>\r\n      <input type=\"text\" formControlName=\"alternateContactNumber\" class=\"form-control\"  />\r\n     <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.alternateContactNumber.errors\">{{userFormGroup.controls.alternateContactNumber.errors.maskMessageKey.message}}<br/></small>\t\t\r\n    </div>\r\n    <button [disabled]=\"!userFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n",
        "model": null,
        "modelName": null,
        "json": {}
    },
    "maskExample": {
        "notes": null,
        "component": null,
        "html": null,
        "model": "RxwebValidators.mask({mask:'(999)-999 9999' });\r\n",
        "modelName": null,
        "json": {}
    },
    "mask": {
        "notes": [],
        "component": "import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup, FormBuilder } from \"@angular/forms\"\r\nimport { RxwebValidators } from '@rxweb/reactive-form-validators';\r\n\r\n@Component({\r\n    selector: 'app-mask-mask-validator',\r\n    templateUrl: './mask-mask.component.html'\r\n})\r\nexport class MaskMaskValidatorComponent implements OnInit {\r\n    userFormGroup: FormGroup\r\n\r\n\tconstructor(\r\n        private formBuilder: FormBuilder )\r\n\t{ }\r\n\r\n    ngOnInit() {\r\n        this.userFormGroup = this.formBuilder.group({\r\n            phoneNumber:['', RxwebValidators.mask({mask:'(999)-999 9999' })], \r\n        });\r\n    }\r\n}\r\n",
        "html": "<div>\r\n  <form  [formGroup]=\"userFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label>Phone Number</label>\r\n      <input type=\"text\" formControlName=\"phoneNumber\" class=\"form-control\"  />\r\n     <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.phoneNumber.errors\">{{userFormGroup.controls.phoneNumber.errors.mask.message}}<br/></small>\t\r\n    </div>\r\n    <button [disabled]=\"!userFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n",
        "model": null,
        "modelName": null,
        "json": {}
    },
    "valueWithMaskExample": {
        "notes": null,
        "component": null,
        "html": null,
        "model": "    macNumber:['', [RxwebValidators.mask({mask:'**:**:**:**:**:**',valueWithMask:true }),RxwebValidators.mac()]], \r\n",
        "modelName": null,
        "json": {}
    },
    "valueWithMask": {
        "notes": [],
        "component": "import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup, FormBuilder } from \"@angular/forms\"\r\nimport { RxwebValidators } from '@rxweb/reactive-form-validators';\r\n\r\n@Component({\r\n    selector: 'app-mask-valueWithMask-validator',\r\n    templateUrl: './mask-value-with-mask.component.html'\r\n})\r\nexport class MaskValueWithMaskValidatorComponent implements OnInit {\r\n    userFormGroup: FormGroup\r\n\r\n\tconstructor(\r\n        private formBuilder: FormBuilder )\r\n\t{ }\r\n\r\n    ngOnInit() {\r\n        this.userFormGroup = this.formBuilder.group({\r\n                macNumber:['', [RxwebValidators.mask({mask:'**:**:**:**:**:**',valueWithMask:true }),RxwebValidators.mac()]],  \r\n        });\r\n    }\r\n}\r\n",
        "html": "<div>\r\n  <form  [formGroup]=\"userFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label>Mac Number</label>\r\n      <input type=\"text\" formControlName=\"macNumber\" class=\"form-control\"  />\r\n     <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.macNumber.errors\">{{userFormGroup.controls.macNumber.errors.mask.message}}<br/></small>\t\r\n    </div>\r\n    <button [disabled]=\"!userFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n",
        "model": null,
        "modelName": null,
        "json": {}
    },
    "maskExampleFunction": {
        "notes": null,
        "component": null,
        "html": null,
        "model": "RxwebValidators.mask({mask:'999-999'  ,conditionalExpression:(x,y)=> x.firstName == \"Bharat\" });\r\n",
        "modelName": null,
        "json": {}
    },
    "conditionalExpressionExampleFunction": {
        "notes": null,
        "component": null,
        "html": null,
        "model": "RxwebValidators.mask({mask:'999-999'  ,conditionalExpression:(x,y)=> x.firstName == \"Bharat\" });\r\n",
        "modelName": null,
        "json": {}
    },
    "conditionalExpression": {
        "notes": [],
        "component": "import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup, FormBuilder } from \"@angular/forms\"\r\nimport { RxwebValidators } from '@rxweb/reactive-form-validators';\r\n\r\n@Component({\r\n    selector: 'app-mask-conditionalExpression-validator',\r\n    templateUrl: './mask-conditional-expression.component.html'\r\n})\r\nexport class MaskConditionalExpressionValidatorComponent implements OnInit {\r\n    userFormGroup: FormGroup\r\n\r\n\tconstructor(\r\n        private formBuilder: FormBuilder )\r\n\t{ }\r\n\r\n    ngOnInit() {\r\n        this.userFormGroup = this.formBuilder.group({\r\n            firstName:['',], \r\n            zipcode:['', RxwebValidators.mask({mask:'9999'  ,conditionalExpression:'x => x.firstName == \"Bharat\"' })], \r\n            postalCode:['', RxwebValidators.mask({mask:'999-999'  ,conditionalExpression:(x,y)=> x.firstName == \"Bharat\" })], \r\n        });\r\n    }\r\n}\r\n",
        "html": "<div>\r\n  <form  [formGroup]=\"userFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label>FirstName</label>\r\n      <input type=\"text\" formControlName=\"firstName\" class=\"form-control\"  />\r\n     <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.firstName.errors\">{{userFormGroup.controls.firstName.errors.mask.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>ZipCode</label>\r\n      <input type=\"text\" formControlName=\"zipcode\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">If you want to apply conditionalExpression on 'ZipCode', then enter 'Bharat' in 'First Name'<br/></small>\r\n      <small class=\"form-text text-muted\">Conditional Expression with type 'string'<br/></small>\r\n     <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.zipcode.errors\">{{userFormGroup.controls.zipcode.errors.mask.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Postal Code</label>\r\n      <input type=\"text\" formControlName=\"postalCode\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">If you want to apply conditionalExpression on 'Postal Code', then enter 'Bharat' in 'First Name'<br/></small>\r\n      <small class=\"form-text text-muted\">Conditional Expression with type 'function'<br/></small>\r\n     <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.postalCode.errors\">{{userFormGroup.controls.postalCode.errors.mask.message}}<br/></small>\t\r\n    </div>\r\n    <button [disabled]=\"!userFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n",
        "model": null,
        "modelName": null,
        "json": {}
    },
    "maskExampleString": {
        "notes": null,
        "component": null,
        "html": null,
        "model": "RxwebValidators.mask({mask:'9999'  ,conditionalExpression:'x => x.firstName == \"Bharat\"' });\r\n",
        "modelName": null,
        "json": {}
    },
    "conditionalExpressionExampleString": {
        "notes": null,
        "component": null,
        "html": null,
        "model": "RxwebValidators.mask({mask:'9999'  ,conditionalExpression:'x => x.firstName == \"Bharat\"' });\r\n",
        "modelName": null,
        "json": {}
    },
    "messageExample": {
        "notes": null,
        "component": null,
        "html": null,
        "model": "RxwebValidators.mask({mask:'999-9999999'  ,message:'Enter a valid Contact Number' });\r\n",
        "modelName": null,
        "json": {}
    },
    "message": {
        "notes": [],
        "component": "import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup, FormBuilder } from \"@angular/forms\"\r\nimport { RxwebValidators } from '@rxweb/reactive-form-validators';\r\n\r\n@Component({\r\n    selector: 'app-mask-message-validator',\r\n    templateUrl: './mask-message.component.html'\r\n})\r\nexport class MaskMessageValidatorComponent implements OnInit {\r\n    userFormGroup: FormGroup\r\n\r\n\tconstructor(\r\n        private formBuilder: FormBuilder )\r\n\t{ }\r\n\r\n    ngOnInit() {\r\n        this.userFormGroup = this.formBuilder.group({\r\n            contactNumber:['', RxwebValidators.mask({mask:'999-9999999'  ,message:'Enter a valid Contact Number' })], \r\n        });\r\n    }\r\n}\r\n",
        "html": "<div>\r\n  <form  [formGroup]=\"userFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label>Contact Number</label>\r\n      <input type=\"text\" formControlName=\"contactNumber\" class=\"form-control\"  />\r\n     <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.contactNumber.errors\">{{userFormGroup.controls.contactNumber.errors.mask.message}}<br/></small>\t\r\n    </div>\r\n    <button [disabled]=\"!userFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n",
        "model": null,
        "modelName": null,
        "json": {}
    },
    "minLengthExample": {
        "notes": null,
        "component": null,
        "html": null,
        "model": "RxwebValidators.mask({mask:'999-9999999'  ,minLength:10 });\r\n",
        "modelName": null,
        "json": {}
    },
    "minLength": {
        "notes": [],
        "component": "import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup, FormBuilder } from \"@angular/forms\"\r\nimport { RxwebValidators } from '@rxweb/reactive-form-validators';\r\n\r\n@Component({\r\n    selector: 'app-mask-minLength-validator',\r\n    templateUrl: './mask-min-length.component.html'\r\n})\r\nexport class MaskMinLengthValidatorComponent implements OnInit {\r\n    userFormGroup: FormGroup\r\n\r\n\tconstructor(\r\n        private formBuilder: FormBuilder )\r\n\t{ }\r\n\r\n    ngOnInit() {\r\n        this.userFormGroup = this.formBuilder.group({\r\n            residentalContactNumber:['', RxwebValidators.mask({mask:'999-9999999'  ,minLength:10 })], \r\n        });\r\n    }\r\n}\r\n",
        "html": "<div>\r\n  <form  [formGroup]=\"userFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label>Residental Contact Number</label>\r\n      <input type=\"text\" formControlName=\"residentalContactNumber\" class=\"form-control\"  />\r\n     <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.residentalContactNumber.errors\">{{userFormGroup.controls.residentalContactNumber.errors.mask.message}}<br/></small>\t\r\n    </div>\r\n    <button [disabled]=\"!userFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n",
        "model": null,
        "modelName": null,
        "json": {}
    },
    "messageKeyExample": {
        "notes": null,
        "component": null,
        "html": null,
        "model": "RxwebValidators.mask({mask:'9999999999'  ,messageKey:'maskMessageKey' });\r\n",
        "modelName": null,
        "json": {}
    },
    "messageKey": {
        "notes": [],
        "component": "import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup, FormBuilder } from \"@angular/forms\"\r\nimport { RxwebValidators } from '@rxweb/reactive-form-validators';\r\n\r\n@Component({\r\n    selector: 'app-mask-messageKey-validator',\r\n    templateUrl: './mask-message-key.component.html'\r\n})\r\nexport class MaskMessageKeyValidatorComponent implements OnInit {\r\n    userFormGroup: FormGroup\r\n\r\n\tconstructor(\r\n        private formBuilder: FormBuilder )\r\n\t{ }\r\n\r\n    ngOnInit() {\r\n        this.userFormGroup = this.formBuilder.group({\r\n            alternateContactNumber:['', RxwebValidators.mask({mask:'9999999999'  ,messageKey:'maskMessageKey' })], \r\n        });\r\n    }\r\n}\r\n",
        "html": "<div>\r\n  <form  [formGroup]=\"userFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label>Alternate Contact Number</label>\r\n      <input type=\"text\" formControlName=\"alternateContactNumber\" class=\"form-control\"  />\r\n     <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.alternateContactNumber.errors\">{{userFormGroup.controls.alternateContactNumber.errors.maskMessageKey.message}}<br/></small>\t\t\r\n    </div>\r\n    <button [disabled]=\"!userFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n",
        "model": null,
        "modelName": null,
        "json": {}
    },
    "dynamic": {
        "notes": [],
        "component": "import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup, FormBuilder } from \"@angular/forms\"\r\nimport { RxwebValidators } from '@rxweb/reactive-form-validators';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { FormBuilderConfiguration,RxFormBuilder} from '@rxweb/reactive-form-validators';\r\nimport { environment } from 'src/environments/environment';\r\n\r\n@Component({\r\n    selector: 'app-mask-dynamic-validator',\r\n    templateUrl: './mask-dynamic.component.html'\r\n})\r\nexport class MaskDynamicValidatorComponent implements OnInit {\r\n    userFormGroup: FormGroup\r\n\r\n\tconstructor(\r\n        private formBuilder: RxFormBuilder , private http: HttpClient )\r\n\t{ }\r\n\r\n    ngOnInit() {\r\n\t\tlet formBuilderConfiguration = new FormBuilderConfiguration();\r\n\t\tthis.http.get('assets/examples/reactive-form-validators/validators/mask/dynamic/dynamic.json?v='+environment.appVersion).subscribe(dynamic => {\r\n\t\t\tformBuilderConfiguration.dynamicValidation = JSON.parse(JSON.stringify(dynamic));\r\n\t\t\tvar user = { firstName:'', phoneNumber:'', macNumber:'', postalCode:'', zipcode:'', contactNumber:'', residentalContactNumber:'', alternateContactNumber:'',  }\r\n\t\t\tthis.userFormGroup = this.formBuilder.group(user,formBuilderConfiguration);\r\n\t\t})\r\n    }\r\n}\r\n",
        "html": "<div>\r\n  <form  *ngIf=\"userFormGroup\"  [formGroup]=\"userFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label>FirstName</label>\r\n      <input type=\"text\" formControlName=\"firstName\" class=\"form-control\"   />\r\n      <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.firstName.errors\">{{userFormGroup.controls.firstName.errors.mask.message}}<br/></small>\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Phone Number</label>\r\n      <input type=\"text\" formControlName=\"phoneNumber\" class=\"form-control\"  />\r\n     <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.phoneNumber.errors\">{{userFormGroup.controls.phoneNumber.errors.mask.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Mac Number</label>\r\n      <input type=\"text\" formControlName=\"macNumber\" class=\"form-control\"  />\r\n     <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.macNumber.errors\">{{userFormGroup.controls.macNumber.errors.mask.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>ZipCode</label>\r\n      <input type=\"text\" formControlName=\"zipcode\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">If you want to apply conditionalExpression on 'ZipCode', then enter 'Bharat' in 'First Name'<br/></small>\r\n      <small class=\"form-text text-muted\">Conditional Expression with type 'string'<br/></small>\r\n     <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.zipcode.errors\">{{userFormGroup.controls.zipcode.errors.mask.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Contact Number</label>\r\n      <input type=\"text\" formControlName=\"contactNumber\" class=\"form-control\"  />\r\n     <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.contactNumber.errors\">{{userFormGroup.controls.contactNumber.errors.mask.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Residental Contact Number</label>\r\n      <input type=\"text\" formControlName=\"residentalContactNumber\" class=\"form-control\"  />\r\n     <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.residentalContactNumber.errors\">{{userFormGroup.controls.residentalContactNumber.errors.mask.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Alternate Contact Number</label>\r\n      <input type=\"text\" formControlName=\"alternateContactNumber\" class=\"form-control\"  />\r\n     <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.alternateContactNumber.errors\">{{userFormGroup.controls.alternateContactNumber.errors.maskMessageKey.message}}<br/></small>\t\t\r\n    </div>\r\n    <button [disabled]=\"!userFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n",
        "model": null,
        "modelName": null,
        "json": {
            "dynamic.json": "{\"firstName\":{},\"phoneNumber\":{\"mask\":{\"mask\":\"(999)-999 9999\"}},\"macNumber\":{\"mask\":{\"mask\":\"(999)-999 9999\",\"valueWithMask\":\"true\"}},\"zipcode\":{\"mask\":{\"mask\":\"9999\",\"conditionalExpression\":\"x => x.firstName == \\\"Bharat\\\"\"}},\"contactNumber\":{\"mask\":{\"mask\":\"999-9999999\",\"message\":\"Enter a valid Contact Number\"}},\"residentalContactNumber\":{\"mask\":{\"mask\":\"999-9999999\",\"minLength\":\"10\"}},\"alternateContactNumber\":{\"mask\":{\"mask\":\"9999999999\",\"messageKey\":\"maskMessageKey\"}}}"
        }
    },
    "add": {
        "notes": [],
        "component": "import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup, FormBuilder } from \"@angular/forms\"\r\nimport { RxwebValidators } from '@rxweb/reactive-form-validators';\r\n\r\n@Component({\r\n    selector: 'app-mask-add-validator',\r\n    templateUrl: './mask-add.component.html'\r\n})\r\nexport class MaskAddValidatorComponent implements OnInit {\r\n    userFormGroup: FormGroup\r\n\r\n\tconstructor(\r\n        private formBuilder: FormBuilder )\r\n\t{ }\r\n\r\n    ngOnInit() {\r\n        this.userFormGroup = this.formBuilder.group({\r\n            phoneNumber:['', RxwebValidators.mask({mask:'(999)-999 9999' })], \r\n        });\r\n    }\r\n}\r\n",
        "html": "<div>\r\n  <form  [formGroup]=\"userFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label>Phone Number</label>\r\n      <input type=\"text\" formControlName=\"phoneNumber\" class=\"form-control\"  />\r\n     <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.phoneNumber.errors\">{{userFormGroup.controls.phoneNumber.errors.mask.message}}<br/></small>\t\r\n    </div>\r\n    <button [disabled]=\"!userFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n",
        "model": null,
        "modelName": null,
        "json": {}
    }
}