{"complete":{"notes":[],"component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup,Validators } from \"@angular/forms\"\r\nimport { AddressInfo } from './address-info.model';\r\n\r\n@Component({\r\n    selector: 'app-alphaAsync-complete-template-driven-validation-directives',\r\n    templateUrl: './alpha-async-complete.component.html'\r\n})\r\nexport class AlphaAsyncCompleteTemplateDrivenValidationDirectivesComponent implements OnInit {\r\n    addressinfo: AddressInfo\r\n\t\r\n    constructor(\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n       this.addressinfo= new AddressInfo()\r\n    }\r\n}\r\n","html":"<div>\r\n  <form #addressinfoForm = \"ngForm\" [rxwebForm]=\"addressinfoForm\" [model]=\"addressinfo\">\r\n    <div class=\"form-group\">\r\n      <label>Country Name</label>\r\n\t    <input type=\"text\" name=\"countryName\" [(ngModel)]=\"addressinfo.countryName\"  class=\"form-control\" rxalphaAsync/>\r\n\r\n\t   <small class=\"form-text text-danger\" *ngIf=\"addressinfoForm.controls?.countryName?.errors\">{{addressinfoForm.controls?.countryName?.errors?.alpha.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>City</label>\r\n\t    <input type=\"text\" name=\"cityName\" [(ngModel)]=\"addressinfo.cityName\"  class=\"form-control\" [rxalphaAsync]=\"{'conditionalExpression':'x => x.countryName ==\\'India\\''}\"/>\r\n\r\n      <small class=\"form-text text-muted\">If you want to apply conditional validation on 'City' then you need to add 'Country Name' input as 'India'.<br/></small>\r\n      <small class=\"form-text text-muted\">Conditional Expression with type 'string'<br/></small>\r\n\t   <small class=\"form-text text-danger\" *ngIf=\"addressinfoForm.controls?.cityName?.errors\">{{addressinfoForm.controls?.cityName?.errors?.alpha.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>SpanishCityName</label>\r\n\t    <input type=\"text\" name=\"spanishcityName\" [(ngModel)]=\"addressinfo.spanishcityName\"  class=\"form-control\" [rxalphaAsync]=\"{'locale':ValidationAlphabetLocale.spanish}\"/>\r\n\r\n      <small class=\"form-text text-muted\">It will allow spanish characters in the formControl<br/></small>\r\n\t   <small class=\"form-text text-danger\" *ngIf=\"addressinfoForm.controls?.spanishcityName?.errors\">{{addressinfoForm.controls?.spanishcityName?.errors?.alpha.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>State Name</label>\r\n\t    <input type=\"text\" name=\"stateName\" [(ngModel)]=\"addressinfo.stateName\"  class=\"form-control\" [rxalphaAsync]=\"{'allowWhiteSpace':true}\"/>\r\n\r\n      <small class=\"form-text text-muted\">This allowed whitespace in alphaAsync validation<br/></small>\r\n\t   <small class=\"form-text text-danger\" *ngIf=\"addressinfoForm.controls?.stateName?.errors\">{{addressinfoForm.controls?.stateName?.errors?.alpha.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>State Code</label>\r\n\t    <input type=\"text\" name=\"stateCode\" [(ngModel)]=\"addressinfo.stateCode\"  class=\"form-control\" [rxalphaAsync]=\"{'message':'You can enter only alphabets.'}\"/>\r\n\r\n      <small class=\"form-text text-muted\">Shows custom message<br/></small>\r\n\t   <small class=\"form-text text-danger\" *ngIf=\"addressinfoForm.controls?.stateCode?.errors\">{{addressinfoForm.controls?.stateCode?.errors?.alpha.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>City Code</label>\r\n\t    <input type=\"text\" name=\"cityCode\" [(ngModel)]=\"addressinfo.cityCode\"  class=\"form-control\" [rxalphaAsync]=\"{'messageKey':'alphaMessageKey'}\"/>\r\n\r\n      <small class=\"form-text text-muted\">custom message based on messageKey<br/></small>\r\n\t   <small class=\"form-text text-danger\" *ngIf=\"addressinfoForm.controls?.cityCode?.errors\">{{addressinfoForm.controls?.cityCode?.errors?.alpha.message}}<br/></small>\t\r\n    </div>\r\n    <button [disabled]=\"!addressinfoForm.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","model":"\r\nexport class AddressInfo {\r\n\r\n\tcountryName: string;\r\n\t\r\n\t\r\n\tcountryCode: string;\r\n\t\r\n\t\r\n\tcityName: string;\r\n\t\r\n\t\r\n\tspanishcityName: string;\r\n\t\r\n\t\r\n\tstateName: string;\r\n\t\r\n\t\r\n\tstateCode: string;\r\n\t\r\n\t\r\n\tcityCode: string;\r\n\t\r\n\t\r\n}\r\n","modelName":"address-info.model.ts","json":{}},"conditionalExpressionExampleFunction":{"notes":null,"component":null,"html":null,"model":"[alphaAsync]=\"{'conditionalExpression':(x,y) => x.countryName == \\'India\\'}\"","modelName":null,"json":{}},"conditionalExpression":{"notes":[],"component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup,Validators } from \"@angular/forms\"\r\nimport { AddressInfo } from './address-info.model';\r\n\r\n@Component({\r\n    selector: 'app-alphaAsync-conditionalExpression-template-driven-validation-directives',\r\n    templateUrl: './alpha-async-conditional-expression.component.html'\r\n})\r\nexport class AlphaAsyncConditionalExpressionTemplateDrivenValidationDirectivesComponent implements OnInit {\r\n    addressinfo: AddressInfo\r\n\t\r\n    constructor(\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n       this.addressinfo= new AddressInfo()\r\n    }\r\n}\r\n","html":"<div>\r\n  <form #addressinfoForm = \"ngForm\" [rxwebForm]=\"addressinfoForm\" [model]=\"addressinfo\">\r\n    <div class=\"form-group\">\r\n      <label>Country Name</label>\r\n\t    <input type=\"text\" name=\"countryName\" [(ngModel)]=\"addressinfo.countryName\"  class=\"form-control\" rxalphaAsync/>\r\n\r\n\t   <small class=\"form-text text-danger\" *ngIf=\"addressinfoForm.controls?.countryName?.errors\">{{addressinfoForm.controls?.countryName?.errors?.alpha.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>City</label>\r\n\t    <input type=\"text\" name=\"cityName\" [(ngModel)]=\"addressinfo.cityName\"  class=\"form-control\" [rxalphaAsync]=\"{'conditionalExpression':'x => x.countryName ==\\'India\\''}\"/>\r\n\r\n      <small class=\"form-text text-muted\">If you want to apply conditional validation on 'City' then you need to add 'Country Name' input as 'India'.<br/></small>\r\n      <small class=\"form-text text-muted\">Conditional Expression with type 'string'<br/></small>\r\n\t   <small class=\"form-text text-danger\" *ngIf=\"addressinfoForm.controls?.cityName?.errors\">{{addressinfoForm.controls?.cityName?.errors?.alpha.message}}<br/></small>\t\r\n    </div>\r\n    <button [disabled]=\"!addressinfoForm.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","model":"\r\nexport class AddressInfo {\r\n\r\n\tcountryName: string;\r\n\t\r\n\t\r\n\tcityName: string;\r\n\t\r\n\t\r\n\tcountryCode: string;\r\n\t\r\n\t\r\n}\r\n","modelName":"address-info.model.ts","json":{}},"conditionalExpressionExampleString":{"notes":null,"component":null,"html":null,"model":"[alphaAsync]=\"{'conditionalExpression':'x => x.countryName ==\\'India\\''}\"","modelName":null,"json":{}},"localeExample":{"notes":null,"component":null,"html":null,"model":"[alphaAsync]=\"{'locale':ValidationAlphabetLocale.spanish}\"","modelName":null,"json":{}},"locale":{"notes":[],"component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup,Validators } from \"@angular/forms\"\r\nimport { AddressInfo } from './address-info.model';\r\n\r\n@Component({\r\n    selector: 'app-alphaAsync-locale-template-driven-validation-directives',\r\n    templateUrl: './alpha-async-locale.component.html'\r\n})\r\nexport class AlphaAsyncLocaleTemplateDrivenValidationDirectivesComponent implements OnInit {\r\n    addressinfo: AddressInfo\r\n\t\r\n    constructor(\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n       this.addressinfo= new AddressInfo()\r\n    }\r\n}\r\n","html":"<div>\r\n  <form #addressinfoForm = \"ngForm\" [rxwebForm]=\"addressinfoForm\" [model]=\"addressinfo\">\r\n    <div class=\"form-group\">\r\n      <label>SpanishCityName</label>\r\n\t    <input type=\"text\" name=\"spanishcityName\" [(ngModel)]=\"addressinfo.spanishcityName\"  class=\"form-control\" [rxalphaAsync]=\"{'locale':ValidationAlphabetLocale.spanish}\"/>\r\n\r\n      <small class=\"form-text text-muted\">It will allow spanish characters in the formControl<br/></small>\r\n\t   <small class=\"form-text text-danger\" *ngIf=\"addressinfoForm.controls?.spanishcityName?.errors\">{{addressinfoForm.controls?.spanishcityName?.errors?.alpha.message}}<br/></small>\t\r\n    </div>\r\n    <button [disabled]=\"!addressinfoForm.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","model":"\r\nexport class AddressInfo {\r\n\r\n\tspanishcityName: string;\r\n\t\r\n\t\r\n}\r\n","modelName":"address-info.model.ts","json":{}},"allowWhiteSpaceExample":{"notes":null,"component":null,"html":null,"model":"[alphaAsync]=\"{'allowWhiteSpace':true}\"","modelName":null,"json":{}},"allowWhiteSpace":{"notes":[],"component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup,Validators } from \"@angular/forms\"\r\nimport { AddressInfo } from './address-info.model';\r\n\r\n@Component({\r\n    selector: 'app-alphaAsync-allowWhiteSpace-template-driven-validation-directives',\r\n    templateUrl: './alpha-async-allow-white-space.component.html'\r\n})\r\nexport class AlphaAsyncAllowWhiteSpaceTemplateDrivenValidationDirectivesComponent implements OnInit {\r\n    addressinfo: AddressInfo\r\n\t\r\n    constructor(\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n       this.addressinfo= new AddressInfo()\r\n    }\r\n}\r\n","html":"<div>\r\n  <form #addressinfoForm = \"ngForm\" [rxwebForm]=\"addressinfoForm\" [model]=\"addressinfo\">\r\n    <div class=\"form-group\">\r\n      <label>State Name</label>\r\n\t    <input type=\"text\" name=\"stateName\" [(ngModel)]=\"addressinfo.stateName\"  class=\"form-control\" [rxalphaAsync]=\"{'allowWhiteSpace':true}\"/>\r\n\r\n      <small class=\"form-text text-muted\">This allowed whitespace in alphaAsync validation<br/></small>\r\n\t   <small class=\"form-text text-danger\" *ngIf=\"addressinfoForm.controls?.stateName?.errors\">{{addressinfoForm.controls?.stateName?.errors?.alpha.message}}<br/></small>\t\r\n    </div>\r\n    <button [disabled]=\"!addressinfoForm.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","model":"\r\nexport class AddressInfo {\r\n\r\n\tstateName: string;\r\n\t\r\n\t\r\n}\r\n","modelName":"address-info.model.ts","json":{}},"messageExample":{"notes":null,"component":null,"html":null,"model":"[alphaAsync]=\"{'message':'You can enter only alphabets.'}\"","modelName":null,"json":{}},"message":{"notes":[],"component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup,Validators } from \"@angular/forms\"\r\nimport { AddressInfo } from './address-info.model';\r\n\r\n@Component({\r\n    selector: 'app-alphaAsync-message-template-driven-validation-directives',\r\n    templateUrl: './alpha-async-message.component.html'\r\n})\r\nexport class AlphaAsyncMessageTemplateDrivenValidationDirectivesComponent implements OnInit {\r\n    addressinfo: AddressInfo\r\n\t\r\n    constructor(\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n       this.addressinfo= new AddressInfo()\r\n    }\r\n}\r\n","html":"<div>\r\n  <form #addressinfoForm = \"ngForm\" [rxwebForm]=\"addressinfoForm\" [model]=\"addressinfo\">\r\n    <div class=\"form-group\">\r\n      <label>State Code</label>\r\n\t    <input type=\"text\" name=\"stateCode\" [(ngModel)]=\"addressinfo.stateCode\"  class=\"form-control\" [rxalphaAsync]=\"{'message':'You can enter only alphabets.'}\"/>\r\n\r\n      <small class=\"form-text text-muted\">Shows custom message<br/></small>\r\n\t   <small class=\"form-text text-danger\" *ngIf=\"addressinfoForm.controls?.stateCode?.errors\">{{addressinfoForm.controls?.stateCode?.errors?.alpha.message}}<br/></small>\t\r\n    </div>\r\n    <button [disabled]=\"!addressinfoForm.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","model":"\r\nexport class AddressInfo {\r\n\r\n\tstateCode: string;\r\n\t\r\n\t\r\n}\r\n","modelName":"address-info.model.ts","json":{}},"messageKeyExample":{"notes":null,"component":null,"html":null,"model":"[alphaAsync]=\"{'messageKey':'alphaMessageKey'}\"","modelName":null,"json":{}},"messageKey":{"notes":[],"component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup,Validators } from \"@angular/forms\"\r\nimport { AddressInfo } from './address-info.model';\r\n\r\n@Component({\r\n    selector: 'app-alphaAsync-messageKey-template-driven-validation-directives',\r\n    templateUrl: './alpha-async-message-key.component.html'\r\n})\r\nexport class AlphaAsyncMessageKeyTemplateDrivenValidationDirectivesComponent implements OnInit {\r\n    addressinfo: AddressInfo\r\n\t\r\n    constructor(\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n       this.addressinfo= new AddressInfo()\r\n    }\r\n}\r\n","html":"<div>\r\n  <form #addressinfoForm = \"ngForm\" [rxwebForm]=\"addressinfoForm\" [model]=\"addressinfo\">\r\n    <div class=\"form-group\">\r\n      <label>City Code</label>\r\n\t    <input type=\"text\" name=\"cityCode\" [(ngModel)]=\"addressinfo.cityCode\"  class=\"form-control\" [rxalphaAsync]=\"{'messageKey':'alphaMessageKey'}\"/>\r\n\r\n      <small class=\"form-text text-muted\">custom message based on messageKey<br/></small>\r\n\t   <small class=\"form-text text-danger\" *ngIf=\"addressinfoForm.controls?.cityCode?.errors\">{{addressinfoForm.controls?.cityCode?.errors?.alpha.message}}<br/></small>\t\r\n    </div>\r\n    <button [disabled]=\"!addressinfoForm.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","model":"\r\nexport class AddressInfo {\r\n\r\n\tcityCode: string;\r\n\t\r\n\t\r\n}\r\n","modelName":"address-info.model.ts","json":{}},"add":{"notes":[],"component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup,Validators } from \"@angular/forms\"\r\nimport { Country } from './country.model';\r\n\r\n@Component({\r\n    selector: 'app-alphaAsync-add-template-driven-validation-directives',\r\n    templateUrl: './alpha-async-add.component.html'\r\n})\r\nexport class AlphaAsyncAddTemplateDrivenValidationDirectivesComponent implements OnInit {\r\n    country: Country\r\n\t\r\n    constructor(\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n       this.country= new Country()\r\n    }\r\n}\r\n","html":"<div>\r\n  <form #countryForm = \"ngForm\" [rxwebForm]=\"countryForm\" [model]=\"country\">\r\n    <div class=\"form-group\">\r\n      <label>Country Name</label>\r\n\t    <input type=\"text\" name=\"countryName\" [(ngModel)]=\"country.countryName\"  class=\"form-control\" rxalphaAsync/>\r\n\r\n\t   <small class=\"form-text text-danger\" *ngIf=\"countryForm.controls?.countryName?.errors\">{{countryForm.controls?.countryName?.errors?.alpha.message}}<br/></small>\t\r\n    </div>\r\n    <button [disabled]=\"!countryForm.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","model":"\r\nexport class Country {\r\n\r\n\tcountryName: string;\r\n\t\r\n\t\r\n}\r\n","modelName":"country.model.ts","json":{}}}