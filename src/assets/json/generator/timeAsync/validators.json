{"rightSidebarLinks":[{"id":"timeasync","title":"timeAsync","subLink":null},{"id":"whentouse","title":"When to use","subLink":[]},{"id":"basictimeasyncvalidation","title":"Basic timeAsync Validation","subLink":[]},{"id":"timeasyncconfig","title":"timeAsyncConfig","subLink":[{"title":"allowSeconds","id":"allowseconds","thirdLevelLink":[]},{"title":"message","id":"message","thirdLevelLink":[]},{"title":"messageKey","id":"messagekey","thirdLevelLink":[]}]},{"id":"completetimeasyncexample","title":"Complete timeAsync Example","subLink":[]}],"title":"timeAsync","description":"timeAsync validation  validators  will allow user to enter the input only in the correct timeAsync format.","validatorType":"validators","validationTypeTitle":"Validators","type":"tabs","gitDocPath":"https://github.com/rxweb/rxweb.io/edit/master/docs/angular/reactive-forms/reactive-form-validators/async-validators/timeAsync.md","category":"async-validators","subCategory":"Date and timeAsync","linkTitle":"timeAsync","tabArray":{"complete":[{"tabName":"Example","tabGroupContent":null,"content":"<div component=\"app-example-runner\" ref-component=\"app-timeAsync-complete\"></div>\r\n"},{"tabName":"Component","tabGroupContent":null,"content":"<div component=\"app-code\" key=\"timeAsync-complete-component\"></div> \r\n"},{"tabName":"Html","tabGroupContent":null,"content":"<div component=\"app-code\" key=\"timeAsync-complete-html\"></div> \r\n"}]},"innerHtml":null,"htmlContent":"<div class=\"title-bar top_title\"><p>timeAsync</p></div> <div class=\"title-bar\"><p>timeAsync validation  validator  will allow user to enter the input only in the correct time format asynchronously.</p></div>\r\n<div class='row page-section' id= 'whentouse'>\r\n<div class='col-lg-12'>\r\n<h2 class='showHideElement' >When to use<a title='Link to this heading' class='link-header' href='/async-validators/timeAsync/validators#whentouse'><i class='fa fa-link'></i></a></h2>\r\n\r\n<p class='showHideElement' >Suppose you want to create a AttendanceDetail form, which contains field of EntryPlace, EntrytimeAsync, TotaltimeAsyncOut and Exit timeAsync you want the user to enter valid time asynchronously. Here depending upon the requirement these scenarios may arise.</p>\r\n<ol class='showHideElement'>\r\n<li>Allow timeAsync in EntrytimeAsync without seconds.</li>\r\n<li>Allowing seconds in TotaltimeAsyncOut.</li>\r\n<li>Adding Custom Message on exittimeAsync Field.</li>\r\n<li>Shows the custom message on <span class='highlighted'>Net In timeAsync</span> field by using <span class='highlighted'>messageKey</span> property.</li>\r\n<li>Apply timeAsync validation dynamically based on server rules.</li>\r\n</ol>\r\n<p class='showHideElement' >Letâ€™s see how timeAsync validator fulfil the need.</p>\r\n</div></div>\r\n<div class='row page-section' id= 'basictimeasyncvalidation'>\r\n<div class='col-lg-12'>\r\n<h2>Basic timeAsync Validation<a title='Link to this heading' class='link-header' href='/async-validators/timeAsync/validators#basictimeasyncvalidation'><i class='fa fa-link'></i></a></h2>\r\n\r\n<p class='showHideElement' >Through Angular FormBuilder service we create FormGroup in the component.</p>\r\n<p class='showHideElement' >Here we have covered Add form operations. </p>\r\n<div component=\"app-code\" key=\"timeAsync-add-component\"></div> \r\n<p class='showHideElement' >Next, we need to write html code.</p>\r\n<div component=\"app-code\" key=\"timeAsync-add-html\"></div> \r\n<div component=\"app-example-runner\" ref-component=\"app-timeAsync-add\"></div>\r\n</div></div>\r\n<div class='row page-section' id= 'timeasyncconfig'>\r\n<div class='col-lg-12'>\r\n<h2>timeAsyncConfig<a title='Link to this heading' class='link-header' href='/async-validators/timeAsync/validators#timeasyncconfig'><i class='fa fa-link'></i></a></h2>\r\n\r\n<p class='showHideElement' >Below options are not mandatory to use in the <span class='highlighted'>RxwebValidators.timeAsync({validatorConfig:of({validatorConfig:of({&ltproperty_name&gt:&ltvalue&gt})})</span> validator. If needed then use the below options.</p>\r\n<table class=\"table table-bordered table-striped showHideElement\">\r\n<tr><th>Option</th><th>Description</th></tr>\r\n<tr><td><a (click)='scrollTo(\"#allowseconds\")' title=\"allowseconds\">allowseconds</a></td><td>If you are allowed seconds in timeAsync format then you need to put this as true.</td></tr>\r\n<tr><td><a (click)='scrollTo(\"#message\")' title=\"message\">message</a></td><td>To override the global configuration message and set the custom error message on respective FormControl</td></tr>\r\n<tr><td><a (click)='scrollTo(\"#messageKey\")' title=\"messageKey\">messageKey</a></td><td>messageKey property of BaseConfig can be used when the user wants to show a different custom validation message on some of their fields. User can define a custom messageKey globally by defining it in ReactiveFormConfig and set it in the message property of the validation.</td></tr>\r\n</table >\r\n</div></div>\r\n<div class='row page-section' id= 'allowseconds'>\r\n<div class='col-lg-12'>\r\n<h2>allowSeconds<a title='Link to this heading' class='link-header' href='/async-validators/timeAsync/validators#allowseconds'><i class='fa fa-link'></i></a></h2>\r\n\r\n<p class='showHideElement' >Type :  <span class='highlighted'>boolean</span> </p>\r\n<p class='showHideElement' >If you are allowed seconds in timeAsync format then you need to put this as true.</p>\r\n<div component=\"app-code\" key=\"timeAsync-allowSecondsExample-model\"></div> \r\n<div component=\"app-example-runner\" ref-component=\"app-timeAsync-allowSeconds\" title=\"timeAsync validator with allowSeconds\" key=\"allowSeconds\"></div>\r\n</div></div>\r\n<div class='row page-section' id= 'message'>\r\n<div class='col-lg-12'>\r\n<h2>message<a title='Link to this heading' class='link-header' href='/async-validators/timeAsync/validators#message'><i class='fa fa-link'></i></a></h2>\r\n\r\n<p class='showHideElement' >Type :  <span class='highlighted'>string</span> </p>\r\n<p class='showHideElement' >To override the global configuration message and set the custom message on respective FormControl.</p>\r\n<div component=\"app-code\" key=\"timeAsync-messageExample-model\"></div> \r\n<div component=\"app-example-runner\" ref-component=\"app-timeAsync-message\" title=\"timeAsync validator with message\" key=\"message\"></div>\r\n</div></div>\r\n<div class='row page-section' id= 'messagekey'>\r\n<div class='col-lg-12'>\r\n<h2>messageKey<a title='Link to this heading' class='link-header' href='/async-validators/timeAsync/validators#messagekey'><i class='fa fa-link'></i></a></h2>\r\n\r\n<p class='showHideElement' >Type : <span class='highlighted'>string</span></p>\r\n<p class='showHideElement' >messageKey property of BaseConfig can be used when the user wants to show a different custom validation message on some of their fields. User can define a custom messageKey globally by defining it in ReactiveFormConfig and set it in the message property of the validation.</p>\r\n<div component=\"app-code\" key=\"timeAsync-messageKeyExample-model\"></div> \r\n<div component=\"app-example-runner\" ref-component=\"app-timeAsync-messageKey\" title=\"timeAsync validator with messageKey\" key=\"messageKey\"></div>\r\n</div></div>\r\n<div class='row page-section' id= 'completetimeasyncexample'>\r\n<div class='col-lg-12'>\r\n<h2>Complete timeAsync Example<a title='Link to this heading' class='link-header' href='/async-validators/timeAsync/validators#completetimeasyncexample'><i class='fa fa-link'></i></a></h2>\r\n\r\n<p class='showHideElement' >This Complete timeAsync example which includes all the timeAsyncConfig properties will fulfil the requirement of scenarios 1, 2, 3, 4 and 5.</p>\r\n<div component=\"app-tabs\" key=\"complete\"></div>\r\n</div></div>\r\n"}