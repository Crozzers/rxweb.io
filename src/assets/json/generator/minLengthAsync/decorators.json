{"rightSidebarLinks":[{"id":"minlengthasync","title":"minLengthAsync","subLink":null},{"id":"whentouse","title":"When to use","subLink":[]},{"id":"basicminlengthasyncvalidation","title":"Basic minLengthAsync Validation","subLink":[]},{"id":"validatorconfig","title":"ValidatorConfig","subLink":[{"title":"message","id":"message","thirdLevelLink":[]},{"title":"messageKey","id":"messagekey","thirdLevelLink":[]},{"title":"value","id":"value","thirdLevelLink":[]}]},{"id":"completeminlengthasyncexample","title":"Complete minLengthAsync Example","subLink":[]},{"id":"dynamicminlengthasyncexample","title":"Dynamic minLengthAsync Example","subLink":[]}],"title":"minLengthAsync","description":"minLengthAsync validation  decorators  will allow user to enter the input length matching the minimum length value parameter.","validatorType":"decorators","validationTypeTitle":"Decorators","type":"tabs","gitDocPath":"https://github.com/rxweb/rxweb.io/edit/master/docs/angular/reactive-forms/reactive-form-validators/async-validators/minLengthAsync.md","category":"async-validators","subCategory":"String","linkTitle":"minLengthAsync","tabArray":{"basic-operations":[{"tabName":"Add","tabGroupContent":null,"content":"<div component=\"app-code\" key=\"minLengthAsync-add-component\"></div> \r\n<p class='showHideElement' >Next, we need to write html code.</p>\r\n<div component=\"app-code\" key=\"minLengthAsync-add-html\"></div> \r\n<div component=\"app-example-runner\" ref-component=\"app-minLengthAsync-add\"></div>\r\n"},{"tabName":"Edit","tabGroupContent":null,"content":"<div component=\"app-code\" key=\"minLengthAsync-edit-component\"></div> \r\n<p class='showHideElement' >The below code is `contact-data.json` for getting data from the server</p>\r\n<div component=\"app-code\" key=\"minLengthAsync-edit-json\"></div> \r\n<p class='showHideElement' >Next, we need to write html code.</p>\r\n<div component=\"app-code\" key=\"minLengthAsync-edit-html\"></div> \r\n<div component=\"app-example-runner\" ref-component=\"app-minLengthAsync-edit\"></div>\r\n"}],"complete":[{"tabName":"Example","tabGroupContent":null,"content":"<div component=\"app-example-runner\" ref-component=\"app-minLengthAsync-complete\"></div>\r\n"},{"tabName":"Model","tabGroupContent":null,"content":"<div component=\"app-code\" key=\"minLengthAsync-complete-model\"></div> \r\n"},{"tabName":"Component","tabGroupContent":null,"content":"<div component=\"app-code\" key=\"minLengthAsync-complete-component\"></div> \r\n"},{"tabName":"Html","tabGroupContent":null,"content":"<div component=\"app-code\" key=\"minLengthAsync-complete-html\"></div> \r\n"}],"dynamic":[{"tabName":"Example","tabGroupContent":null,"content":"<div component=\"app-example-runner\" ref-component=\"app-minLengthAsync-dynamic\"></div>\r\n"},{"tabName":"Model","tabGroupContent":null,"content":"<div component=\"app-code\" key=\"minLengthAsync-dynamic-model\"></div>\r\n"},{"tabName":"Component","tabGroupContent":null,"content":"<div component=\"app-code\" key=\"minLengthAsync-dynamic-component\"></div>\r\n"},{"tabName":"Json","tabGroupContent":null,"content":"<div component=\"app-code\" key=\"minLengthAsync-dynamic-json\"></div>\r\n"},{"tabName":"Html","tabGroupContent":null,"content":"<div component=\"app-code\" key=\"minLengthAsync-dynamic-html\"></div> \r\n"}]},"innerHtml":null,"htmlContent":"<div class=\"title-bar top_title\"><p>minLengthAsync</p></div> <div class=\"title-bar\"><p>minLengthAsync validation  decorator  will allow user to enter the input length matching the minimum length value parameter asynchronously.</p></div>\r\n<div class='row page-section' id= 'whentouse'>\r\n<div class='col-lg-12'>\r\n<h2 class='showHideElement' >When to use<a title='Link to this heading' class='link-header'  href='/async-validators/minLengthAsync/decorators#whentouse'><i class='fa fa-link'></i></a></h2>\r\n\r\n<p class='showHideElement' >Suppose you want to create a Contact form, which contains fields like countryName, MobileNo, LandlineNo and you want the user to enter valid  Number which should be of the minimum specified length asynchronously. Here depending upon the requirement these scenarios may arise.</p>\r\n<ol class='showHideElement'>\r\n<li>Apply minLengthAsync validation based on matched condition in the form, like if the CountryName is ‘India’ then the countryCode value  should be of the minimum specified length.</li>\r\n<li>Adding Custom Message on LandlineNo Field.</li>\r\n<li>Adding value which you want to restrict number in the property. The Minimum length is '10'. </li>\r\n  <li>Shows the custom message on <span class='highlighted'>State Name</span> field by using <span class='highlighted'>messageKey</span> property.</li>\r\n<li>Apply minLengthAsync validation dynamically based on server rules.</li>\r\n</ol>\r\n<p class='showHideElement' >Let’s see how minLengthAsync decorator fulfil the need.</p>\r\n</div></div>\r\n<div class='row page-section' id= 'basicminlengthasyncvalidation'>\r\n<div class='col-lg-12'>\r\n<h2>Basic minLengthAsync Validation<a title='Link to this heading' class='link-header'  href='/async-validators/minLengthAsync/decorators#basicminlengthasyncvalidation'><i class='fa fa-link'></i></a></h2>\r\n\r\n<p class='showHideElement' >First we need to create Contact model class define a property of CountryName in the model to achieve the functional need of point 1.</p>\r\n<div component=\"app-code\" key=\"minLengthAsync-add-model\"></div> \r\n<p class='showHideElement' >Through Angular FormBuilder service we create FormGroup in the component.</p>\r\n<p class='showHideElement' >Here we have covered Add and Edit form operations. </p>\r\n<div component=\"app-tabs\" key=\"basic-operations\"></div>\r\n</div></div>\r\n<div class='row page-section' id= 'validatorconfig'>\r\n<div class='col-lg-12'>\r\n<h2>ValidatorConfig<a title='Link to this heading' class='link-header'  href='/async-validators/minLengthAsync/decorators#validatorconfig'><i class='fa fa-link'></i></a></h2>\r\n\r\n<p class='showHideElement' >Type : <span class='highlighted'>Observable</span></p>\r\n<p class='showHideElement' >validator config is used to dynamically resolve the value of the property according to the server rules by using the keyword <span class='highlighted'>of</span> as below </p>\r\n<p class='showHideElement' >Below options are not mandatory to use in the <span class='highlighted'>@minLengthAsync({validatorConfig:of({&ltproperty_name&gt:&ltvalue&gt})})</span> decorator. If needed then use the below options.</p>\r\n<table class=\"table table-bordered table-striped showHideElement\">\r\n<tr><th>Option</th><th>Description</th></tr>\r\n<tr><td><a  (click)='scrollTo(\"#message\")' title=\"message\">message</a></td><td>To override the global configuration message and set the custom error message on respective FormControl</td></tr>\r\n<tr><td><a (click)='scrollTo(\"#messageKey\")' title=\"messageKey\">messageKey</a></td><td>messageKey property of BaseConfig can be used when the user wants to show a different custom validation message on some of their fields. User can define a custom messageKey globally by defining it in ReactiveFormConfig and set it in the message property of the validation.</td></tr>\r\n<tr><td><a (click)='scrollTo(\"#value\")' title=\"value\">value</a></td><td>Enter value which you want to restrict string length in the property</td></tr>\r\n</table>\r\n</div></div>\r\n<div class='row page-section' id= 'message'>\r\n<div class='col-lg-12'>\r\n<h2>message<a title='Link to this heading' class='link-header'  href='/async-validators/minLengthAsync/decorators#message'><i class='fa fa-link'></i></a></h2>\r\n\r\n<p class='showHideElement' >Type :  <span class='highlighted'>string</span> </p>\r\n<p class='showHideElement' >To override the global configuration message and set the custom error message on respective FormControl</p>\r\n<div component=\"app-code\" key=\"minLengthAsync-messageExample-model\"></div> \r\n<div component=\"app-example-runner\" ref-component=\"app-minLengthAsync-message\" title=\"minLengthAsync decorator with message\" key=\"message\"></div>\r\n</div></div>\r\n<div class='row page-section' id= 'messagekey'>\r\n<div class='col-lg-12'>\r\n<h2>messageKey<a title='Link to this heading' class='link-header'  href='/async-validators/minLengthAsync/decorators#messagekey'><i class='fa fa-link'></i></a></h2>\r\n\r\n<p class='showHideElement' >Type : <span class='highlighted'>string</span></p>\r\n<p class='showHideElement' >messageKey property of BaseConfig can be used when the user wants to show a different custom validation message on some of their fields. User can define a custom messageKey globally by defining it in ReactiveFormConfig and set it in the message property of the validation.</p>\r\n<div component=\"app-code\" key=\"minLengthAsync-messageKeyExample-model\"></div> \r\n<div component=\"app-example-runner\" ref-component=\"app-minLengthAsync-messageKey\" title=\"minLengthAsync decorator with messageKey\" key=\"messageKey\"></div>\r\n</div></div>\r\n<div class='row page-section' id= 'value'>\r\n<div class='col-lg-12'>\r\n<h2>value<a title='Link to this heading' class='link-header'  href='/async-validators/minLengthAsync/decorators#value'><i class='fa fa-link'></i></a></h2>\r\n\r\n<p class='showHideElement' >Type :  <span class='highlighted'>number</span> </p>\r\n<p class='showHideElement' >enter value which you want to restrict string length in the property.</p>\r\n<div component=\"app-code\" key=\"minLengthAsync-valueExample-model\"></div> \r\n<div component=\"app-example-runner\" ref-component=\"app-minLengthAsync-value\" title=\"minLengthAsync decorator with value\" key=\"value\"></div>\r\n</div></div>\r\n<div class='row page-section' id= 'completeminlengthasyncexample'>\r\n<div class='col-lg-12'>\r\n<h2>Complete minLengthAsync Example<a title='Link to this heading' class='link-header'  href='/async-validators/minLengthAsync/decorators#completeminlengthasyncexample'><i class='fa fa-link'></i></a></h2>\r\n\r\n<p class='showHideElement' >This Complete minLengthAsync example which includes all the NumberConfig properties will fulfil the requirement of scenarios 1, 2 and 3.</p>\r\n<div component=\"app-tabs\" key=\"complete\"></div>\r\n</div></div>\r\n<div class='row page-section' id= 'dynamicminlengthasyncexample'>\r\n<div class='col-lg-12'>\r\n<h2>Dynamic minLengthAsync Example<a title='Link to this heading' class='link-header' href='/async-validators/minLengthAsync#dynamicminlengthasyncexample'><i class='fa fa-link'></i></a></h2>\r\n\r\n<p class='showHideElement' >This Dynamic minLengthAsync example is executed on the basis of json passed in the formBuilderConfiguration which comes under <span class='highlighted'>RxFormBuilder</span> of reactive-form-validators. <span class='highlighted'>conditionalExpression</span> with function would not be applied in dynamic minLengthAsync example. This example will fulfil the requirement of our last point.</p>\r\n<div component=\"app-tabs\" key=\"dynamic\"></div>\r\n</div></div>\r\n"}