{
    "access": {
        "notes": [],
        "component": "@access({ accessLevel: 1, action: \"add\" })\r\n@Component({\r\n    selector: 'app-user-add',\r\n    template: 'User Add <label>xyz<\/label>'\r\n})\r\nexport class UserAddComponent implements OnInit {\r\n\r\n\r\n    constructor() }\r\n\r\n    ngOnInit() {\r\n       \r\n        console.log(\"user add component called\");\r\n    }\r\n\r\n}",
        "html": "<div>\r\n  <form  [formGroup]=\"addressInfoFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label>Country Name</label>\r\n      <input type=\"text\" formControlName=\"countryName\" class=\"form-control\"  />\r\n     <small class=\"form-text text-danger\" *ngIf=\"addressInfoFormGroup.controls.countryName.errors\">{{addressInfoFormGroup.controls.countryName.errors.alpha.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Country Code</label>\r\n      <input type=\"text\" formControlName=\"countryCode\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Country Code' then you need to add 'Country Name' input as 'India'.<br/></small>\r\n      <small class=\"form-text text-muted\">Conditional Expression with type 'function'<br/></small>\r\n     <small class=\"form-text text-danger\" *ngIf=\"addressInfoFormGroup.controls.countryCode.errors\">{{addressInfoFormGroup.controls.countryCode.errors.alpha.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>City</label>\r\n      <input type=\"text\" formControlName=\"cityName\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">If you want to apply conditional validation on 'City' then you need to add 'Country Name' input as 'India'.<br/></small>\r\n      <small class=\"form-text text-muted\">Conditional Expression with type 'string'<br/></small>\r\n     <small class=\"form-text text-danger\" *ngIf=\"addressInfoFormGroup.controls.cityName.errors\">{{addressInfoFormGroup.controls.cityName.errors.alpha.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>SpanishCityName</label>\r\n      <input type=\"text\" formControlName=\"spanishcityName\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">It will allow spanish characters in the formControl<br/></small>\r\n     <small class=\"form-text text-danger\" *ngIf=\"addressInfoFormGroup.controls.spanishcityName.errors\">{{addressInfoFormGroup.controls.spanishcityName.errors.alpha.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>State Name</label>\r\n      <input type=\"text\" formControlName=\"stateName\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">This allowed whitespace in alpha validation<br/></small>\r\n     <small class=\"form-text text-danger\" *ngIf=\"addressInfoFormGroup.controls.stateName.errors\">{{addressInfoFormGroup.controls.stateName.errors.alpha.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>State Code</label>\r\n      <input type=\"text\" formControlName=\"stateCode\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">Shows custom message<br/></small>\r\n     <small class=\"form-text text-danger\" *ngIf=\"addressInfoFormGroup.controls.stateCode.errors\">{{addressInfoFormGroup.controls.stateCode.errors.alpha.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>City Code</label>\r\n      <input type=\"text\" formControlName=\"cityCode\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">custom message based on messageKey<br/></small>\r\n     <small class=\"form-text text-danger\" *ngIf=\"addressInfoFormGroup.controls.cityCode.errors\">{{addressInfoFormGroup.controls.cityCode.errors.alphaMessageKey.message}}<br/></small>\t\t\r\n    </div>\r\n    <button [disabled]=\"!addressInfoFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n",
        "model": "@access({ accessLevel: 1, action: \"add\" })",
        "modelName": null,
        "json": {}
    },
    "anonymous": {
        "notes": [],
        "component": "@anonymous()\r\n@Component({\r\n    templateUrl: '.\/login.component.html',\r\n})\r\nexport class LoginComponent  implements OnInit {\r\n\r\n ngOnInit(): void {\r\n       \r\n    }\r\n\t\r\n}",
        "html": "<div>\r\n  <form  [formGroup]=\"addressInfoFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label>Country Name</label>\r\n      <input type=\"text\" formControlName=\"countryName\" class=\"form-control\"  />\r\n     <small class=\"form-text text-danger\" *ngIf=\"addressInfoFormGroup.controls.countryName.errors\">{{addressInfoFormGroup.controls.countryName.errors.alpha.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Country Code</label>\r\n      <input type=\"text\" formControlName=\"countryCode\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Country Code' then you need to add 'Country Name' input as 'India'.<br/></small>\r\n      <small class=\"form-text text-muted\">Conditional Expression with type 'function'<br/></small>\r\n     <small class=\"form-text text-danger\" *ngIf=\"addressInfoFormGroup.controls.countryCode.errors\">{{addressInfoFormGroup.controls.countryCode.errors.alpha.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>City</label>\r\n      <input type=\"text\" formControlName=\"cityName\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">If you want to apply conditional validation on 'City' then you need to add 'Country Name' input as 'India'.<br/></small>\r\n      <small class=\"form-text text-muted\">Conditional Expression with type 'string'<br/></small>\r\n     <small class=\"form-text text-danger\" *ngIf=\"addressInfoFormGroup.controls.cityName.errors\">{{addressInfoFormGroup.controls.cityName.errors.alpha.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>SpanishCityName</label>\r\n      <input type=\"text\" formControlName=\"spanishcityName\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">It will allow spanish characters in the formControl<br/></small>\r\n     <small class=\"form-text text-danger\" *ngIf=\"addressInfoFormGroup.controls.spanishcityName.errors\">{{addressInfoFormGroup.controls.spanishcityName.errors.alpha.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>State Name</label>\r\n      <input type=\"text\" formControlName=\"stateName\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">This allowed whitespace in alpha validation<br/></small>\r\n     <small class=\"form-text text-danger\" *ngIf=\"addressInfoFormGroup.controls.stateName.errors\">{{addressInfoFormGroup.controls.stateName.errors.alpha.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>State Code</label>\r\n      <input type=\"text\" formControlName=\"stateCode\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">Shows custom message<br/></small>\r\n     <small class=\"form-text text-danger\" *ngIf=\"addressInfoFormGroup.controls.stateCode.errors\">{{addressInfoFormGroup.controls.stateCode.errors.alpha.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>City Code</label>\r\n      <input type=\"text\" formControlName=\"cityCode\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">custom message based on messageKey<br/></small>\r\n     <small class=\"form-text text-danger\" *ngIf=\"addressInfoFormGroup.controls.cityCode.errors\">{{addressInfoFormGroup.controls.cityCode.errors.alphaMessageKey.message}}<br/></small>\t\t\r\n    </div>\r\n    <button [disabled]=\"!addressInfoFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n",
        "model": "\r\n@anonymous()\r\n",
        "modelName": null,
        "json": {}
    },
    "middleware": {
        "notes": [],
        "component": "@middleware([LoggedInMiddleware])\r\n@anonymous()\r\n@Component({\r\n    templateUrl: '.\/login.component.html',\r\n})\r\nexport class LoginComponent  implements OnInit {\r\n\r\n ngOnInit(): void {\r\n       \r\n    }\r\n\t\r\n}",
        "html": "<div>\r\n  <form  [formGroup]=\"addressInfoFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label>Country Name</label>\r\n      <input type=\"text\" formControlName=\"countryName\" class=\"form-control\"  />\r\n     <small class=\"form-text text-danger\" *ngIf=\"addressInfoFormGroup.controls.countryName.errors\">{{addressInfoFormGroup.controls.countryName.errors.alpha.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Country Code</label>\r\n      <input type=\"text\" formControlName=\"countryCode\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Country Code' then you need to add 'Country Name' input as 'India'.<br/></small>\r\n      <small class=\"form-text text-muted\">Conditional Expression with type 'function'<br/></small>\r\n     <small class=\"form-text text-danger\" *ngIf=\"addressInfoFormGroup.controls.countryCode.errors\">{{addressInfoFormGroup.controls.countryCode.errors.alpha.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>City</label>\r\n      <input type=\"text\" formControlName=\"cityName\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">If you want to apply conditional validation on 'City' then you need to add 'Country Name' input as 'India'.<br/></small>\r\n      <small class=\"form-text text-muted\">Conditional Expression with type 'string'<br/></small>\r\n     <small class=\"form-text text-danger\" *ngIf=\"addressInfoFormGroup.controls.cityName.errors\">{{addressInfoFormGroup.controls.cityName.errors.alpha.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>SpanishCityName</label>\r\n      <input type=\"text\" formControlName=\"spanishcityName\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">It will allow spanish characters in the formControl<br/></small>\r\n     <small class=\"form-text text-danger\" *ngIf=\"addressInfoFormGroup.controls.spanishcityName.errors\">{{addressInfoFormGroup.controls.spanishcityName.errors.alpha.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>State Name</label>\r\n      <input type=\"text\" formControlName=\"stateName\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">This allowed whitespace in alpha validation<br/></small>\r\n     <small class=\"form-text text-danger\" *ngIf=\"addressInfoFormGroup.controls.stateName.errors\">{{addressInfoFormGroup.controls.stateName.errors.alpha.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>State Code</label>\r\n      <input type=\"text\" formControlName=\"stateCode\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">Shows custom message<br/></small>\r\n     <small class=\"form-text text-danger\" *ngIf=\"addressInfoFormGroup.controls.stateCode.errors\">{{addressInfoFormGroup.controls.stateCode.errors.alpha.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>City Code</label>\r\n      <input type=\"text\" formControlName=\"cityCode\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">custom message based on messageKey<br/></small>\r\n     <small class=\"form-text text-danger\" *ngIf=\"addressInfoFormGroup.controls.cityCode.errors\">{{addressInfoFormGroup.controls.cityCode.errors.alphaMessageKey.message}}<br/></small>\t\t\r\n    </div>\r\n    <button [disabled]=\"!addressInfoFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n",
        "model": "@middleware([LoggedInMiddleware])",
        "modelName": null,
        "json": {}
    },
    "complete": {
   
        "component": "@routerModule({\r\n    authentication: AuthResolver,\r\n    authorization: AuthorizationResolver,\r\n    middlewares: [GlobalMultilingualContentResolver, ComponentMultilingualContentResolver],\r\n    urlEncryption:true\r\n})"
      
    },
    "authentication": {
       
        "component": "import { Injectable } from '@angular\/core';\r\nimport { IAuthResolver } from '@rxweb\/angular-router'\r\n\r\n@Injectable({\r\n    providedIn: 'root',\r\n})\r\nexport class AuthResolver implements IAuthResolver {\r\n\r\n    resolveAuth(): Promise<{ [key: string]: any; }> | { [key: string]: any; } {\r\n        var promise = new Promise<{ [key: string]: any; }>((resolve, reject) => {\r\n            resolve(undefined)\r\n        })\r\n        return promise;\r\n    }\r\n}"
      
    },
    "authorize": {
       
        "component": "import { Injectable } from '@angular\/core';\r\nimport { IAuthorize, AuthorizeConfig } from '@rxweb\/angular-router';\r\nimport { Router, ActivatedRouteSnapshot } from '@angular\/router';\r\n\r\n@Injectable({\r\n    providedIn: 'root',\r\n})\r\nexport class AuthorizationResolver implements IAuthorize {\r\n\r\n    constructor(private router: Router) { }\r\n\r\n    authorize(authorizeConfig: AuthorizeConfig, route: ActivatedRouteSnapshot): Promise<boolean> | boolean {\r\n        var promise = new Promise<boolean>((resolve, reject) => {\r\n            var t = this;\r\n            console.log(\"call authorization\");\r\n            resolve(true);\r\n        })\r\n        return promise;\r\n    }\r\n\r\n    authorizeChildren(authorizeConfig: AuthorizeConfig, pageAuthorizeConfig: AuthorizeConfig) {\r\n        return false;\r\n    }\r\n}\r\n"
      
    },
    "middlewares": {
       
        "component": " middlewares: [GlobalMultilingualContentResolver, ComponentMultilingualContentResolver],"
      
    },
    "url": {
       
        "component": "urlEncryption:true"
      
    }

}