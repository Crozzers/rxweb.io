{"rightSidebarLinks":[{"id":"endswithasync","title":"endsWithAsync","subLink":null},{"id":"whentouse","title":"When to use","subLink":[]},{"id":"basicendswithasyncvalidation","title":"Basic endsWithAsync Validation","subLink":[]},{"id":"validatorconfig","title":"ValidatorConfig","subLink":[{"title":"message","id":"message","thirdLevelLink":[]},{"title":"messageKey","id":"messagekey","thirdLevelLink":[]},{"title":"value","id":"value","thirdLevelLink":[]}]},{"id":"completeendswithasyncexample","title":"Complete endsWithAsync Example","subLink":[]}],"title":"endsWithAsync","description":"endsWithAsync Async validation template driven allows user to validate the input which ends with particular value.","validatorType":"template-driven","validationTypeTitle":"Template Driven","type":"tabs","gitDocPath":"https://github.com/rxweb/rxweb.io/edit/master/docs/angular/reactive-forms/reactive-form-validators/async-validators/endsWithAsync.md","category":"async-validators","subCategory":null,"linkTitle":"endsWithAsync","tabArray":{"complete":[{"tabName":"Example","tabGroupContent":null,"content":"<div component=\"app-example-runner\" ref-component=\"app-endsWithAsync-complete\"></div>\r\n"},{"tabName":"Model","tabGroupContent":null,"content":"<div component=\"app-code\" key=\"endsWithAsync-complete-model\"></div> \r\n"},{"tabName":"Component","tabGroupContent":null,"content":"<div component=\"app-code\" key=\"endsWithAsync-complete-component\"></div> \r\n"},{"tabName":"Html","tabGroupContent":null,"content":"<div component=\"app-code\" key=\"endsWithAsync-complete-html\"></div> \r\n"}]},"innerHtml":null,"htmlContent":"<div class=\"title-bar top_title\"><p>endsWithAsync</p></div> <div class=\"title-bar\"><p>endsWithAsync Async validation template driven allows user to validate the input which ends with particular value asynchronously.</p></div>\r\n<div class='row page-section' id= 'whentouse'>\r\n<div class='col-lg-12'>\r\n<h2 class='showHideElement' >When to use<a title='Link to this heading' class='link-header' href='/async-validators/endsWithAsync/template-driven/directives#whentouse'><i class='fa fa-link'></i></a></h2>\r\n\r\n<p class='showHideElement' >Suppose you want to create a user form, which contains fields like name, profession, taskId and company and you want the user to enter input which ends with a particular value asynchronously. Here depending upon the requirement, these scenarios may arise..</p>\r\n<ol class='showHideElement'>\r\n  <li>Apply validation on name field in which you want the user to enter value which ends with ‘t’.</li>\r\n  <li>Adding custom validation message to the company field </li>\r\n  <li>Shows the custom message on <span class='highlighted'>Skill</span> field by using <span class='highlighted'>messageKey</span> property.</li>\r\n  <data-scope scope=\"['decorator','validator']\">\r\n    <li>Apply endsWithAsync validation dynamically based on server rules.</li>\r\n  </data-scope>\r\n</ol>\r\n<p class='showHideElement' >Let's see how endsWithAsync  template driven  fulfil the need.</p>\r\n</div></div>\r\n<div class='row page-section' id= 'basicendswithasyncvalidation'>\r\n<div class='col-lg-12'>\r\n<h2>Basic endsWithAsync Validation<a title='Link to this heading' class='link-header' href='/async-validators/endsWithAsync/template-driven/directives#basicendswithasyncvalidation'><i class='fa fa-link'></i></a></h2>\r\n\r\n<p class='showHideElement' >First we need to create a User model and define a property of name in the model to achieve the functional need of point 1.</p>\r\n<div component=\"app-code\" key=\"endsWithAsync-add-model\"></div> \r\n<p class='showHideElement' >Through Angular FormBuilder service we create FormGroup in the component.</p>\r\n<p class='showHideElement' >Here we have covered Add form operations. </p>\r\n<div component=\"app-code\" key=\"endsWithAsync-add-component\"></div> \r\n<p class='showHideElement' >Next, we need to write html code.</p>\r\n<div component=\"app-code\" key=\"endsWithAsync-add-html\"></div> \r\n<div component=\"app-example-runner\" ref-component=\"app-endsWithAsync-add\"></div>\r\n</div></div>\r\n<div class='row page-section' id= 'validatorconfig'>\r\n<div class='col-lg-12'>\r\n<h2>ValidatorConfig<a title='Link to this heading' class='link-header' href='/async-validators/endsWithAsync/template-driven/directives#validatorconfig'><i class='fa fa-link'></i></a></h2>\r\n\r\n<p class='showHideElement' >Type : <span class='highlighted'>Observable</span></p>\r\n<p class='showHideElement' >validator config is used to dynamically resolve the value of the property according to the server rules by using the keyword <span class='highlighted'>of</span> as below </p>\r\n<p class='showHideElement' >Below options are not mandatory to use in the <span class='highlighted'>endsWithAsync</span> validation. If needed then use the below options.</p>\r\n<table class=\"table table-bordered table-striped showHideElement\">\r\n<tr><th>Option</th><th>Description</th></tr>\r\n<tr><td><a  (click)='scrollTo(\"#message\")'  title=\"message\">message</a></td><td>To override the global configuration message and set the custom error message on respective FormControl</td></tr>\r\n<tr><td><a (click)='scrollTo(\"#messageKey\")' title=\"messageKey\">messageKey</a></td><td>messageKey property of BaseConfig can be used when the user wants to show a different custom validation message on some of their fields. User can define a custom messageKey globally by defining it in ReactiveFormConfig and set it in the message property of the validation.</td></tr>\r\n<tr><td><a (click)='scrollTo(\"#value\")'   title=\"value\">value</a></td><td>value property of DefaultConfig is used to assign a value based on which the user wants validation to be performed.</td></tr>\r\n</table>\r\n</div></div>\r\n<div class='row page-section' id= 'message'>\r\n<div class='col-lg-12'>\r\n<h2>message<a title='Link to this heading' class='link-header' href='/async-validators/endsWithAsync/template-driven/directives#message'><i class='fa fa-link'></i></a></h2>\r\n\r\n<p class='showHideElement' >Type :  <span class='highlighted'>string</span> </p>\r\n<p class='showHideElement' >To override the global configuration message and set the custom message on respective FormControl.</p>\r\n<div component=\"app-code\" key=\"endsWithAsync-messageExample-model\"></div> \r\n<div component=\"app-example-runner\" ref-component=\"app-endsWithAsync-message\" title=\"endsWithAsync template driven with message\" key=\"message\"></div>\r\n</div></div>\r\n<div class='row page-section' id= 'messagekey'>\r\n<div class='col-lg-12'>\r\n<h2>messageKey<a title='Link to this heading' class='link-header' href='/async-validators/endsWithAsync/template-driven/directives#messagekey'><i class='fa fa-link'></i></a></h2>\r\n\r\n<p class='showHideElement' >Type : <span class='highlighted'>string</span></p>\r\n<p class='showHideElement' >messageKey property of BaseConfig can be used when the user wants to show a different custom validation message on some of their fields. User can define a custom messageKey globally by defining it in ReactiveFormConfig and set it in the message property of the validation.</p>\r\n<div component=\"app-code\" key=\"endsWithAsync-messageKeyExample-model\"></div> \r\n<div component=\"app-example-runner\" ref-component=\"app-endsWithAsync-messageKey\" title=\"endsWithAsync template driven with messageKey\" key=\"messageKey\"></div>\r\n</div></div>\r\n<div class='row page-section' id= 'value'>\r\n<div class='col-lg-12'>\r\n<h2>value<a title='Link to this heading' class='link-header' href='/async-validators/endsWithAsync/template-driven/directives#value'><i class='fa fa-link'></i></a></h2>\r\n\r\n<p class='showHideElement' >Type :  <span class='highlighted'>string</span> </p>\r\n<p class='showHideElement' >value property of DefaultConfig is used to assign a value based on which the user wants validation to be performed.</p>\r\n<div component=\"app-code\" key=\"endsWithAsync-valueExample-model\"></div> \r\n<div component=\"app-example-runner\" ref-component=\"app-endsWithAsync-value\" title=\"endsWithAsync template driven with value\" key=\"value\"></div>\r\n</div></div>\r\n<div class='row page-section' id= 'completeendswithasyncexample'>\r\n<div class='col-lg-12'>\r\n<h2>Complete endsWithAsync Example<a title='Link to this heading' class='link-header' href='/async-validators/endsWithAsync/template-driven/directives#completeendswithasyncexample'><i class='fa fa-link'></i></a></h2>\r\n\r\n<p class='showHideElement' >This Complete endsWithAsync example which includes all the DefaultConfig properties will fulfil the requirement of scenarios 1, 2, 3 and 4.</p>\r\n<div component=\"app-tabs\" key=\"complete\"></div>\r\n</div></div>\r\n"}