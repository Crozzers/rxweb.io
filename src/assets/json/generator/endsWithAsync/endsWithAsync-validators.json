{"complete":{"notes":[],"component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup, FormBuilder } from \"@angular/forms\"\r\nimport { RxwebValidators } from '@rxweb/reactive-form-validators';\r\n\r\n@Component({\r\n    selector: 'app-endsWithAsync-complete-validator',\r\n    templateUrl: './ends-with-async-complete.component.html'\r\n})\r\nexport class EndsWithAsyncCompleteValidatorComponent implements OnInit {\r\n    userFormGroup: FormGroup\r\n\r\n\tconstructor(\r\n        private formBuilder: FormBuilder )\r\n\t{ }\r\n\r\n    ngOnInit() {\r\n        this.userFormGroup = this.formBuilder.group({\r\n            name:['', RxwebValidators.endsWithAsync({validatorConfig:of({value:'t'})})], \r\n            company:['', RxwebValidators.endsWithAsync({validatorConfig:of({value:'b'  ,message:'{{0}} does not ends with `b`'})})], \r\n            skill:['', RxwebValidators.endsWithAsync({validatorConfig:of({value:'r'  ,messageKey:'endsWithMessageKey'})})], \r\n       })});\r\n    }\r\n}\r\n","html":"<div>\r\n  <form  [formGroup]=\"userFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label>Name</label>\r\n      <input type=\"text\" formControlName=\"name\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">It should ends with 't'<br/></small>\r\n     <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.name.errors\">{{userFormGroup.controls.name.errors.endsWith.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Company</label>\r\n      <input type=\"text\" formControlName=\"company\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">Input should endsWith `b`<br/></small>\r\n      <small class=\"form-text text-muted\">Shows custom message<br/></small>\r\n     <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.company.errors\">{{userFormGroup.controls.company.errors.endsWith.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Skill</label>\r\n      <input type=\"text\" formControlName=\"skill\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">custom message based on messageKey<br/></small>\r\n     <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.skill.errors\">{{userFormGroup.controls.skill.errors.endsWithMessageKey.message}}<br/></small>\t\t\r\n    </div>\r\n    <button [disabled]=\"!userFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","model":null,"modelName":null,"json":{}},"valueExample":{"notes":null,"component":null,"html":null,"model":"RxwebValidators.endsWithAsync({validatorConfig:of({value:'t'})});\r\n","modelName":null,"json":{}},"value":{"notes":[],"component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup, FormBuilder } from \"@angular/forms\"\r\nimport { RxwebValidators } from '@rxweb/reactive-form-validators';\r\n\r\n@Component({\r\n    selector: 'app-endsWithAsync-value-validator',\r\n    templateUrl: './ends-with-async-value.component.html'\r\n})\r\nexport class EndsWithAsyncValueValidatorComponent implements OnInit {\r\n    userFormGroup: FormGroup\r\n\r\n\tconstructor(\r\n        private formBuilder: FormBuilder )\r\n\t{ }\r\n\r\n    ngOnInit() {\r\n        this.userFormGroup = this.formBuilder.group({\r\n            name:['', RxwebValidators.endsWithAsync({validatorConfig:of({value:'t'})})], \r\n       })});\r\n    }\r\n}\r\n","html":"<div>\r\n  <form  [formGroup]=\"userFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label>Name</label>\r\n      <input type=\"text\" formControlName=\"name\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">It should ends with 't'<br/></small>\r\n     <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.name.errors\">{{userFormGroup.controls.name.errors.endsWith.message}}<br/></small>\t\r\n    </div>\r\n    <button [disabled]=\"!userFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","model":null,"modelName":null,"json":{}},"messageExample":{"notes":null,"component":null,"html":null,"model":"RxwebValidators.endsWithAsync({validatorConfig:of({value:'b'  ,message:'{{0}} does not ends with `b`'})});\r\n","modelName":null,"json":{}},"message":{"notes":[],"component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup, FormBuilder } from \"@angular/forms\"\r\nimport { RxwebValidators } from '@rxweb/reactive-form-validators';\r\n\r\n@Component({\r\n    selector: 'app-endsWithAsync-message-validator',\r\n    templateUrl: './ends-with-async-message.component.html'\r\n})\r\nexport class EndsWithAsyncMessageValidatorComponent implements OnInit {\r\n    userFormGroup: FormGroup\r\n\r\n\tconstructor(\r\n        private formBuilder: FormBuilder )\r\n\t{ }\r\n\r\n    ngOnInit() {\r\n        this.userFormGroup = this.formBuilder.group({\r\n            company:['', RxwebValidators.endsWithAsync({validatorConfig:of({value:'b'  ,message:'{{0}} does not ends with `b`'})})], \r\n       })});\r\n    }\r\n}\r\n","html":"<div>\r\n  <form  [formGroup]=\"userFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label>Company</label>\r\n      <input type=\"text\" formControlName=\"company\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">Input should endsWith `b`<br/></small>\r\n      <small class=\"form-text text-muted\">Shows custom message<br/></small>\r\n     <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.company.errors\">{{userFormGroup.controls.company.errors.endsWith.message}}<br/></small>\t\r\n    </div>\r\n    <button [disabled]=\"!userFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","model":null,"modelName":null,"json":{}},"messageKeyExample":{"notes":null,"component":null,"html":null,"model":"RxwebValidators.endsWithAsync({validatorConfig:of({value:'r'  ,messageKey:'endsWithMessageKey'})});\r\n","modelName":null,"json":{}},"messageKey":{"notes":[],"component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup, FormBuilder } from \"@angular/forms\"\r\nimport { RxwebValidators } from '@rxweb/reactive-form-validators';\r\n\r\n@Component({\r\n    selector: 'app-endsWithAsync-messageKey-validator',\r\n    templateUrl: './ends-with-async-message-key.component.html'\r\n})\r\nexport class EndsWithAsyncMessageKeyValidatorComponent implements OnInit {\r\n    userFormGroup: FormGroup\r\n\r\n\tconstructor(\r\n        private formBuilder: FormBuilder )\r\n\t{ }\r\n\r\n    ngOnInit() {\r\n        this.userFormGroup = this.formBuilder.group({\r\n            skill:['', RxwebValidators.endsWithAsync({validatorConfig:of({value:'r'  ,messageKey:'endsWithMessageKey'})})], \r\n       })});\r\n    }\r\n}\r\n","html":"<div>\r\n  <form  [formGroup]=\"userFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label>Skill</label>\r\n      <input type=\"text\" formControlName=\"skill\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">custom message based on messageKey<br/></small>\r\n     <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.skill.errors\">{{userFormGroup.controls.skill.errors.endsWithMessageKey.message}}<br/></small>\t\t\r\n    </div>\r\n    <button [disabled]=\"!userFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","model":null,"modelName":null,"json":{}},"dynamic":{"notes":[],"component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup, FormBuilder } from \"@angular/forms\"\r\nimport { RxwebValidators } from '@rxweb/reactive-form-validators';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { FormBuilderConfiguration,RxFormBuilder} from '@rxweb/reactive-form-validators';\r\nimport { environment } from 'src/environments/environment';\r\n\r\n@Component({\r\n    selector: 'app-endsWithAsync-dynamic-validator',\r\n    templateUrl: './ends-with-async-dynamic.component.html'\r\n})\r\nexport class EndsWithAsyncDynamicValidatorComponent implements OnInit {\r\n    userFormGroup: FormGroup\r\n\r\n\tconstructor(\r\n        private formBuilder: RxFormBuilder , private http: HttpClient )\r\n\t{ }\r\n\r\n    ngOnInit() {\r\n\t\tlet formBuilderConfiguration = new FormBuilderConfiguration();\r\n\t\tthis.http.get('assets/examples/reactive-form-validators/validators/endsWithAsync/dynamic/dynamic.json?v='+environment.appVersion).subscribe(dynamic => {\r\n\t\t\tformBuilderConfiguration.dynamicValidation = JSON.parse(JSON.stringify(dynamic));\r\n\t\t\tvar user = { name:'', company:'', skill:'',  }\r\n\t\t\tthis.userFormGroup = this.formBuilder.group(user,formBuilderConfiguration);\r\n\t\t})\r\n    }\r\n}\r\n","html":"<div>\r\n  <form  *ngIf=\"userFormGroup\"  [formGroup]=\"userFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label>Name</label>\r\n      <input type=\"text\" formControlName=\"name\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">It should ends with 't'<br/></small>\r\n     <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.name.errors\">{{userFormGroup.controls.name.errors.endsWith.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Company</label>\r\n      <input type=\"text\" formControlName=\"company\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">Input should endsWith `b`<br/></small>\r\n      <small class=\"form-text text-muted\">Shows custom message<br/></small>\r\n     <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.company.errors\">{{userFormGroup.controls.company.errors.endsWith.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Skill</label>\r\n      <input type=\"text\" formControlName=\"skill\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">custom message based on messageKey<br/></small>\r\n     <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.skill.errors\">{{userFormGroup.controls.skill.errors.endsWithMessageKey.message}}<br/></small>\t\t\r\n    </div>\r\n    <button [disabled]=\"!userFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","model":null,"modelName":null,"json":{"dynamic.json":"{\"name\":{\"endsWithAsync\":{\"value\":\"t\"}},\"company\":{\"endsWithAsync\":{\"value\":\"b\",\"message\":\"{{0}} does not ends with `b`\"}},\"skill\":{\"endsWithAsync\":{\"value\":\"r\",\"messageKey\":\"endsWithMessageKey\"}}}"}},"add":{"notes":[],"component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup, FormBuilder } from \"@angular/forms\"\r\nimport { RxwebValidators } from '@rxweb/reactive-form-validators';\r\n\r\n@Component({\r\n    selector: 'app-endsWithAsync-add-validator',\r\n    templateUrl: './ends-with-async-add.component.html'\r\n})\r\nexport class EndsWithAsyncAddValidatorComponent implements OnInit {\r\n    userFormGroup: FormGroup\r\n\r\n\tconstructor(\r\n        private formBuilder: FormBuilder )\r\n\t{ }\r\n\r\n    ngOnInit() {\r\n        this.userFormGroup = this.formBuilder.group({\r\n            name:['', RxwebValidators.endsWithAsync({validatorConfig:of({value:'t'})})], \r\n       })});\r\n    }\r\n}\r\n","html":"<div>\r\n  <form  [formGroup]=\"userFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label>Name</label>\r\n      <input type=\"text\" formControlName=\"name\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">You can enter value which ends with 't'<br/></small>\r\n     <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.name.errors\">{{userFormGroup.controls.name.errors.endsWith.message}}<br/></small>\t\r\n    </div>\r\n    <button [disabled]=\"!userFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","model":null,"modelName":null,"json":{}}}