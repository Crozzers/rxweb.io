{"complete":{"notes":[],"component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup, FormBuilder } from \"@angular/forms\"\r\nimport { RxwebValidators } from '@rxweb/reactive-form-validators';\r\n\r\n@Component({\r\n    selector: 'app-iban-complete-validator',\r\n    templateUrl: './iban-complete.component.html'\r\n})\r\nexport class IbanCompleteValidatorComponent implements OnInit {\r\n    userInfoFormGroup: FormGroup\r\n\r\n\tconstructor(\r\n        private formBuilder: FormBuilder )\r\n\t{ }\r\n\r\n    ngOnInit() {\r\n        this.userInfoFormGroup = this.formBuilder.group({\r\n            gBBankAccountNumber:['', RxwebValidators.iban({countryCode:'GB' })], \r\n            bHBankAccountNumber:['', RxwebValidators.iban({countryCode:'BH'  ,conditionalExpression:(x,y) => x.gBBankAccountNumber == \"GB33BUKB20201555555555\" })], \r\n            dKBankAccountNumber:['', RxwebValidators.iban({countryCode:'CR'  ,conditionalExpression:'x => x.gBBankAccountNumber ==\"GB33BUKB20201555555555\"' })], \r\n            cHBankAccountNumber:['', RxwebValidators.iban({message:'Enter valid CH account Number.' })], \r\n            cRBankAccountNumber:['', RxwebValidators.iban({messageKey:'ibanMessageKey' })], \r\n        });\r\n    }\r\n}\r\n","html":"<div>\r\n  <form  [formGroup]=\"userInfoFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label>GBBank Account Number</label>\r\n      <input type=\"text\" formControlName=\"gBBankAccountNumber\" class=\"form-control\"  />\r\n     <small class=\"form-text text-danger\" *ngIf=\"userInfoFormGroup.controls.gBBankAccountNumber.errors\">{{userInfoFormGroup.controls.gBBankAccountNumber.errors.iban.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>BHBank Account Number</label>\r\n      <input type=\"text\" formControlName=\"bHBankAccountNumber\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">If you want to apply conditional validation on 'bHBankAccountNumber' then you need to add 'GBBankAccountNumber' input as 'GB33BUKB20201555555555'.<br/></small>\r\n      <small class=\"form-text text-muted\">Conditional Expression with type 'function'<br/></small>\r\n     <small class=\"form-text text-danger\" *ngIf=\"userInfoFormGroup.controls.bHBankAccountNumber.errors\">{{userInfoFormGroup.controls.bHBankAccountNumber.errors.iban.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>DKBank Account Number</label>\r\n      <input type=\"text\" formControlName=\"dKBankAccountNumber\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">If you want to apply conditional validation on 'dKBankAccountNumber' then you need to add 'GBBankAccountNumber' input as 'GB33BUKB20201555555555'.<br/></small>\r\n      <small class=\"form-text text-muted\">Conditional Expression with type 'string'<br/></small>\r\n     <small class=\"form-text text-danger\" *ngIf=\"userInfoFormGroup.controls.dKBankAccountNumber.errors\">{{userInfoFormGroup.controls.dKBankAccountNumber.errors.iban.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>CHBank Account Number</label>\r\n      <input type=\"text\" formControlName=\"cHBankAccountNumber\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">Shows custom message<br/></small>\r\n     <small class=\"form-text text-danger\" *ngIf=\"userInfoFormGroup.controls.cHBankAccountNumber.errors\">{{userInfoFormGroup.controls.cHBankAccountNumber.errors.iban.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>CRBankAccountNumber</label>\r\n      <input type=\"text\" formControlName=\"cRBankAccountNumber\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">custom message based on messageKey<br/></small>\r\n     <small class=\"form-text text-danger\" *ngIf=\"userInfoFormGroup.controls.cRBankAccountNumber.errors\">{{userInfoFormGroup.controls.cRBankAccountNumber.errors.ibanMessageKey.message}}<br/></small>\t\t\r\n    </div>\r\n    <button [disabled]=\"!userInfoFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","model":null,"modelName":null,"json":{}},"countryCodeExample":{"notes":null,"component":null,"html":null,"model":"RxwebValidators.iban({countryCode:'GB' });\r\n","modelName":null,"json":{}},"countryCode":{"notes":[],"component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup, FormBuilder } from \"@angular/forms\"\r\nimport { RxwebValidators } from '@rxweb/reactive-form-validators';\r\n\r\n@Component({\r\n    selector: 'app-iban-countryCode-validator',\r\n    templateUrl: './iban-country-code.component.html'\r\n})\r\nexport class IbanCountryCodeValidatorComponent implements OnInit {\r\n    userInfoFormGroup: FormGroup\r\n\r\n\tconstructor(\r\n        private formBuilder: FormBuilder )\r\n\t{ }\r\n\r\n    ngOnInit() {\r\n        this.userInfoFormGroup = this.formBuilder.group({\r\n            gBBankAccountNumber:['', RxwebValidators.iban({countryCode:'GB' })], \r\n        });\r\n    }\r\n}\r\n","html":"<div>\r\n  <form  [formGroup]=\"userInfoFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label>GBBank Account Number</label>\r\n      <input type=\"text\" formControlName=\"gBBankAccountNumber\" class=\"form-control\"  />\r\n     <small class=\"form-text text-danger\" *ngIf=\"userInfoFormGroup.controls.gBBankAccountNumber.errors\">{{userInfoFormGroup.controls.gBBankAccountNumber.errors.iban.message}}<br/></small>\t\r\n    </div>\r\n    <button [disabled]=\"!userInfoFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","model":null,"modelName":null,"json":{}},"countryCodeExampleFunction":{"notes":null,"component":null,"html":null,"model":"RxwebValidators.iban({countryCode:'BH'  ,conditionalExpression:(x,y) => x.gBBankAccountNumber == \"GB33BUKB20201555555555\" });\r\n","modelName":null,"json":{}},"conditionalExpressionExampleFunction":{"notes":null,"component":null,"html":null,"model":"RxwebValidators.iban({countryCode:'BH'  ,conditionalExpression:(x,y) => x.gBBankAccountNumber == \"GB33BUKB20201555555555\" });\r\n","modelName":null,"json":{}},"conditionalExpression":{"notes":[],"component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup, FormBuilder } from \"@angular/forms\"\r\nimport { RxwebValidators } from '@rxweb/reactive-form-validators';\r\n\r\n@Component({\r\n    selector: 'app-iban-conditionalExpression-validator',\r\n    templateUrl: './iban-conditional-expression.component.html'\r\n})\r\nexport class IbanConditionalExpressionValidatorComponent implements OnInit {\r\n    userInfoFormGroup: FormGroup\r\n\r\n\tconstructor(\r\n        private formBuilder: FormBuilder )\r\n\t{ }\r\n\r\n    ngOnInit() {\r\n        this.userInfoFormGroup = this.formBuilder.group({\r\n            gBBankAccountNumber:['', RxwebValidators.iban({countryCode:'GB' })], \r\n            dKBankAccountNumber:['', RxwebValidators.iban({countryCode:'CR'  ,conditionalExpression:'x => x.gBBankAccountNumber ==\"GB33BUKB20201555555555\"' })], \r\n            bHBankAccountNumber:['', RxwebValidators.iban({countryCode:'BH'  ,conditionalExpression:(x,y) => x.gBBankAccountNumber == \"GB33BUKB20201555555555\" })], \r\n        });\r\n    }\r\n}\r\n","html":"<div>\r\n  <form  [formGroup]=\"userInfoFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label>GBBank Account Number</label>\r\n      <input type=\"text\" formControlName=\"gBBankAccountNumber\" class=\"form-control\"  />\r\n     <small class=\"form-text text-danger\" *ngIf=\"userInfoFormGroup.controls.gBBankAccountNumber.errors\">{{userInfoFormGroup.controls.gBBankAccountNumber.errors.iban.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>DKBank Account Number</label>\r\n      <input type=\"text\" formControlName=\"dKBankAccountNumber\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">If you want to apply conditional validation on 'dKBankAccountNumber' then you need to add 'GBBankAccountNumber' input as 'GB33BUKB20201555555555'.<br/></small>\r\n      <small class=\"form-text text-muted\">Conditional Expression with type 'string'<br/></small>\r\n     <small class=\"form-text text-danger\" *ngIf=\"userInfoFormGroup.controls.dKBankAccountNumber.errors\">{{userInfoFormGroup.controls.dKBankAccountNumber.errors.iban.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>BHBank Account Number</label>\r\n      <input type=\"text\" formControlName=\"bHBankAccountNumber\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">If you want to apply conditional validation on 'bHBankAccountNumber' then you need to add 'GBBankAccountNumber' input as 'GB33BUKB20201555555555'.<br/></small>\r\n      <small class=\"form-text text-muted\">Conditional Expression with type 'function'<br/></small>\r\n     <small class=\"form-text text-danger\" *ngIf=\"userInfoFormGroup.controls.bHBankAccountNumber.errors\">{{userInfoFormGroup.controls.bHBankAccountNumber.errors.iban.message}}<br/></small>\t\r\n    </div>\r\n    <button [disabled]=\"!userInfoFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","model":null,"modelName":null,"json":{}},"countryCodeExampleString":{"notes":null,"component":null,"html":null,"model":"RxwebValidators.iban({countryCode:'CR'  ,conditionalExpression:'x => x.gBBankAccountNumber ==\"GB33BUKB20201555555555\"' });\r\n","modelName":null,"json":{}},"conditionalExpressionExampleString":{"notes":null,"component":null,"html":null,"model":"RxwebValidators.iban({countryCode:'CR'  ,conditionalExpression:'x => x.gBBankAccountNumber ==\"GB33BUKB20201555555555\"' });\r\n","modelName":null,"json":{}},"messageExample":{"notes":null,"component":null,"html":null,"model":"RxwebValidators.iban({message:'Enter valid CH account Number.' });\r\n","modelName":null,"json":{}},"message":{"notes":[],"component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup, FormBuilder } from \"@angular/forms\"\r\nimport { RxwebValidators } from '@rxweb/reactive-form-validators';\r\n\r\n@Component({\r\n    selector: 'app-iban-message-validator',\r\n    templateUrl: './iban-message.component.html'\r\n})\r\nexport class IbanMessageValidatorComponent implements OnInit {\r\n    userInfoFormGroup: FormGroup\r\n\r\n\tconstructor(\r\n        private formBuilder: FormBuilder )\r\n\t{ }\r\n\r\n    ngOnInit() {\r\n        this.userInfoFormGroup = this.formBuilder.group({\r\n            cHBankAccountNumber:['', RxwebValidators.iban({message:'Enter valid CH account Number.' })], \r\n        });\r\n    }\r\n}\r\n","html":"<div>\r\n  <form  [formGroup]=\"userInfoFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label>CHBank Account Number</label>\r\n      <input type=\"text\" formControlName=\"cHBankAccountNumber\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">Shows custom message<br/></small>\r\n     <small class=\"form-text text-danger\" *ngIf=\"userInfoFormGroup.controls.cHBankAccountNumber.errors\">{{userInfoFormGroup.controls.cHBankAccountNumber.errors.iban.message}}<br/></small>\t\r\n    </div>\r\n    <button [disabled]=\"!userInfoFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","model":null,"modelName":null,"json":{}},"messageKeyExample":{"notes":null,"component":null,"html":null,"model":"RxwebValidators.iban({messageKey:'ibanMessageKey' });\r\n","modelName":null,"json":{}},"messageKey":{"notes":[],"component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup, FormBuilder } from \"@angular/forms\"\r\nimport { RxwebValidators } from '@rxweb/reactive-form-validators';\r\n\r\n@Component({\r\n    selector: 'app-iban-messageKey-validator',\r\n    templateUrl: './iban-message-key.component.html'\r\n})\r\nexport class IbanMessageKeyValidatorComponent implements OnInit {\r\n    userInfoFormGroup: FormGroup\r\n\r\n\tconstructor(\r\n        private formBuilder: FormBuilder )\r\n\t{ }\r\n\r\n    ngOnInit() {\r\n        this.userInfoFormGroup = this.formBuilder.group({\r\n            cRBankAccountNumber:['', RxwebValidators.iban({messageKey:'ibanMessageKey' })], \r\n        });\r\n    }\r\n}\r\n","html":"<div>\r\n  <form  [formGroup]=\"userInfoFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label>CRBankAccountNumber</label>\r\n      <input type=\"text\" formControlName=\"cRBankAccountNumber\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">custom message based on messageKey<br/></small>\r\n     <small class=\"form-text text-danger\" *ngIf=\"userInfoFormGroup.controls.cRBankAccountNumber.errors\">{{userInfoFormGroup.controls.cRBankAccountNumber.errors.ibanMessageKey.message}}<br/></small>\t\t\r\n    </div>\r\n    <button [disabled]=\"!userInfoFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","model":null,"modelName":null,"json":{}},"dynamic":{"notes":[],"component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup, FormBuilder } from \"@angular/forms\"\r\nimport { RxwebValidators } from '@rxweb/reactive-form-validators';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { FormBuilderConfiguration,RxFormBuilder} from '@rxweb/reactive-form-validators';\r\nimport { environment } from 'src/environments/environment';\r\n\r\n@Component({\r\n    selector: 'app-iban-dynamic-validator',\r\n    templateUrl: './iban-dynamic.component.html'\r\n})\r\nexport class IbanDynamicValidatorComponent implements OnInit {\r\n    userInfoFormGroup: FormGroup\r\n\r\n\tconstructor(\r\n        private formBuilder: RxFormBuilder , private http: HttpClient )\r\n\t{ }\r\n\r\n    ngOnInit() {\r\n\t\tlet formBuilderConfiguration = new FormBuilderConfiguration();\r\n\t\tthis.http.get('assets/examples/reactive-form-validators/validators/iban/dynamic/dynamic.json?v='+environment.appVersion).subscribe(dynamic => {\r\n\t\t\tformBuilderConfiguration.dynamicValidation = JSON.parse(JSON.stringify(dynamic));\r\n\t\t\tvar userInfo = { gBBankAccountNumber:'', bHBankAccountNumber:'', dKBankAccountNumber:'', cHBankAccountNumber:'', cRBankAccountNumber:'',  }\r\n\t\t\tthis.userInfoFormGroup = this.formBuilder.group(userInfo,formBuilderConfiguration);\r\n\t\t})\r\n    }\r\n}\r\n","html":"<div>\r\n  <form  *ngIf=\"userInfoFormGroup\"  [formGroup]=\"userInfoFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label>GBBank Account Number</label>\r\n      <input type=\"text\" formControlName=\"gBBankAccountNumber\" class=\"form-control\"  />\r\n     <small class=\"form-text text-danger\" *ngIf=\"userInfoFormGroup.controls.gBBankAccountNumber.errors\">{{userInfoFormGroup.controls.gBBankAccountNumber.errors.iban.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>DKBank Account Number</label>\r\n      <input type=\"text\" formControlName=\"dKBankAccountNumber\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">If you want to apply conditional validation on 'dKBankAccountNumber' then you need to add 'GBBankAccountNumber' input as 'GB33BUKB20201555555555'.<br/></small>\r\n      <small class=\"form-text text-muted\">Conditional Expression with type 'string'<br/></small>\r\n     <small class=\"form-text text-danger\" *ngIf=\"userInfoFormGroup.controls.dKBankAccountNumber.errors\">{{userInfoFormGroup.controls.dKBankAccountNumber.errors.iban.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>CHBank Account Number</label>\r\n      <input type=\"text\" formControlName=\"cHBankAccountNumber\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">Shows custom message<br/></small>\r\n     <small class=\"form-text text-danger\" *ngIf=\"userInfoFormGroup.controls.cHBankAccountNumber.errors\">{{userInfoFormGroup.controls.cHBankAccountNumber.errors.iban.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>CRBankAccountNumber</label>\r\n      <input type=\"text\" formControlName=\"cRBankAccountNumber\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">custom message based on messageKey<br/></small>\r\n     <small class=\"form-text text-danger\" *ngIf=\"userInfoFormGroup.controls.cRBankAccountNumber.errors\">{{userInfoFormGroup.controls.cRBankAccountNumber.errors.ibanMessageKey.message}}<br/></small>\t\t\r\n    </div>\r\n    <button [disabled]=\"!userInfoFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","model":null,"modelName":null,"json":{"dynamic.json":"{\"gBBankAccountNumber\":{\"iban\":{\"countryCode\":\"GB\"}},\"dKBankAccountNumber\":{\"iban\":{\"countryCode\":\"CR\",\"conditionalExpression\":\"x => x.gBBankAccountNumber ==\\\"GB33BUKB20201555555555\\\"\"}},\"cHBankAccountNumber\":{\"iban\":{\"message\":\"Enter valid CH account Number.\"}},\"cRBankAccountNumber\":{\"iban\":{\"messageKey\":\"ibanMessageKey\"}}}"}},"add":{"notes":[],"component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup, FormBuilder } from \"@angular/forms\"\r\nimport { RxwebValidators } from '@rxweb/reactive-form-validators';\r\n\r\n@Component({\r\n    selector: 'app-iban-add-validator',\r\n    templateUrl: './iban-add.component.html'\r\n})\r\nexport class IbanAddValidatorComponent implements OnInit {\r\n    userFormGroup: FormGroup\r\n\r\n\tconstructor(\r\n        private formBuilder: FormBuilder )\r\n\t{ }\r\n\r\n    ngOnInit() {\r\n        this.userFormGroup = this.formBuilder.group({\r\n            gBBankAccountNumber:['', RxwebValidators.iban()], \r\n        });\r\n    }\r\n}\r\n","html":"<div>\r\n  <form  [formGroup]=\"userFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label>GBBank Account Number</label>\r\n      <input type=\"text\" formControlName=\"gBBankAccountNumber\" class=\"form-control\"  />\r\n     <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.gBBankAccountNumber.errors\">{{userFormGroup.controls.gBBankAccountNumber.errors.iban.message}}<br/></small>\t\r\n    </div>\r\n    <button [disabled]=\"!userFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","model":null,"modelName":null,"json":{}}}