{"rightSidebarLinks":[{"id":"iban","title":"iban (Template Driven)","subLink":null},{"id":"whentouse","title":"When to use","subLink":[]},{"id":"basicibanvalidation","title":"Basic iban Validation","subLink":[]},{"id":"hexcolorconfig","title":"HexColorConfig","subLink":[{"title":"conditionalExpression","id":"conditionalexpression","thirdLevelLink":[]},{"title":"message","id":"message","thirdLevelLink":[]},{"title":"messageKey","id":"messagekey","thirdLevelLink":[]}]},{"id":"completeibanexample","title":"Complete iban Example","subLink":[]},{"id":"githubissues","title":"iban Github Issues","subLink":null}],"title":"iban","description":"iban validation  template driven  will allow user to enter only the input in proper Hex Color format.","validatorType":"template-driven","validationTypeTitle":"Template Driven","type":"tabs","gitDocPath":"https://github.com/rxweb/rxweb.io/edit/master/docs/angular/reactive-forms/reactive-form-validators/validation-decorators/iban.md","category":"form-validations","subCategory":null,"linkTitle":"iban","tabArray":{"complete":[{"tabName":"Example","tabGroupContent":null,"content":"<div component=\"app-example-runner\" ref-component=\"app-iban-complete\"></div>\r\n"},{"tabName":"Model","tabGroupContent":null,"content":"<div component=\"app-code\" key=\"iban-complete-model\"></div> \r\n"},{"tabName":"Component","tabGroupContent":null,"content":"<div component=\"app-code\" key=\"iban-complete-component\"></div> \r\n"},{"tabName":"Html","tabGroupContent":null,"content":"<div component=\"app-code\" key=\"iban-complete-html\"></div>\r\n"}]},"innerHtml":null,"htmlContent":"<div class=\"title-bar top_title\"><p>iban</p></div> <div class=\"title-bar\"><p>iban validation  template driven will validate an international bank account number based upon the country code.</p></div>\r\n<div class='row page-section' id= 'whentouse'>\r\n<div class='col-lg-12'>\r\n<h2 class='showHideElement' >When to use<a title='Link to this heading' class='link-header' href='/form-validations/iban/template-driven/directives#whentouse'><i class='fa fa-link'></i></a></h2>\r\n\r\n<p class='showHideElement' >Suppose you want to create a User form, which contains fields like GBBankAccountNumber, BHBankAccountNumber, CHBankAccountNumber, CRBankAccountNumber and you want the user to enter valid international bank account number. Here depending upon the requirement these scenarios may arise.</p>\r\n<ol class='showHideElement'>\r\n    <li>Allow UK account number in GBBankAccountNumber field.</li>\r\n    <li>Apply iban validation based on matched condition in the form, like if the GBBankAccountNumber is <span class='highlighted'>GB33BUKB20201555555555</span>, then only the BHBankAccountNumber field will be validated to Bahrain validator.</li>\r\n    <li>Adding Custom Message on CHBankAccountNumber field.</li>\r\n    <li>Shows the custom message on <span class='highlighted'>CRBankAccountNumber</span> field by using <span class='highlighted'>messageKey</span> property.</li>\r\n    <data-scope scope=\"['decorator','validator']\">\r\n    <li>Apply iban validation dynamically based on server rules.</li>\r\n    </data-scope>\r\n</ol>\r\n<p class='showHideElement' >Letâ€™s see how iban  template driven  fulfil the need.</p>\r\n</div></div>\r\n<div class='row page-section' id= 'basicibanvalidation'>\r\n<div class='col-lg-12'>\r\n<h2>Basic iban Validation<a title='Link to this heading' class='link-header' href='/form-validations/iban/template-driven/directives#basicibanvalidation'><i class='fa fa-link'></i></a></h2>\r\n\r\n<p class='showHideElement' >First we need to create a User class and define a property of Color in the model to achieve the functional need of point 1.</p>\r\n<div component=\"app-code\" key=\"iban-add-model\"></div> \r\n<p class='showHideElement' >Through Angular FormBuilder service we create FormGroup in the component.</p>\r\n<p class='showHideElement' >Here we have covered Add form operations. </p>\r\n<div component=\"app-code\" key=\"iban-add-component\"></div> \r\n<p class='showHideElement' >Next, we need to write html code.</p>\r\n<div component=\"app-code\" key=\"iban-add-html\"></div> \r\n<div component=\"app-example-runner\" ref-component=\"app-iban-add\"></div>\r\n</div></div>\r\n<div class='row page-section' id= 'hexcolorconfig'>\r\n<div class='col-lg-12'>\r\n<h2 class='showHideElement' >HexColorConfig<a title='Link to this heading' class='link-header' href='/form-validations/iban/template-driven/directives#hexcolorconfig'><i class='fa fa-link'></i></a></h2>\r\n\r\n<p class='showHideElement' >Below options are not mandatory to use in the <span class='highlighted'>iban</span> validation. If needed then use the below options.</p>\r\n<table class=\"table table-bordered table-striped showHideElement\">\r\n<tr><th>Option</th><th>Description</th></tr>\r\n<tr><td><a  title=\"conditionalExpression\">conditionalExpression</a></td><td>iban validation should be applied if the condition is matched in the <span class='highlighted'>conditionalExpression</span> function. Validation framework will pass two parameters at the time of <span class='highlighted'>conditionalExpression</span> check. Those two parameters are current <span class='highlighted'>FormGroup</span> value and root <span class='highlighted'>FormGroup</span> value. You can apply the condition on respective object value.If there is need of dynamic validation means it is not fixed in client code, it will change based on some criterias. In this scenario you can bind the expression based on the expression value is coming from the web server in <span class='highlighted'>string</span> format. The <span class='highlighted'>conditionalExpression</span> will work same as client function.</td></tr>\r\n<tr><td><a  title=\"message\">message</a></td><td>To override the global configuration message and set the custom error message on respective FormControl</td></tr>\r\n<tr><td><a (click)='scrollTo(\"#messageKey\")' title=\"messageKey\">messageKey</a></td><td>messageKey property of BaseConfig can be used when the user wants to show a different custom validation message on some of their fields. User can define a custom messageKey globally by defining it in ReactiveFormConfig and set it in the message property of the validation.</td></tr>\r\n</table>\r\n</div></div>\r\n<div class='row page-section' id= 'conditionalexpression'>\r\n<div class='col-lg-12'>\r\n<h2>conditionalExpression<a title='Link to this heading' class='link-header' href='/form-validations/iban/template-driven/directives#conditionalexpression'><i class='fa fa-link'></i></a></h2>\r\n\r\n<p class='showHideElement' >Type :  <span class='highlighted'>Function</span>  |  <span class='highlighted'>string</span> </p>\r\n<p class='showHideElement' >iban validation should be applied if the condition is matched in the <span class='highlighted'>conditionalExpression</span> function. Validation framework will pass two parameters at the time of <span class='highlighted'>conditionalExpression</span> check. Those two parameters are current <span class='highlighted'>FormGroup</span> value and root <span class='highlighted'>FormGroup</span> value. You can apply the condition on respective object value.</p>\r\n<p class='showHideElement' >If there is need of dynamic validation means it is not fixed in client code, it will change based on some criterias. In this scenario you can bind the expression based on the expression value is coming from the web server in <span class='highlighted'>string</span> format. The <span class='highlighted'>conditionalExpression</span> will work same as client function.</p>\r\n<blockquote class='showHideElement' ><p>This won't work if you return without expression or fixed boolean value true or false; like : <span class='highlighted'>conditionalExpression: (x) =x.toggle</span></p></blockquote>\r\n<blockquote class='showHideElement' ><p>Binding <span class='highlighted'>conditionalExpression</span> with <span class='highlighted'>string</span> object.</p></blockquote>\r\n<div component=\"app-code\" key=\"iban-conditionalExpressionExampleString-model\"></div> \r\n<div component=\"app-example-runner\" ref-component=\"app-iban-conditionalExpression\" title=\"iban template driven with conditionalExpression\" key=\"conditionalExpression\"></div>\r\n</div></div>\r\n<div class='row page-section' id= 'message'>\r\n<div class='col-lg-12'>\r\n<h2>message<a title='Link to this heading' class='link-header' href='/form-validations/iban/template-driven/directives#message'><i class='fa fa-link'></i></a></h2>\r\n\r\n<p class='showHideElement' >Type :  <span class='highlighted'>string</span> </p>\r\n<p class='showHideElement' >To override the global configuration message and set the custom error message on respective FormControl</p>\r\n<div component=\"app-code\" key=\"iban-messageExample-model\"></div> \r\n<div component=\"app-example-runner\" ref-component=\"app-iban-message\" title=\"iban template driven with message\" key=\"message\"></div>\r\n</div></div>\r\n<div class='row page-section' id= 'messagekey'>\r\n<div class='col-lg-12'>\r\n<h2>messageKey<a title='Link to this heading' class='link-header' href='/form-validations/iban/template-driven/directives#messagekey'><i class='fa fa-link'></i></a></h2>\r\n\r\n<p class='showHideElement' >Type : <span class='highlighted'>string</span></p>\r\n<p class='showHideElement' >messageKey property of BaseConfig can be used when the user wants to show a different custom validation message on some of their fields. User can define a custom messageKey globally by defining it in ReactiveFormConfig and set it in the message property of the validation.</p>\r\n<div component=\"app-code\" key=\"iban-messageKeyExample-model\"></div> \r\n<div component=\"app-example-runner\" ref-component=\"app-iban-messageKey\" title=\"iban template driven with messageKey\" key=\"messageKey\"></div>\r\n</div></div>\r\n<div class='row page-section' id= 'completeibanexample'>\r\n<div class='col-lg-12'>\r\n<h2>Complete iban Example<a title='Link to this heading' class='link-header' href='/form-validations/iban/template-driven/directives#completeibanexample'><i class='fa fa-link'></i></a></h2>\r\n\r\n<p class='showHideElement' >This Complete iban example which includes all the HexColorConfig properties will fulfil the requirement of scenarios 1, 2, 3,4 and 5</p>\r\n<div component=\"app-tabs\" key=\"complete\"></div>\r\n</div></div>\r\n<div class=\"row page-section\" id=\"githubissues\">\r\n<div class=\"col-lg-12\">\r\n<h2>Github Issues<a title='Link to this heading' class='link-header' href='/form-validations/iban/template-driven/decorators#githubissues' fragment='githubissues'><i class='fa fa-link'></i></a></h2>\r\n<div component=\"app-github-issue\"></div>\r\n</div>\r\n</div>\r\n<div component=\"app-contribution\"></div>\r\n"}