{
  "complete": {
    "notes": [],
    "component": "import { Component, OnInit } from '@angular\/core';\r\nimport { FormGroup, FormBuilder } from \"@angular\/forms\"\r\nimport { RxwebValidators } from '@rxweb\/reactive-form-validators';\r\nimport { of } from 'rxjs';\r\n\r\n@Component({\r\n    selector: 'app-dateAsync-complete-validator',\r\n    templateUrl: '.\/date-async-complete.component.html'\r\n})\r\nexport class DateAsyncCompleteValidatorComponent implements OnInit {\r\n    userInfoFormGroup: FormGroup\r\n\r\n\tconstructor(\r\n        private formBuilder: FormBuilder )\r\n\t{ }\r\n\r\n    ngOnInit() {\r\n        this.userInfoFormGroup = this.formBuilder.group({\r\n            birthDate:['',[], RxwebValidators.dateAsync()], \r\n            registrationDate:['',[], RxwebValidators.dateAsync({validatorConfig:of({allowISODate:true })})], \r\n            admissionDate:['',[], RxwebValidators.dateAsync({validatorConfig:of({conditionalExpression:(x,y) => x.birthDate == \"16\/04\/1997\"  })})], \r\n            allocationDate:['',[], RxwebValidators.dateAsync({validatorConfig:of({message:'{{0}} is not a valid date' })})], \r\n            confirmationDate:['',[], RxwebValidators.dateAsync({validatorConfig:of({messageKey:'dateMessageKey' })})], \r\n        });\r\n    }\r\n}\r\n",
    "html": "<div>\r\n  <form  [formGroup]=\"userInfoFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label>Birth Date<\/label>\r\n      <input type=\"text\" formControlName=\"birthDate\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">You must enter a proper date format.<br/><\/small>\r\n     <small class=\"form-text text-danger\" *ngIf=\"userInfoFormGroup.controls.birthDate.errors\">{{userInfoFormGroup.controls.birthDate.errors.date.message}}<br/><\/small>\t\r\n    <\/div>\r\n    <div class=\"form-group\">\r\n      <label>Registration Date<\/label>\r\n      <input type=\"text\" formControlName=\"registrationDate\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">allows standard way to express a numeric calendar date according to International Organization for Standardization.<br/><\/small>\r\n     <small class=\"form-text text-danger\" *ngIf=\"userInfoFormGroup.controls.registrationDate.errors\">{{userInfoFormGroup.controls.registrationDate.errors.date.message}}<br/><\/small>\t\r\n    <\/div>\r\n    <div class=\"form-group\">\r\n      <label>Admission Date<\/label>\r\n      <input type=\"text\" formControlName=\"admissionDate\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Admission Date' then you need to add 'birthDate' input as '16/04/1997'.<br/><\/small>\r\n      <small class=\"form-text text-muted\">Conditional Expression with type 'function'<br/><\/small>\r\n     <small class=\"form-text text-danger\" *ngIf=\"userInfoFormGroup.controls.admissionDate.errors\">{{userInfoFormGroup.controls.admissionDate.errors.date.message}}<br/><\/small>\t\r\n    <\/div>\r\n    <div class=\"form-group\">\r\n      <label>Allocation Date<\/label>\r\n      <input type=\"text\" formControlName=\"allocationDate\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">enter date format only<br/><\/small>\r\n      <small class=\"form-text text-muted\">Shows custom message.<br/><\/small>\r\n     <small class=\"form-text text-danger\" *ngIf=\"userInfoFormGroup.controls.allocationDate.errors\">{{userInfoFormGroup.controls.allocationDate.errors.date.message}}<br/><\/small>\t\r\n    <\/div>\r\n    <div class=\"form-group\">\r\n      <label>Confirmation Date<\/label>\r\n      <input type=\"text\" formControlName=\"confirmationDate\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">Custom message based on messageKey<br/><\/small>\r\n     <small class=\"form-text text-danger\" *ngIf=\"userInfoFormGroup.controls.confirmationDate.errors\">{{userInfoFormGroup.controls.confirmationDate.errors.dateMessageKey.message}}<br/><\/small>\t\t\r\n    <\/div>\r\n    <button [disabled]=\"!userInfoFormGroup.valid\" class=\"btn btn-primary\">Submit<\/button>\r\n  <\/form>\r\n<\/div>\r\n",
    "model": null,
    "modelName": null,
    "json": {}
  },
  "allowISODateExample": {
    "notes": null,
    "component": null,
    "html": null,
    "model": "RxwebValidators.dateAsync({validatorConfig:of({allowISODate:true });\r\n",
    "modelName": null,
    "json": {}
  },
  "allowISODate": {
    "notes": [],
    "component": "import { Component, OnInit } from '@angular\/core';\r\nimport { FormGroup, FormBuilder } from \"@angular\/forms\"\r\nimport { RxwebValidators } from '@rxweb\/reactive-form-validators';\r\nimport { of } from 'rxjs';\r\n\r\n@Component({\r\n    selector: 'app-dateAsync-allowISODate-validator',\r\n    templateUrl: '.\/date-async-allow-i-s-o-date.component.html'\r\n})\r\nexport class DateAsyncAllowISODateValidatorComponent implements OnInit {\r\n    userInfoFormGroup: FormGroup\r\n\r\n\tconstructor(\r\n        private formBuilder: FormBuilder )\r\n\t{ }\r\n\r\n    ngOnInit() {\r\n        this.userInfoFormGroup = this.formBuilder.group({\r\n            registrationDate:['',[], RxwebValidators.dateAsync({validatorConfig:of({allowISODate:true })})], \r\n        });\r\n    }\r\n}\r\n",
    "html": "<div>\r\n  <form  [formGroup]=\"userInfoFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label>Registration Date<\/label>\r\n      <input type=\"text\" formControlName=\"registrationDate\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">allows standard way to express a numeric calendar date according to International Organization for Standardization.<br/><\/small>\r\n     <small class=\"form-text text-danger\" *ngIf=\"userInfoFormGroup.controls.registrationDate.errors\">{{userInfoFormGroup.controls.registrationDate.errors.date.message}}<br/><\/small>\t\r\n    <\/div>\r\n    <button [disabled]=\"!userInfoFormGroup.valid\" class=\"btn btn-primary\">Submit<\/button>\r\n  <\/form>\r\n<\/div>\r\n",
    "model": null,
    "modelName": null,
    "json": {}
  },
  "conditionalExpressionExampleFunction": {
    "notes": null,
    "component": null,
    "html": null,
    "model": "RxwebValidators.dateAsync({validatorConfig:of({conditionalExpression:(x,y) => x.birthDate == \"16/04/1997\"  });\r\n",
    "modelName": null,
    "json": {}
  },
  "conditionalExpression": {
    "notes": [],
    "component": "import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup, FormBuilder } from \"@angular/forms\"\r\nimport { RxwebValidators } from '@rxweb/reactive-form-validators';\r\n\r\n@Component({\r\n    selector: 'app-dateAsync-conditionalExpression-validator',\r\n    templateUrl: './date-async-conditional-expression.component.html'\r\n})\r\nexport class DateAsyncConditionalExpressionValidatorComponent implements OnInit {\r\n    userInfoFormGroup: FormGroup\r\n\r\n\tconstructor(\r\n        private formBuilder: FormBuilder )\r\n\t{ }\r\n\r\n    ngOnInit() {\r\n        this.userInfoFormGroup = this.formBuilder.group({\r\n            birthDate:['', RxwebValidators.dateAsync()], \r\n            admissionDate:['', RxwebValidators.dateAsync({validatorConfig:of({conditionalExpression:(x,y) => x.birthDate == \"16/04/1997\"  })})], \r\n        });\r\n    }\r\n}\r\n",
    "html": "<div>\r\n  <form  [formGroup]=\"userInfoFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label>Birth Date<\/label>\r\n      <input type=\"text\" formControlName=\"birthDate\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">You must enter a proper date format.<br/><\/small>\r\n     <small class=\"form-text text-danger\" *ngIf=\"userInfoFormGroup.controls.birthDate.errors\">{{userInfoFormGroup.controls.birthDate.errors.date.message}}<br/><\/small>\t\r\n    <\/div>\r\n    <div class=\"form-group\">\r\n      <label>Admission Date<\/label>\r\n      <input type=\"text\" formControlName=\"admissionDate\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Admission Date' then you need to add 'birthDate' input as '16/04/1997'.<br/><\/small>\r\n      <small class=\"form-text text-muted\">Conditional Expression with type 'function'<br/><\/small>\r\n     <small class=\"form-text text-danger\" *ngIf=\"userInfoFormGroup.controls.admissionDate.errors\">{{userInfoFormGroup.controls.admissionDate.errors.date.message}}<br/><\/small>\t\r\n    <\/div>\r\n    <button [disabled]=\"!userInfoFormGroup.valid\" class=\"btn btn-primary\">Submit<\/button>\r\n  <\/form>\r\n<\/div>\r\n",
    "model": null,
    "modelName": null,
    "json": {}
  },
  "messageExample": {
    "notes": null,
    "component": null,
    "html": null,
    "model": "RxwebValidators.dateAsync({validatorConfig:of({message:'{{0}} is not a valid date' });\r\n",
    "modelName": null,
    "json": {}
  },
  "message": {
    "notes": [],
    "component": "import { Component, OnInit } from '@angular\/core';\r\nimport { FormGroup, FormBuilder } from \"@angular\/forms\"\r\nimport { RxwebValidators } from '@rxweb\/reactive-form-validators';\r\nimport { of } from 'rxjs';\r\n\r\n@Component({\r\n    selector: 'app-dateAsync-message-validator',\r\n    templateUrl: '.\/date-async-message.component.html'\r\n})\r\nexport class DateAsyncMessageValidatorComponent implements OnInit {\r\n    userInfoFormGroup: FormGroup\r\n\r\n\tconstructor(\r\n        private formBuilder: FormBuilder )\r\n\t{ }\r\n\r\n    ngOnInit() {\r\n        this.userInfoFormGroup = this.formBuilder.group({\r\n            allocationDate:['',[], RxwebValidators.dateAsync({validatorConfig:of({message:'{{0}} is not a valid date' })})], \r\n        });\r\n    }\r\n}\r\n",
    "html": "<div>\r\n  <form  [formGroup]=\"userInfoFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label>Allocation Date<\/label>\r\n      <input type=\"text\" formControlName=\"allocationDate\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">enter date format only<br/><\/small>\r\n      <small class=\"form-text text-muted\">Shows custom message.<br/><\/small>\r\n     <small class=\"form-text text-danger\" *ngIf=\"userInfoFormGroup.controls.allocationDate.errors\">{{userInfoFormGroup.controls.allocationDate.errors.date.message}}<br/><\/small>\t\r\n    <\/div>\r\n    <button [disabled]=\"!userInfoFormGroup.valid\" class=\"btn btn-primary\">Submit<\/button>\r\n  <\/form>\r\n<\/div>\r\n",
    "model": null,
    "modelName": null,
    "json": {}
  },
  "messageKeyExample": {
    "notes": null,
    "component": null,
    "html": null,
    "model": "RxwebValidators.dateAsync({validatorConfig:of({messageKey:'dateMessageKey' });\r\n",
    "modelName": null,
    "json": {}
  },
  "messageKey": {
    "notes": [],
    "component": "import { Component, OnInit } from '@angular\/core';\r\nimport { FormGroup, FormBuilder } from \"@angular\/forms\"\r\nimport { RxwebValidators } from '@rxweb\/reactive-form-validators';\r\nimport { of } from 'rxjs';\r\n\r\n@Component({\r\n    selector: 'app-dateAsync-messageKey-validator',\r\n    templateUrl: '.\/date-async-message-key.component.html'\r\n})\r\nexport class DateAsyncMessageKeyValidatorComponent implements OnInit {\r\n    userInfoFormGroup: FormGroup\r\n\r\n\tconstructor(\r\n        private formBuilder: FormBuilder )\r\n\t{ }\r\n\r\n    ngOnInit() {\r\n        this.userInfoFormGroup = this.formBuilder.group({\r\n            confirmationDate:['',[], RxwebValidators.dateAsync({validatorConfig:of({messageKey:'dateMessageKey' })})], \r\n        });\r\n    }\r\n}\r\n",
    "html": "<div>\r\n  <form  [formGroup]=\"userInfoFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label>Confirmation Date<\/label>\r\n      <input type=\"text\" formControlName=\"confirmationDate\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">Custom message based on messageKey<br/><\/small>\r\n     <small class=\"form-text text-danger\" *ngIf=\"userInfoFormGroup.controls.confirmationDate.errors\">{{userInfoFormGroup.controls.confirmationDate.errors.dateMessageKey.message}}<br/><\/small>\t\t\r\n    <\/div>\r\n    <button [disabled]=\"!userInfoFormGroup.valid\" class=\"btn btn-primary\">Submit<\/button>\r\n  <\/form>\r\n<\/div>\r\n",
    "model": null,
    "modelName": null,
    "json": {}
  },
  "dynamic": {
    "notes": [],
    "component": "import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup, FormBuilder } from \"@angular/forms\"\r\nimport { RxwebValidators } from '@rxweb/reactive-form-validators';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { FormBuilderConfiguration,RxFormBuilder} from '@rxweb/reactive-form-validators';\r\nimport { environment } from 'src/environments/environment';\r\n\r\n@Component({\r\n    selector: 'app-dateAsync-dynamic-validator',\r\n    templateUrl: './date-async-dynamic.component.html'\r\n})\r\nexport class DateAsyncDynamicValidatorComponent implements OnInit {\r\n    userInfoFormGroup: FormGroup\r\n\r\n\tconstructor(\r\n        private formBuilder: RxFormBuilder , private http: HttpClient )\r\n\t{ }\r\n\r\n    ngOnInit() {\r\n\t\tlet formBuilderConfiguration = new FormBuilderConfiguration();\r\n\t\tthis.http.get('assets/examples/reactive-form-validators/validators/dateAsync/dynamic/dynamic.json?v='+environment.appVersion).subscribe(dynamic => {\r\n\t\t\tformBuilderConfiguration.dynamicValidation = JSON.parse(JSON.stringify(dynamic));\r\n\t\t\tvar userInfo = { birthDate:'', registrationDate:'', admissionDate:'', allocationDate:'', confirmationDate:'',  }\r\n\t\t\tthis.userInfoFormGroup = this.formBuilder.group(userInfo,formBuilderConfiguration);\r\n\t\t})\r\n    }\r\n}\r\n",
    "html": "<div>\r\n  <form  *ngIf=\"userInfoFormGroup\"  [formGroup]=\"userInfoFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label>Birth Date<\/label>\r\n      <input type=\"text\" formControlName=\"birthDate\" class=\"form-control\"   />\r\n      <small class=\"form-text text-muted\">You must enter a proper date format.<br/><\/small>\r\n      <small class=\"form-text text-danger\" *ngIf=\"userInfoFormGroup.controls.birthDate.errors\">{{userInfoFormGroup.controls.birthDate.errors.date.message}}<br/><\/small>\r\n    <\/div>\r\n    <div class=\"form-group\">\r\n      <label>Registration Date<\/label>\r\n      <input type=\"text\" formControlName=\"registrationDate\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">allows standard way to express a numeric calendar date according to International Organization for Standardization.<br/><\/small>\r\n     <small class=\"form-text text-danger\" *ngIf=\"userInfoFormGroup.controls.registrationDate.errors\">{{userInfoFormGroup.controls.registrationDate.errors.date.message}}<br/><\/small>\t\r\n    <\/div>\r\n    <div class=\"form-group\">\r\n      <label>Allocation Date<\/label>\r\n      <input type=\"text\" formControlName=\"allocationDate\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">enter date format only<br/><\/small>\r\n      <small class=\"form-text text-muted\">Shows custom message.<br/><\/small>\r\n     <small class=\"form-text text-danger\" *ngIf=\"userInfoFormGroup.controls.allocationDate.errors\">{{userInfoFormGroup.controls.allocationDate.errors.date.message}}<br/><\/small>\t\r\n    <\/div>\r\n    <div class=\"form-group\">\r\n      <label>Confirmation Date<\/label>\r\n      <input type=\"text\" formControlName=\"confirmationDate\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">Custom message based on messageKey<br/><\/small>\r\n     <small class=\"form-text text-danger\" *ngIf=\"userInfoFormGroup.controls.confirmationDate.errors\">{{userInfoFormGroup.controls.confirmationDate.errors.dateMessageKey.message}}<br/><\/small>\t\t\r\n    <\/div>\r\n    <button [disabled]=\"!userInfoFormGroup.valid\" class=\"btn btn-primary\">Submit<\/button>\r\n  <\/form>\r\n<\/div>\r\n",
    "model": null,
    "modelName": null,
    "json": {
      "dynamic.json": {
        "birthDate": {
          "dateAsync": true
        },
        "registrationDate": {
          "dateAsync": {
            "allowISODate": "true"
          }
        },
        "allocationDate": {
          "dateAsync": {
            "message": "{{0}} is not a valid date"
          }
        },
        "confirmationDate": {
          "dateAsync": {
            "messageKey": "dateMessageKey"
          }
        }
      }
    }
  },
  "add": {
    "notes": [],
    "component": "import { Component, OnInit } from '@angular\/core';\r\nimport { FormGroup, FormBuilder } from \"@angular\/forms\"\r\nimport { RxwebValidators } from '@rxweb\/reactive-form-validators';\r\n\r\n@Component({\r\n    selector: 'app-dateAsync-add-validator',\r\n    templateUrl: '.\/date-async-add.component.html'\r\n})\r\nexport class DateAsyncAddValidatorComponent implements OnInit {\r\n    userInfoFormGroup: FormGroup\r\n\r\n\tconstructor(\r\n        private formBuilder: FormBuilder )\r\n\t{ }\r\n\r\n    ngOnInit() {\r\n        this.userInfoFormGroup = this.formBuilder.group({\r\n            birthDate:['',[], RxwebValidators.dateAsync()], \r\n        });\r\n    }\r\n}\r\n",
    "html": "<div>\r\n  <form  [formGroup]=\"userInfoFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label>Birth Date<\/label>\r\n      <input type=\"text\" formControlName=\"birthDate\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">You must enter a valid date only<br/><\/small>\r\n     <small class=\"form-text text-danger\" *ngIf=\"userInfoFormGroup.controls.birthDate.errors\">{{userInfoFormGroup.controls.birthDate.errors.date.message}}<br/><\/small>\t\r\n    <\/div>\r\n    <button [disabled]=\"!userInfoFormGroup.valid\" class=\"btn btn-primary\">Submit<\/button>\r\n  <\/form>\r\n<\/div>\r\n",
    "model": null,
    "modelName": null,
    "json": {}
  }
}