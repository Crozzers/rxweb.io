{
    "complete": {
        "notes": [],
        "component": "import { Injectable } from '@angular\/core';\r\nimport { IMiddleware } from '@rxweb\/angular-router'\r\nimport { ActivatedRoute, Router } from '@angular\/router';\r\nimport { BrowserStorage } from '..\/..\/services\/browser-storage';\r\n\r\n@Injectable({\r\n    providedIn: 'root',\r\n})\r\nexport class LoggedInMiddleware implements IMiddleware {\r\n    constructor(private router: Router, private storagedata: BrowserStorage) { }\r\n    invoke(user: { [key: string]: any; }, activateRouteSnapshot: any): boolean | Promise<boolean> {\r\n        var auth = this.storagedata.local.get('auth',false);\r\n        if (auth)\r\n            this.router.navigate(['users']);\r\n        return true;\r\n    }\r\n}",
        "html": "<div>\r\n  <form  [formGroup]=\"addressInfoFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label>Country Name</label>\r\n      <input type=\"text\" formControlName=\"countryName\" class=\"form-control\"  />\r\n     <small class=\"form-text text-danger\" *ngIf=\"addressInfoFormGroup.controls.countryName.errors\">{{addressInfoFormGroup.controls.countryName.errors.alpha.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Country Code</label>\r\n      <input type=\"text\" formControlName=\"countryCode\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Country Code' then you need to add 'Country Name' input as 'India'.<br/></small>\r\n      <small class=\"form-text text-muted\">Conditional Expression with type 'function'<br/></small>\r\n     <small class=\"form-text text-danger\" *ngIf=\"addressInfoFormGroup.controls.countryCode.errors\">{{addressInfoFormGroup.controls.countryCode.errors.alpha.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>City</label>\r\n      <input type=\"text\" formControlName=\"cityName\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">If you want to apply conditional validation on 'City' then you need to add 'Country Name' input as 'India'.<br/></small>\r\n      <small class=\"form-text text-muted\">Conditional Expression with type 'string'<br/></small>\r\n     <small class=\"form-text text-danger\" *ngIf=\"addressInfoFormGroup.controls.cityName.errors\">{{addressInfoFormGroup.controls.cityName.errors.alpha.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>SpanishCityName</label>\r\n      <input type=\"text\" formControlName=\"spanishcityName\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">It will allow spanish characters in the formControl<br/></small>\r\n     <small class=\"form-text text-danger\" *ngIf=\"addressInfoFormGroup.controls.spanishcityName.errors\">{{addressInfoFormGroup.controls.spanishcityName.errors.alpha.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>State Name</label>\r\n      <input type=\"text\" formControlName=\"stateName\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">This allowed whitespace in alpha validation<br/></small>\r\n     <small class=\"form-text text-danger\" *ngIf=\"addressInfoFormGroup.controls.stateName.errors\">{{addressInfoFormGroup.controls.stateName.errors.alpha.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>State Code</label>\r\n      <input type=\"text\" formControlName=\"stateCode\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">Shows custom message<br/></small>\r\n     <small class=\"form-text text-danger\" *ngIf=\"addressInfoFormGroup.controls.stateCode.errors\">{{addressInfoFormGroup.controls.stateCode.errors.alpha.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>City Code</label>\r\n      <input type=\"text\" formControlName=\"cityCode\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">custom message based on messageKey<br/></small>\r\n     <small class=\"form-text text-danger\" *ngIf=\"addressInfoFormGroup.controls.cityCode.errors\">{{addressInfoFormGroup.controls.cityCode.errors.alphaMessageKey.message}}<br/></small>\t\t\r\n    </div>\r\n    <button [disabled]=\"!addressInfoFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n",
        "model": "import { Component, OnInit, OnDestroy } from '@angular\/core';\r\nimport { CoreComponent, middleware } from '@rxweb\/angular-router'\r\nimport { Router } from '@angular\/router';\r\nimport { LoggedInMiddleware } from 'src\/app\/domain\/security\/middleware\/logged-in.middleware';\r\n\r\n\/\/ Middleware decorator\r\n@middleware([LoggedInMiddleware])\r\n\r\n@Component({\r\n    selector: 'app-login',\r\n    templateUrl: '.\/login.component.html',\r\n    styleUrls: ['.\/login.component.css']\r\n})\r\n\r\nexport class LoginComponent  implements OnInit {\r\n    constructor(private router : Router) {\r\n    }\r\n\r\n    ngOnInit(): void {\r\n       \r\n    }\r\n\r\n    login(): void {\r\n       this.router.navigate(['\/dashboard'])\r\n    }\r\n  \r\n\r\n}\r\n",
        "modelName": null,
        "json": {}
    },
    "router": {
        "notes": [],
        "component": "import { BrowserModule } from '@angular\/platform-browser';\r\nimport { NgModule } from '@angular\/core';\r\nimport { routerModule, RxRoutingModule } from '@rxweb\/angular-router'\r\nimport { AppRoutingModule } from '.\/app-routing.module';\r\nimport { AppComponent } from '.\/app.component';\r\nimport { LoginComponent } from '.\/login\/login.component';\r\nimport { DashboardComponent } from '.\/dashboard\/dashboard.component';\r\nimport { RxWebModule } from '.\/rxweb.module';\r\n\r\nimport { BreadCrumbContentResolver } from '.\/security\/middlewares\/bread-crumb-content-resolver';\r\n\r\n@routerModule({\r\n  middlewares:[BreadCrumbContentResolver]\r\n})\r\n@NgModule({\r\n  declarations: [\r\n    AppComponent,\r\n    LoginComponent,\r\n    DashboardComponent\r\n  ],\r\n  imports: [\r\n    RxRoutingModule,\r\n    RxWebModule,\r\n    BrowserModule,\r\n    AppRoutingModule\r\n  ],\r\n  providers: [],\r\n  bootstrap: [AppComponent]\r\n})\r\nexport class AppModule { }\r\n",
        "html": "export class MessageMiddleware implements IMiddleware {\r\n    constructor(private contacts: Contacts, private messageService: MessageService) {\r\n        this.getContacts();\r\n    }\r\n\r\n    sendMessage(user: any) {\r\n        const message = this.messageComponent.Message;\r\n        console.log('number=' + ', message= ' + message);\r\n    }\r\n\r\n    this.messageService.send(user, options).then(() => {\r\n        this.successAlert('Success', 'message has been sent');\r\n    })\r\n    .catch(error => {\r\n        this.errorAlert('Error', 'Failed: ' + error);\r\n    });\r\n}",
        "model": "import { Injectable } from \"@angular\/core\";\r\nimport { IMiddleware } from \"@rxweb\/angular-router\";\r\nimport { Router, ActivatedRouteSnapshot } from \"@angular\/router\";\r\nimport { HttpClient } from \"@angular\/common\/http\";\r\n\r\nexport var breadCrumdata: any;\r\n@Injectable({\r\n  providedIn: \"root\"\r\n})\r\nexport abstract class BreadCrumbContentResolver implements IMiddleware {\r\n  constructor(private http: HttpClient, private router: Router) {}\r\n  invoke(user: { [key: string]: any }) {\r\n    let name = this.router.url.split(\"\/\")[1];\r\n    if (name) {\r\n      const promise = new Promise<any>((resolve, reject) => {\r\n        if (breadCrumdata == undefined || breadCrumdata == null)\r\n          this.http\r\n            .get(`\/assets\/breadcrumb\/${name}.json`)\r\n            .subscribe(response => {\r\n              resolve(response);\r\n            });\r\n      });\r\n      return promise;\r\n    }\r\n  }\r\n}\r\n",
        "modelName": null,
        "json": {}
    }
}