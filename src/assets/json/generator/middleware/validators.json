{"rightSidebarLinks":[{"id":"middleware","title":"middleware","subLink":null},{"id":"middleware","title":"middleware","subLink":[]}],"title":"middleware","description":"","validatorType":"validators","validationTypeTitle":"Validators","type":"simple","gitDocPath":"https://github.com/rxweb/rxweb.io/edit/master/docs/angular/routes/middleware.md","category":"router","subCategory":"","linkTitle":"middleware","tabArray":{},"innerHtml":null,"htmlContent":"<p class='showHideElement' >Whenever a request is made to the server, middleware runs in the front of each request made by the router at a specific route. Lets consider a scenario where you want to check whether the authorization token is present into the web storage. The <span class='highlighted'>middleware</span> attribute of the @routerModule allows you to add a middleware during the route.  here is an example of using a middleware into <span class='highlighted'>@routerModule</span> for resolving the multilingual data.</p>\r\n<p class='showHideElement' >Here in this class, the global multilingual data is used for resolving the global multilingual data and component multilingual data is used  for resolving the component specific multilingual data. For more information related to multilingual data, have a look at <a class=\"redirect-link\" href=\"/rxweb-localization/localization/localization-quick-start\">Multilingual data</a></p>\r\n<div component=\"app-code\" key=\"middleware-router-component\"></div> \r\n<div class='row page-section' id= 'middleware'>\r\n<div class='col-lg-12'>\r\n<h2>middleware<a title='Link to this heading' class='link-header' href='/router/middleware/validators#middleware'><i class='fa fa-link'></i></a></h2>\r\n\r\n<p class='showHideElement' >Using @middleware helps yoy to add middleware at the component level. Here is an example of using login middleware for the login component which  </p>\r\n<p class='showHideElement' >gets the anonymous web token generated. </p>\r\n<div component=\"app-code\" key=\"middleware-complete-model\"></div> \r\n<p class='showHideElement' >The second step is to pass the <span class='highlighted'>@middleware</span> decorator into the component as below </p>\r\n<div component=\"app-code\" key=\"anonymous-complete-component\"></div> \r\n</div></div>\r\n"}