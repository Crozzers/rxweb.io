{"rightSidebarLinks":[{"id":"data-access","title":"data-access","subLink":null},{"id":"accessingthedata","title":"Accessing the data","subLink":[]}],"title":"data access","description":"","validatorType":"template-driven","validationTypeTitle":"Template Driven Decorator","type":"simple","gitDocPath":"https://github.com/rxweb/rxweb.io/edit/master/docs/angular/learn/data-access.md","category":"learn","subCategory":null,"linkTitle":"data-access","tabArray":{},"innerHtml":null,"htmlContent":"<div class='row page-section' id= 'accessingthedata'>\r\n<div class='col-lg-12'>\r\n<h2>Accessing the data<a title='Link to this heading' class='link-header' href='/learn/data-access/template-driven/decorators#accessingthedata'><i class='fa fa-link'></i></a></h2>\r\n\r\n<p class='showHideElement' >After the creation of the user registration form, lets proceed towards interacting with the server for fetching, writing, updating and deleting the data, using the @http decorator provided by the <span class='highlighted'>@rxweb/http</span> package. <a class=\"redirect-link\" href=\"/rxweb-http/http-getting-started\" target=\"_blank\">@rxweb/http</a> is a typescript compatible package to make request to the server and interact with the data.</p>\r\n<p class='showHideElement' >1) Lets begin towards globally registering the HttpClientConfig in the app component    </p>\r\n<div component=\"app-code\" key=\"data-access-add-component\"></div> \r\n<p class='showHideElement' >2) Creating user service class </p>\r\n<p class='showHideElement' >Creating user service class and creating add user method to be further used in component.</p>\r\n<div component=\"app-code\" key=\"data-access-add-service\"></div> \r\n<p class='showHideElement' >3) Injecting the service in the user component</p>\r\n<div component=\"app-code\" key=\"data-access-add-model\"></div> \r\n</div></div>\r\n"}