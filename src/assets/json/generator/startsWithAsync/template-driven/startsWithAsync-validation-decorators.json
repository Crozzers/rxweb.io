{"complete":{"notes":[],"component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup,Validators } from \"@angular/forms\"\r\nimport { User } from './user.model';\r\n\r\n@Component({\r\n    selector: 'app-startsWithAsync-complete-template-driven-validation-decorators',\r\n    templateUrl: './starts-with-async-complete.component.html'\r\n})\r\nexport class StartsWithAsyncCompleteTemplateDrivenValidationDecoratorsComponent implements OnInit {\r\n    user: User\r\n\t\r\n    constructor(\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n       this.user= new User()\r\n    }\r\n}\r\n","html":"<div>\r\n  <form #userForm = \"ngForm\" [rxwebForm]=\"userForm\" [model]=\"user\">\r\n    <div class=\"form-group\">\r\n      <label>Name</label>\r\n\t    <input type=\"text\" name=\"name\" [(ngModel)]=\"user.name\"  class=\"form-control\" />\r\n\r\n\t   <small class=\"form-text text-danger\" *ngIf=\"userForm.controls?.name?.errors\">{{userForm.controls?.name?.errors?.startsWith.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Department</label>\r\n\t    <input type=\"text\" name=\"department\" [(ngModel)]=\"user.department\"  class=\"form-control\" />\r\n\r\n      <small class=\"form-text text-muted\">Input should not startsWith `D`<br/></small>\r\n\t   <small class=\"form-text text-danger\" *ngIf=\"userForm.controls?.department?.errors\">{{userForm.controls?.department?.errors?.startsWith.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Company</label>\r\n\t    <input type=\"text\" name=\"company\" [(ngModel)]=\"user.company\"  class=\"form-control\" />\r\n\r\n      <small class=\"form-text text-muted\">Input should startsWith `R`<br/></small>\r\n      <small class=\"form-text text-muted\">Shows custom message<br/></small>\r\n\t   <small class=\"form-text text-danger\" *ngIf=\"userForm.controls?.company?.errors\">{{userForm.controls?.company?.errors?.startsWith.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Skill</label>\r\n\t    <input type=\"text\" name=\"skill\" [(ngModel)]=\"user.skill\"  class=\"form-control\" />\r\n\r\n      <small class=\"form-text text-muted\">custom message based on messageKey<br/></small>\r\n\t   <small class=\"form-text text-danger\" *ngIf=\"userForm.controls?.skill?.errors\">{{userForm.controls?.skill?.errors?.startsWith.message}}<br/></small>\t\r\n    </div>\r\n    <button [disabled]=\"!userForm.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","model":"import {  startsWithAsync, } from   \"@rxweb/reactive-form-validators\"   \r\n\r\nexport class User {\r\n\r\n\t@startsWithAsync({validatorConfig:of({value:'B'})}) \r\n\tname: string;\r\n\t\r\n\t\r\n\t@startsWithAsync({validatorConfig:of({value:'D'  ,isRestrict:true})}) \r\n\tdepartment: string;\r\n\t\r\n\t\r\n\t@startsWithAsync({validatorConfig:of({value:'R'  ,message:'{{0}} does not starts with `R`'})}) \r\n\tcompany: string;\r\n\t\r\n\t\r\n\t@startsWithAsync({validatorConfig:of({value:'A'  ,messageKey:'startsWithMessageKey'})}) \r\n\tskill: string;\r\n\t\r\n\t\r\n}\r\n","modelName":"user.model.ts","json":{}},"valueExample":{"notes":null,"component":null,"html":null,"model":"@startsWithAsync({validatorConfig:of({value:'B'})}) \r\nname: string;\r\n","modelName":null,"json":{}},"value":{"notes":[],"component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup,Validators } from \"@angular/forms\"\r\nimport { User } from './user.model';\r\n\r\n@Component({\r\n    selector: 'app-startsWithAsync-value-template-driven-validation-decorators',\r\n    templateUrl: './starts-with-async-value.component.html'\r\n})\r\nexport class StartsWithAsyncValueTemplateDrivenValidationDecoratorsComponent implements OnInit {\r\n    user: User\r\n\t\r\n    constructor(\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n       this.user= new User()\r\n    }\r\n}\r\n","html":"<div>\r\n  <form #userForm = \"ngForm\" [rxwebForm]=\"userForm\" [model]=\"user\">\r\n    <div class=\"form-group\">\r\n      <label>Name</label>\r\n\t    <input type=\"text\" name=\"name\" [(ngModel)]=\"user.name\"  class=\"form-control\" />\r\n\r\n\t   <small class=\"form-text text-danger\" *ngIf=\"userForm.controls?.name?.errors\">{{userForm.controls?.name?.errors?.startsWith.message}}<br/></small>\t\r\n    </div>\r\n    <button [disabled]=\"!userForm.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","model":"import {  startsWithAsync, } from   \"@rxweb/reactive-form-validators\"   \r\n\r\nexport class User {\r\n\r\n\t@startsWithAsync({validatorConfig:of({value:'B'})}) \r\n\tname: string;\r\n\t\r\n\t\r\n}\r\n","modelName":"user.model.ts","json":{}},"isRestrictExample":{"notes":null,"component":null,"html":null,"model":"@startsWithAsync({validatorConfig:of({value:'D'  ,isRestrict:true})}) \r\ndepartment: string;\r\n","modelName":null,"json":{}},"isRestrict":{"notes":[],"component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup,Validators } from \"@angular/forms\"\r\nimport { User } from './user.model';\r\n\r\n@Component({\r\n    selector: 'app-startsWithAsync-isRestrict-template-driven-validation-decorators',\r\n    templateUrl: './starts-with-async-is-restrict.component.html'\r\n})\r\nexport class StartsWithAsyncIsRestrictTemplateDrivenValidationDecoratorsComponent implements OnInit {\r\n    user: User\r\n\t\r\n    constructor(\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n       this.user= new User()\r\n    }\r\n}\r\n","html":"<div>\r\n  <form #userForm = \"ngForm\" [rxwebForm]=\"userForm\" [model]=\"user\">\r\n    <div class=\"form-group\">\r\n      <label>Department</label>\r\n\t    <input type=\"text\" name=\"department\" [(ngModel)]=\"user.department\"  class=\"form-control\" />\r\n\r\n      <small class=\"form-text text-muted\">Input should not startsWith `D`<br/></small>\r\n\t   <small class=\"form-text text-danger\" *ngIf=\"userForm.controls?.department?.errors\">{{userForm.controls?.department?.errors?.startsWith.message}}<br/></small>\t\r\n    </div>\r\n    <button [disabled]=\"!userForm.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","model":"import {  startsWithAsync, } from   \"@rxweb/reactive-form-validators\"   \r\n\r\nexport class User {\r\n\r\n\t@startsWithAsync({validatorConfig:of({value:'D'  ,isRestrict:true})}) \r\n\tdepartment: string;\r\n\t\r\n\t\r\n}\r\n","modelName":"user.model.ts","json":{}},"messageExample":{"notes":null,"component":null,"html":null,"model":"@startsWithAsync({validatorConfig:of({value:'R'  ,message:'{{0}} does not starts with `R`'})}) \r\ncompany: string;\r\n","modelName":null,"json":{}},"message":{"notes":[],"component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup,Validators } from \"@angular/forms\"\r\nimport { User } from './user.model';\r\n\r\n@Component({\r\n    selector: 'app-startsWithAsync-message-template-driven-validation-decorators',\r\n    templateUrl: './starts-with-async-message.component.html'\r\n})\r\nexport class StartsWithAsyncMessageTemplateDrivenValidationDecoratorsComponent implements OnInit {\r\n    user: User\r\n\t\r\n    constructor(\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n       this.user= new User()\r\n    }\r\n}\r\n","html":"<div>\r\n  <form #userForm = \"ngForm\" [rxwebForm]=\"userForm\" [model]=\"user\">\r\n    <div class=\"form-group\">\r\n      <label>Company</label>\r\n\t    <input type=\"text\" name=\"company\" [(ngModel)]=\"user.company\"  class=\"form-control\" />\r\n\r\n      <small class=\"form-text text-muted\">Input should startsWith `R`<br/></small>\r\n      <small class=\"form-text text-muted\">Shows custom message<br/></small>\r\n\t   <small class=\"form-text text-danger\" *ngIf=\"userForm.controls?.company?.errors\">{{userForm.controls?.company?.errors?.startsWith.message}}<br/></small>\t\r\n    </div>\r\n    <button [disabled]=\"!userForm.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","model":"import {  startsWithAsync, } from   \"@rxweb/reactive-form-validators\"   \r\n\r\nexport class User {\r\n\r\n\t@startsWithAsync({validatorConfig:of({value:'R'  ,message:'{{0}} does not starts with `R`'})}) \r\n\tcompany: string;\r\n\t\r\n\t\r\n}\r\n","modelName":"user.model.ts","json":{}},"messageKeyExample":{"notes":null,"component":null,"html":null,"model":"@startsWithAsync({validatorConfig:of({value:'A'  ,messageKey:'startsWithMessageKey'})}) \r\nskill: string;\r\n","modelName":null,"json":{}},"messageKey":{"notes":[],"component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup,Validators } from \"@angular/forms\"\r\nimport { User } from './user.model';\r\n\r\n@Component({\r\n    selector: 'app-startsWithAsync-messageKey-template-driven-validation-decorators',\r\n    templateUrl: './starts-with-async-message-key.component.html'\r\n})\r\nexport class StartsWithAsyncMessageKeyTemplateDrivenValidationDecoratorsComponent implements OnInit {\r\n    user: User\r\n\t\r\n    constructor(\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n       this.user= new User()\r\n    }\r\n}\r\n","html":"<div>\r\n  <form #userForm = \"ngForm\" [rxwebForm]=\"userForm\" [model]=\"user\">\r\n    <div class=\"form-group\">\r\n      <label>Skill</label>\r\n\t    <input type=\"text\" name=\"skill\" [(ngModel)]=\"user.skill\"  class=\"form-control\" />\r\n\r\n      <small class=\"form-text text-muted\">custom message based on messageKey<br/></small>\r\n\t   <small class=\"form-text text-danger\" *ngIf=\"userForm.controls?.skill?.errors\">{{userForm.controls?.skill?.errors?.startsWith.message}}<br/></small>\t\r\n    </div>\r\n    <button [disabled]=\"!userForm.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","model":"import {  startsWithAsync, } from   \"@rxweb/reactive-form-validators\"   \r\n\r\nexport class User {\r\n\r\n\t@startsWithAsync({validatorConfig:of({value:'A'  ,messageKey:'startsWithMessageKey'})}) \r\n\tskill: string;\r\n\t\r\n\t\r\n}\r\n","modelName":"user.model.ts","json":{}},"add":{"notes":[],"component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup,Validators } from \"@angular/forms\"\r\nimport { User } from './user.model';\r\n\r\n@Component({\r\n    selector: 'app-startsWithAsync-add-template-driven-validation-decorators',\r\n    templateUrl: './starts-with-async-add.component.html'\r\n})\r\nexport class StartsWithAsyncAddTemplateDrivenValidationDecoratorsComponent implements OnInit {\r\n    user: User\r\n\t\r\n    constructor(\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n       this.user= new User()\r\n    }\r\n}\r\n","html":"<div>\r\n  <form #userForm = \"ngForm\" [rxwebForm]=\"userForm\" [model]=\"user\">\r\n    <div class=\"form-group\">\r\n      <label>Name</label>\r\n\t    <input type=\"text\" name=\"name\" [(ngModel)]=\"user.name\"  class=\"form-control\" />\r\n\r\n      <small class=\"form-text text-muted\">You can enter value which starts with 'n'<br/></small>\r\n\t   <small class=\"form-text text-danger\" *ngIf=\"userForm.controls?.name?.errors\">{{userForm.controls?.name?.errors?.startsWith.message}}<br/></small>\t\r\n    </div>\r\n    <button [disabled]=\"!userForm.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","model":"import {  startsWithAsync, } from   \"@rxweb/reactive-form-validators\"   \r\n\r\nexport class User {\r\n\r\n\t@startsWithAsync({validatorConfig:of({value:'n'})}) \r\n\tname: string;\r\n\t\r\n\t\r\n}\r\n","modelName":"user.model.ts","json":{}}}