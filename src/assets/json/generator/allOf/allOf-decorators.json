{
  "complete": {
    "notes": null,
    "component": "import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from \"@angular/forms\"\r\nimport { RxFormBuilder } from '@rxweb/reactive-form-validators';\r\n\r\nimport { EmployeeInfo } from './employee-info.model';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { environment } from 'src/environments/environment';\r\n\r\n@Component({\r\n    selector: 'app-allOf-complete',\r\n    templateUrl: './all-of-complete.component.html'\r\n})\r\nexport class AllOfCompleteComponent implements OnInit {\r\n    employeeInfoFormGroup: FormGroup;\r\n    projectDomains: string[] = [];\r\n    qualifications: string[] = [];\r\n    hobbies: string[] = [];\r\n    skills: string[] = [];\r\n\r\n    constructor(\r\n      private formBuilder: RxFormBuilder, private http: HttpClient) { }\r\n\r\n      qualificationsArray: string[] = [\"Secondary\",\"Senior Secondary\",\"B.Tech.\",\"M.Tech.\",\"B.C.A.\",\"M.C.A.\"];\r\n      skillsArray: string[] = [\"MVC\",\"AngularJS\",\"Angular 5\",\"C#\",\"Web Api\",\"SQL Server\"];\r\n      hobbiesArray: string[] = [\"Drawing\",\"Singing\",\"Dancing\",\"Travelling\",\"Sports\"];\r\n      projectDomainsArray : string[] = [\"ECommerce\", \"Banking\", \"Educational\", \"Gaming\"];\r\n\r\n    ngOnInit() {\r\n        let employeeInfo = new EmployeeInfo();\r\n        this.employeeInfoFormGroup = this.formBuilder.formGroup(employeeInfo);\r\n    }\r\n\r\n    addProjectDomain(element: any,index:number) {\r\n      var indexOf = this.projectDomains.indexOf(element.value);\r\n      element.checked ? this.projectDomains.push(element.value) : this.projectDomains.splice(indexOf,1);\r\n       this.employeeInfoFormGroup.controls.projectDomains.setValue(this.projectDomains);\r\n    }\r\n\r\n    addQualification(element: any,index:number) {\r\n      var indexOf = this.qualifications.indexOf(element.value);\r\n      element.checked ? this.qualifications.push(element.value) : this.qualifications.splice(indexOf,1);\r\n       this.employeeInfoFormGroup.controls.qualifications.setValue(this.qualifications);\r\n    }\r\n\r\n    addSkill(element: any,index:number) {\r\n      var indexOf = this.skills.indexOf(element.value);\r\n      element.checked ? this.skills.push(element.value) : this.skills.splice(indexOf,1);\r\n       this.employeeInfoFormGroup.controls.skills.setValue(this.skills);\r\n    }\r\n\r\n      addHobby(element: any,index:number) {\r\n        var indexOf = this.hobbies.indexOf(element.value);\r\n        element.checked ? this.hobbies.push(element.value) : this.hobbies.splice(indexOf,1);\r\n         this.employeeInfoFormGroup.controls.hobbies.setValue(this.hobbies);\r\n      }\r\n}\r\n",
    "html": "<div>\r\n<form [formGroup]=\"employeeInfoFormGroup\">\r\n  <div class=\"form-group\">\r\n    <label>Department</label>\r\n    <input type=\"text\" formControlName=\"department\" class=\"form-control\" placeholder=\"Enter any department\" />\r\n  </div>\r\n  <div class=\"form-group\">\r\n    <label>Project Domains</label>\r\n    <div class=\"form-check\" *ngFor=\"let tag of projectDomainsArray; let i = index;\">\r\n        <h4>\r\n          <input (click)=\"addProjectDomain($event.target,i)\" type=\"checkbox\" value=\"{{tag}}\" /> {{tag}}\r\n        </h4>\r\n      </div>\r\n      <br>\r\n      <small class=\"form-text text-muted\">You must select all values.</small><br>\r\n      <small class=\"form-text text-danger\" *ngIf=\"employeeInfoFormGroup.controls.projectDomains.errors\">{{employeeInfoFormGroup.controls.projectDomains.errors.allOf.message}}<br></small>\r\n  </div>\r\n  <div class=\"form-group\">\r\n    <label>Qualifications</label>\r\n    <div class=\"form-check\" *ngFor=\"let tag of qualificationsArray; let i = index;\">\r\n      <h4>\r\n        <input (click)=\"addQualification($event.target,i)\"  type=\"checkbox\" value=\"{{tag}}\" /> {{tag}}\r\n      </h4>\r\n    </div>\r\n    <br>\r\n    <small class=\"form-text text-danger\" *ngIf=\"employeeInfoFormGroup.controls.qualifications.errors\">{{employeeInfoFormGroup.controls.qualifications.errors.allOf.message}}</small><br>\r\n    <small class=\"form-text text-muted\" >To apply the validation on 'Qualifications' field, enter 'DotNet' in 'Department' field</small><br>\r\n  </div>\r\n  <div class=\"form-group\">\r\n    <label>Skills</label><small>( With Conditional Expression )</small><br>\r\n    <div class=\"form-check\" *ngFor=\"let tag of skillsArray; let i = index;\">\r\n      <h4>\r\n        <input (click)=\"addSkill($event.target,i)\" type=\"checkbox\" value=\"{{tag}}\" /> {{tag}}\r\n      </h4>\r\n    </div>\r\n    <br>\r\n    <small class=\"form-text text-danger\" *ngIf=\"employeeInfoFormGroup.controls.skills.errors\">{{employeeInfoFormGroup.controls.skills.errors.allOf.message}}</small><br>\r\n    <small class=\"form-text text-muted\" >To apply the validation on 'Skills' field, enter 'DotNet' in 'Department' field</small><br>\r\n  </div>\r\n  <div class=\"form-group\">\r\n    <label>Hobbies</label>\r\n    <div class=\"form-check\" *ngFor=\"let tag of hobbiesArray; let i = index;\">\r\n        <h4>\r\n          <input (click)=\"addHobby($event.target,i)\" type=\"checkbox\" value=\"{{tag}}\" /> {{tag}}\r\n        </h4>\r\n      </div>\r\n      <br>\r\n      <small class=\"form-text text-danger\" *ngIf=\"employeeInfoFormGroup.controls.hobbies.errors\">{{employeeInfoFormGroup.controls.hobbies.errors.allOf.message}}</small><br>\r\n    <small class=\"form-text text-muted\">Shows custom message</small><br>\r\n  </div>\r\n  <button [disabled]=\"!employeeInfoFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n</form>\r\n</div>",
    "model": "import {  allOf,prop  } from \"@rxweb/reactive-form-validators\"\r\n\r\nexport class EmployeeInfo{\r\n\r\n    @prop()\r\n    department: string;\r\n    \r\n    @allOf({matchValues:[\"ECommerce\", \"Banking\",\"Educational\",\"Gaming\"]})\r\n    projectDomains: string;\r\n\r\n    @allOf({matchValues:[\"Secondary\",\"Senior Secondary\",\"B.Tech\",\"M.Tech\",\"B.C.A.\",\"M.C.A.\"], conditionalExpression: (x,y) => x.department =='DotNet'})\r\n\tqualifications: string[];\r\n\r\n    @allOf({matchValues: [\"MVC\", \"AngularJS\",\"Angular 5\",\"C#\",\"Web Api\",\"SQL Server\"], conditionalExpression: \"x => x.department =='DotNet'\"})\r\n    skills: string;\r\n\r\n    @allOf({matchValues:[\"Drawing\", \"Singing\",\"Dancing\",\"Travelling\",\"Sports\"],message: \"Please select all hobbies\"})\r\n    hobbies: string;\r\n}",
    "modelName": "employee-info.model.ts",
    "json": null
    },
  "matchValuesExample": {
    "notes": null,
    "component": null,
    "html": null,
    "model": "@allOf({matchValues:[\"ECommerce\", \"Banking\",\"Educational\",\"Gaming\"]})\r\n    projectDomains: string;",
    "modelName": null,
    "json": null
  },
  "matchValues": {
    "notes": null,
    "component": "import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from \"@angular/forms\"\r\nimport { RxFormBuilder } from '@rxweb/reactive-form-validators';\r\n\r\nimport { EmployeeInfo } from './employee-info.model';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { environment } from 'src/environments/environment';\r\n\r\n@Component({\r\n    selector: 'app-allOf-matchValues',\r\n    templateUrl: './all-of-match-values.component.html'\r\n})\r\nexport class AllOfMatchValuesComponent implements OnInit {\r\n    employeeInfoFormGroup: FormGroup\r\n    projectDomains: string[] = [];\r\n \r\n    constructor(\r\n        private formBuilder: RxFormBuilder ,private http: HttpClient) { }\r\n\r\n        projectDomainsArray : string[] = [\"ECommerce\", \"Banking\", \"Educational\", \"Gaming\"];\r\n      \r\n        ngOnInit() {\r\n          let employeeInfo = new EmployeeInfo();\r\n          this.employeeInfoFormGroup = this.formBuilder.formGroup(employeeInfo);\r\n        }\r\n\r\n        addProjectDomain(element: any,index:number) {\r\n          var indexOf = this.projectDomains.indexOf(element.value);\r\n          element.checked ? this.projectDomains.push(element.value) : this.projectDomains.splice(indexOf,1);\r\n           this.employeeInfoFormGroup.controls.projectDomains.setValue(this.projectDomains);\r\n        }\r\n}\r\n",
    "html": "<div>\r\n  <form [formGroup]=\"employeeInfoFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label>Project Domains</label>\r\n      <div class=\"form-check\" *ngFor=\"let tag of projectDomainsArray; let i = index;\">\r\n        <h4>\r\n          <input (click)=\"addProjectDomain($event.target,i)\"  type=\"checkbox\" value=\"{{tag}}\" /> {{tag}}\r\n        </h4>\r\n      </div>\r\n      <br>\r\n      <small class=\"form-text text-muted\">allOf validation using matchValues.</small><br>\r\n      <small class=\"form-text text-danger\" *ngIf=\"employeeInfoFormGroup.controls.projectDomains.errors\">{{employeeInfoFormGroup.controls.projectDomains.errors.allOf.message}}</small><br>\r\n    </div>\r\n    <button [disabled]=\"!employeeInfoFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>",
    "model": "import {  allOf  } from \"@rxweb/reactive-form-validators\"\r\n\r\nexport class EmployeeInfo{\r\n\r\n    @allOf({matchValues:[\"ECommerce\", \"Banking\",\"Educational\",\"Gaming\"]})\r\n    projectDomains: string;\r\n}",
    "modelName": "employee-info.model.ts",
    "json": null
    },
    "messageExample": {
      "notes": null,
      "component": null,
      "html": null,
      "model": "@allOf({matchValues:[\"Drawing\", \"Singing\",\"Dancing\",\"Travelling\",\"Sports\"],message: \"Please select all hobbies\"})\r\n    hobbies: string;",
      "modelName": null,
      "json": null
    },
  "message": {
    "notes": null,
    "component": "import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from \"@angular/forms\"\r\nimport { RxFormBuilder } from '@rxweb/reactive-form-validators';\r\n\r\nimport { EmployeeInfo } from './employee-info.model';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { environment } from 'src/environments/environment.prod';\r\n\r\n@Component({\r\n    selector: 'app-allOf-message',\r\n    templateUrl: './all-of-message.component.html'\r\n})\r\nexport class AllOfMessageComponent implements OnInit {\r\n    employeeInfoFormGroup: FormGroup\r\n    hobbies: string[] = [];\r\n\r\n    constructor(\r\n        private formBuilder: RxFormBuilder, private http: HttpClient) { }\r\n\r\n        hobbiesArray: string[] = [\"Drawing\",\"Singing\",\"Dancing\",\"Travelling\",\"Sports\"];\r\n\r\n    ngOnInit() {\r\n        let employeeInfo = new EmployeeInfo();\r\n        this.employeeInfoFormGroup = this.formBuilder.formGroup(employeeInfo);\r\n    }\r\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                     \r\n    addHobby(element: any,index:number) {\r\n        var indexOf = this.hobbies.indexOf(element.value);\r\n        element.checked ? this.hobbies.push(element.value) : this.hobbies.splice(indexOf,1);\r\n         this.employeeInfoFormGroup.controls.hobbies.setValue(this.hobbies);\r\n      }\r\n}\r\n",
    "html": "<div>\r\n<form [formGroup]=\"employeeInfoFormGroup\">\r\n  <div class=\"form-group\">\r\n    <label>Hobbies</label>\r\n    <div class=\"form-check\" *ngFor=\"let tag of hobbiesArray; let i = index;\">\r\n        <h4>\r\n          <input (click)=\"addHobby($event.target,i)\" type=\"checkbox\" value=\"{{tag}}\" /> {{tag}}\r\n        </h4>\r\n      </div>\r\n      <br>\r\n      <small class=\"form-text text-danger\" *ngIf=\"employeeInfoFormGroup.controls.hobbies.errors\">{{employeeInfoFormGroup.controls.hobbies.errors.allOf.message}}</small><br>\r\n    <small class=\"form-text text-muted\">Shows custom message</small><br>\r\n  </div>\r\n  <button [disabled]=\"!employeeInfoFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n</form>\r\n</div>",
    "model": "import {  allOf,prop  } from \"@rxweb/reactive-form-validators\"\r\n\r\nexport class EmployeeInfo{\r\n\r\n    @prop()\r\n    department: string;\r\n    \r\n    @allOf({matchValues:[\"ECommerce\", \"Banking\",\"Educational\",\"Gaming\"]})\r\n    projectDomains: string;\r\n\r\n    @allOf({matchValues:[\"Secondary\",\"Senior Secondary\",\"B.Tech\",\"M.Tech\",\"B.C.A.\",\"M.C.A.\"], conditionalExpression: (x,y) => x.department =='DotNet'})\r\n\tqualifications: string[];\r\n\r\n    @allOf({matchValues: [\"MVC\", \"AngularJS\",\"Angular 5\",\"C#\",\"Web Api\",\"SQL Server\"], conditionalExpression: \"x => x.department =='DotNet'\"})\r\n    skills: string;\r\n\r\n    @allOf({matchValues:[\"Drawing\", \"Singing\",\"Dancing\",\"Travelling\",\"Sports\"],message: \"Please select all hobbies\"})\r\n    hobbies: string;\r\n}",
    "modelName": "employee-info.model.ts",
    "json": null
    },
    "messageKeyExample": {
      "notes": null,
      "component": null,
      "html": null,
      "model": "@allOf({ matchValues: [\"English\", \"Spanish\", \"French\"], messageKey: 'allOfMessageKey' })\r\n    languages: string;",
      "modelName": null,
      "json": null
    },
    "messageKey": {
      "notes": null,
      "component": "import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from \"@angular/forms\"\r\nimport { RxFormBuilder } from '@rxweb/reactive-form-validators';\r\n\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { environment } from 'src/environments/environment';\r\nimport { EmployeeInfo } from './employee-info.model';\r\n\r\n@Component({\r\n  selector: 'app-allOf-messageKey',\r\n  templateUrl: './all-of-message-key.component.html'\r\n})\r\nexport class AllOfMessageKeyComponent implements OnInit {\r\n  employeeInfoFormGroup: FormGroup\r\n  languages: string[] = [];\r\n\r\n  constructor(\r\n    private formBuilder: RxFormBuilder, private http: HttpClient) { }\r\n\r\n  languagesArray: string[] = [\"English\", \"Spanish\", \"French\", \"German\", \"Chinese\"];\r\n\r\n  ngOnInit() {\r\n    let employeeInfo = new EmployeeInfo();\r\n    this.employeeInfoFormGroup = this.formBuilder.formGroup(employeeInfo);\r\n  }\r\n\r\n  addLanguage(element: any) {\r\n    var indexOf = this.languages.indexOf(element.value);\r\n    element.checked ? this.languages.push(element.value) : this.languages.splice(indexOf, 1);\r\n    this.employeeInfoFormGroup.controls.languages.setValue(this.languages);\r\n  }\r\n}\r\n",
      "html": "<div>\r\n  <form [formGroup]=\"employeeInfoFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label>Languages</label>\r\n      <div class=\"form-check\" *ngFor=\"let tag of languagesArray\">\r\n        <h4>\r\n          <input (click)=\"addLanguage($event.target)\" type=\"checkbox\" value=\"{{tag}}\" /> {{tag}}\r\n        </h4>\r\n      </div>\r\n      <br>\r\n      <small class=\"form-text text-muted\">allOf validation using messageKey.</small><br>\r\n      <small class=\"form-text text-danger\" *ngIf=\"employeeInfoFormGroup.controls?.languages?.errors\">{{employeeInfoFormGroup.controls.languages.errors.allOf.message}}</small><br>\r\n    </div>\r\n    <button [disabled]=\"!employeeInfoFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n",
      "model": "import {  allOf  } from \"@rxweb/reactive-form-validators\"\r\n\r\nexport class EmployeeInfo{\r\n\r\n  @allOf({ matchValues: [\"English\", \"Spanish\", \"French\"], messageKey: 'allOfMessageKey' })\r\n    languages: string;\r\n}\r\n",
      "modelName": "employee-info.model.ts",
      "json": null
    },
    "conditionalExpressionExampleFunction": {
      "notes": null,
      "component": null,
      "html": null,
      "model": "@allOf({matchValues:[\"Secondary\",\"Senior Secondary\",\"B.Tech\",\"M.Tech\",\"B.C.A.\",\"M.C.A.\"], conditionalExpression: (x,y) => x.department =='DotNet'})\r\n\tqualifications: string[];",
      "modelName": null,
      "json": null
    },
  "conditionalExpression": {
      "notes": null,
      "component": "import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from \"@angular/forms\"\r\nimport { RxFormBuilder } from '@rxweb/reactive-form-validators';\r\n\r\nimport { EmployeeInfo } from './employee-info.model';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { environment } from 'src/environments/environment';\r\n\r\n@Component({\r\n  selector: 'app-allOf-conditionalExpression',\r\n  templateUrl: './all-of-conditional-expression.component.html'\r\n})\r\nexport class AllOfConditionalExpressionComponent implements OnInit {\r\n  employeeInfoFormGroup: FormGroup\r\n  skills: string[] = [];\r\n  qualifications: string[] = [];\r\n\r\n  constructor(\r\n    private formBuilder: RxFormBuilder, private http: HttpClient) { }\r\n\r\n  qualificationsArray: string[] = [\"Secondary\", \"Senior Secondary\", \"B.Tech.\", \"M.Tech.\", \"B.C.A.\", \"M.C.A.\"];\r\n  skillsArray: string[] = [\"MVC\", \"AngularJS\", \"Angular 5\", \"C#\", \"Web Api\", \"SQL Server\"];\r\n\r\n  ngOnInit() {\r\n    let employeeInfo = new EmployeeInfo();\r\n    this.employeeInfoFormGroup = this.formBuilder.formGroup(employeeInfo);\r\n  }\r\n\r\n  addQualification(element: any, index: number) {\r\n    var indexOf = this.qualifications.indexOf(element.value);\r\n    element.checked ? this.qualifications.push(element.value) : this.qualifications.splice(indexOf, 1);\r\n    this.employeeInfoFormGroup.controls.qualifications.setValue(this.qualifications);\r\n  }\r\n\r\n  addSkill(element: any, index: number) {\r\n    var indexOf = this.skills.indexOf(element.value);\r\n    element.checked ? this.skills.push(element.value) : this.skills.splice(indexOf, 1);\r\n    this.employeeInfoFormGroup.controls.skills.setValue(this.skills);\r\n  }\r\n}",
      "html": "<div>\r\n    <form [formGroup]=\"employeeInfoFormGroup\">\r\n      <div class=\"form-group\">\r\n        <label>Department</label>\r\n        <input type=\"text\" formControlName=\"department\" class=\"form-control\" placeholder=\"Enter any department\" />\r\n      </div>\r\n      <div class=\"form-group\">\r\n        <label>Qualifications</label>\r\n        <div class=\"form-check\" *ngFor=\"let tag of qualificationsArray; let i = index;\">\r\n          <h4>\r\n            <input (click)=\"addQualification($event.target,i)\"  type=\"checkbox\" value=\"{{tag}}\" /> {{tag}}\r\n          </h4>\r\n        </div>\r\n        <br>\r\n        <small class=\"form-text text-danger\" *ngIf=\"employeeInfoFormGroup.controls.qualifications.errors\">{{employeeInfoFormGroup.controls.qualifications.errors.allOf.message}}</small><br>\r\n        <small class=\"form-text text-muted\" >To apply the validation on 'Qualifications' field, enter 'DotNet' in 'Department' field</small><br>\r\n      </div>\r\n      <div class=\"form-group\">\r\n        <label>Skills</label><small>( With Conditional Expression )</small><br>\r\n        <div class=\"form-check\" *ngFor=\"let tag of skillsArray; let i = index;\">\r\n          <h4>\r\n            <input (click)=\"addSkill($event.target,i)\" type=\"checkbox\" value=\"{{tag}}\" /> {{tag}}\r\n          </h4>\r\n        </div>\r\n        <br>\r\n        <small class=\"form-text text-danger\" *ngIf=\"employeeInfoFormGroup.controls.skills.errors\">{{employeeInfoFormGroup.controls.skills.errors.allOf.message}}</small><br>\r\n        <small class=\"form-text text-muted\" >To apply the validation on 'Skills' field, enter 'DotNet' in 'Department' field</small><br>\r\n      </div>\r\n      <button [disabled]=\"!employeeInfoFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n    </form>\r\n    </div>",
      "model": "import {  allOf,prop  } from \"@rxweb/reactive-form-validators\"\r\n\r\nexport class EmployeeInfo{\r\n\r\n    @prop()\r\n    department: string;\r\n\r\n    @allOf({matchValues:[\"Secondary\",\"Senior Secondary\",\"B.Tech\",\"M.Tech\",\"B.C.A.\",\"M.C.A.\"], conditionalExpression: (x,y) => x.department =='DotNet'})\r\n\tqualifications: string[];\r\n\r\n    @allOf({matchValues: [\"MVC\", \"AngularJS\",\"Angular 5\",\"C#\",\"Web Api\",\"SQL Server\"], conditionalExpression: \"x => x.department =='DotNet'\"})\r\n    skills: string;\r\n\r\n}",
      "modelName": "employee-info.model.ts",
      "json":null
    },
    "conditionalExpressionExampleString": {
      "notes": null,
      "component": null,
      "html": null,
      "model": "@allOf({matchValues: [\"MVC\", \"AngularJS\",\"Angular 5\",\"C#\",\"Web Api\",\"SQL Server\"], conditionalExpression: \"x => x.department =='DotNet'\"})\r\n    skills: string;",
      "modelName": null,
      "json": null
    },
  "dynamic": {
    "notes": null,
    "component": "import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from \"@angular/forms\"\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { RxFormBuilder } from '@rxweb/reactive-form-validators';\r\nimport { FormBuilderConfiguration, } from '@rxweb/reactive-form-validators';\r\nimport { EmployeeInfo } from './employee-info.model';\r\n\r\n@Component({\r\n  selector: 'app-allOf-dynamic',\r\n  templateUrl: './all-of-dynamic.component.html'\r\n})\r\nexport class AllOfDynamicComponent implements OnInit {\r\n  employeeInfoFormGroup: FormGroup\r\n  projectDomains: string[] = [];\r\n  skills: string[] = [];\r\n  hobbies: string[] = [];\r\n\r\n  constructor(\r\n    private formBuilder: RxFormBuilder, private http: HttpClient) { }\r\n\r\n    skillsArray: string[] = [\"MVC\",\"AngularJS\",\"Angular 5\",\"C#\",\"Web Api\",\"SQL Server\"];\r\n    hobbiesArray: string[] = [\"Drawing\",\"Singing\",\"Dancing\",\"Travelling\",\"Sports\"];\r\n    projectDomainsArray : string[] = [\"ECommerce\", \"Banking\", \"Educational\", \"Gaming\"];\r\n\r\n  ngOnInit() {\r\n    let employeeInfo = new EmployeeInfo();\r\n    let formBuilderConfiguration = new FormBuilderConfiguration();\r\n    this.http.get('assets/examples/reactive-form-validators/decorators/allOf/dynamic/dynamic.json').subscribe(dynamic => {\r\n      formBuilderConfiguration.dynamicValidation = JSON.parse(JSON.stringify(dynamic));\r\n      this.employeeInfoFormGroup = this.formBuilder.formGroup(employeeInfo, formBuilderConfiguration);\r\n    })\r\n    this.employeeInfoFormGroup = this.formBuilder.formGroup(employeeInfo);\r\n  }\r\n\r\n  addProjectDomain(element: any, index: number) {\r\n    var indexOf = this.projectDomains.indexOf(element.value);\r\n    element.checked ? this.projectDomains.push(element.value) : this.projectDomains.splice(indexOf, 1);\r\n    this.employeeInfoFormGroup.controls.projectDomains.setValue(this.projectDomains);\r\n  }\r\n\r\n  addSkill(element: any, index: number) {\r\n    var indexOf = this.skills.indexOf(element.value);\r\n    element.checked ? this.skills.push(element.value) : this.skills.splice(indexOf, 1);\r\n    this.employeeInfoFormGroup.controls.skills.setValue(this.skills);\r\n  }\r\n\r\n  addHobby(element: any, index: number) {\r\n    var indexOf = this.hobbies.indexOf(element.value);\r\n    element.checked ? this.hobbies.push(element.value) : this.hobbies.splice(indexOf, 1);\r\n    this.employeeInfoFormGroup.controls.hobbies.setValue(this.hobbies);\r\n  }\r\n}",
    "html": "<div>\r\n  <form  *ngIf=\"employeeInfoFormGroup\"  [formGroup]=\"employeeInfoFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label>Department</label>\r\n      <input type=\"text\" formControlName=\"department\" class=\"form-control\" placeholder=\"Enter any department\" />\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Project Domains</label>\r\n      <div class=\"form-check\" *ngFor=\"let tag of projectDomainsArray; let i = index;\">\r\n          <h4>\r\n            <input (click)=\"addProjectDomain($event.target,i)\" type=\"checkbox\" value=\"{{tag}}\" /> {{tag}}\r\n          </h4>\r\n        </div>\r\n        <br>\r\n        <small class=\"form-text text-muted\">You must select all values.</small><br>\r\n        <small class=\"form-text text-danger\" *ngIf=\"employeeInfoFormGroup.controls.projectDomains.errors\">{{employeeInfoFormGroup.controls.projectDomains.errors.allOf.message}}</small><br>\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Skills</label><small>( With Conditional Expression )</small><br>\r\n      <div class=\"form-check\" *ngFor=\"let tag of skillsArray; let i = index;\">\r\n        <h4>\r\n          <input (click)=\"addSkill($event.target,i)\" type=\"checkbox\" value=\"{{tag}}\" /> {{tag}}\r\n        </h4>\r\n      </div>\r\n      <br>\r\n      <small class=\"form-text text-danger\" *ngIf=\"employeeInfoFormGroup.controls.skills.errors\">{{employeeInfoFormGroup.controls.skills.errors.allOf.message}}</small><br>\r\n      <small class=\"form-text text-muted\" >To apply the validation on 'Skills' field, enter 'DotNet' in 'Department' field</small><br>\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Hobbies</label>\r\n      <div class=\"form-check\" *ngFor=\"let tag of hobbiesArray; let i = index;\">\r\n          <h4>\r\n            <input (click)=\"addHobby($event.target,i)\" type=\"checkbox\" value=\"{{tag}}\" /> {{tag}}\r\n          </h4>\r\n        </div>\r\n        <br>\r\n        <small class=\"form-text text-danger\" *ngIf=\"employeeInfoFormGroup.controls.hobbies.errors\">{{employeeInfoFormGroup.controls.hobbies.errors.allOf.message}}</small><br>\r\n      <small class=\"form-text text-muted\">Shows custom message</small><br>\r\n    </div>\r\n    <button [disabled]=\"!employeeInfoFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n  </div>",
    "model": "import {  allOf,prop  } from \"@rxweb/reactive-form-validators\"\r\n\r\nexport class EmployeeInfo{\r\n\r\n    @prop()\r\n    department: string;\r\n    \r\n    @prop()\r\n    projectDomains: string;\r\n\r\n    @prop()\r\n    skills: string;\r\n\r\n    @prop()\r\n    hobbies: string;\r\n}",
    "modelName": "employee-info.model.ts",
    "json": {
      "dynamic.json": "{\r\n    \"department\": {\r\n        \"allOf\": false\r\n    },\r\n    \"projectDomains\": {\r\n        \"allOf\": {\r\n            \"matchValues\": [\"ECommerce\", \"Banking\",\"Educational\",\"Gaming\"]\r\n        }\r\n    },\r\n    \"skills\": {\r\n        \"allOf\": {\r\n            \"matchValues\": [\"MVC\", \"AngularJS\",\"Angular 5\",\"C#\",\"Web Api\",\"SQL Server\"],\r\n            \"conditionalExpression\": \"x => x.department ==\\\"DotNet\\\"\"\r\n        }\r\n    },\r\n    \"hobbies\": {\r\n        \"allOf\": {\r\n            \"matchValues\":[\"Drawing\", \"Singing\",\"Dancing\",\"Travelling\",\"Sports\"],\r\n            \"message\": \"Please select all hobbies.\"\r\n        }\r\n    }\r\n}"
    }
    },
  "add": {
    "notes": null,
    "component": "import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from \"@angular/forms\"\r\nimport { RxFormBuilder } from '@rxweb/reactive-form-validators';\r\n\r\nimport { EmployeeInfo } from './employee-info.model';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { environment } from 'src/environments/environment';\r\n\r\n@Component({\r\n    selector: 'app-allOf-add',\r\n    templateUrl: './all-of-add.component.html'\r\n})\r\nexport class AllOfAddComponent implements OnInit {\r\n    employeeInfoFormGroup: FormGroup;\r\n    projectDomains: string[] = [];\r\n \r\n    constructor(\r\n        private formBuilder: RxFormBuilder ,private http: HttpClient) { }\r\n\r\n        projectDomainsArray : string[] = [\"ECommerce\", \"Banking\", \"Educational\", \"Gaming\"];\r\n      \r\n        ngOnInit() {\r\n          let employeeInfo = new EmployeeInfo();\r\n          this.employeeInfoFormGroup = this.formBuilder.formGroup(employeeInfo);\r\n        }\r\n\r\n        addProjectDomain(element: any,index:number) {\r\n          var indexOf = this.projectDomains.indexOf(element.value);\r\n          element.checked ? this.projectDomains.push(element.value) : this.projectDomains.splice(indexOf,1);\r\n           this.employeeInfoFormGroup.controls.projectDomains.setValue(this.projectDomains);\r\n        }\r\n}",
    "html": "<div>\r\n  <form [formGroup]=\"employeeInfoFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label>Project Domains</label>\r\n      <div class=\"form-check\" *ngFor=\"let tag of projectDomainsArray; let i = index;\">\r\n        <h4>\r\n          <input (click)=\"addProjectDomain($event.target,i)\"  type=\"checkbox\" value=\"{{tag}}\" /> {{tag}}\r\n        </h4>\r\n      </div>\r\n      <br>\r\n      <small class=\"form-text text-muted\">You must select atleast all option provided in the config parameters.</small><br>\r\n      <small class=\"form-text text-danger\" *ngIf=\"employeeInfoFormGroup.controls.projectDomains.errors\">{{employeeInfoFormGroup.controls.projectDomains.errors.allOf.message}}<br></small>\r\n    </div>\r\n    <button [disabled]=\"!employeeInfoFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>",
    "model": "import {  allOf  } from \"@rxweb/reactive-form-validators\"\r\n\r\nexport class EmployeeInfo{\r\n\r\n    @allOf({matchValues:[\"ECommerce\", \"Banking\",\"Educational\",\"Gaming\"]})\r\n    projectDomains: string;\r\n\r\n}",
    "modelName": "employee-info.model.ts",
    "json": null
  }
}
