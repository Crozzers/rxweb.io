{
    "rightSidebarLinks": [
        {
            "id": "creditcardasync",
            "title": "creditCardAsync",
            "subLink": null
        },
        {
            "id": "whentouse",
            "title": "When to use",
            "subLink": []
        },
        {
            "id": "basiccreditcardasyncvalidation",
            "title": "Basic creditCardAsync Validation",
            "subLink": []
        },
        {
            "id": "validatorconfig",
            "title": "ValidatorConfig",
            "subLink": [
                {
                    "title": "creditCardTypes",
                    "id": "creditCardTypes",
                    "thirdLevelLink": []
                },
                {
                    "title": "message",
                    "id": "message",
                    "thirdLevelLink": []
                },
                {
                    "title": "messageKey",
                    "id": "messagekey",
                    "thirdLevelLink": []
                }
            ]
        },
        {
            "id": "completecreditcardasyncexample",
            "title": "Complete creditCardAsync Example",
            "subLink": []
        }
    ],
    "title": "creditCardAsync",
    "description": "creditCardAsync validation validators will check property value is creditCardAsynctype or not. It will not allow to enter any value other than credit card format.",
    "validatorType": "validators",
    "validationTypeTitle": "Validators",
    "type": "tabs",
    "gitDocPath": "https://github.com/rxweb/rxweb.io/edit/master/docs/angular/reactive-forms/reactive-form-validators/async-validators/creditCardAsync.md",
    "category": "async-validators",
    "subCategory": "",
    "linkTitle": "creditCardAsync",
    "tabArray": {
        "complete": [
            {
                "tabName": "Example",
                "tabGroupContent": null,
                "content": "<div component=\"app-example-runner\" ref-component=\"app-creditCardAsync-complete\"></div>\r\n"
            },
            {
                "tabName": "Component",
                "tabGroupContent": null,
                "content": "<div component=\"app-code\" key=\"creditCardAsync-complete-component\"></div> \r\n"
            },
            {
                "tabName": "Html",
                "tabGroupContent": null,
                "content": "<div component=\"app-code\" key=\"creditCardAsync-complete-html\"></div> \r\n"
            }
        ]
    },
    "innerHtml": null,
    "htmlContent": "<div class=\"title-bar top_title\"><p>creditCardAsync</p></div> <div class=\"title-bar\"><p>creditCardAsync validation validator will check property value is creditCardAsynctype or not. It will not allow to enter any value other than credit card format asynchronously.</p></div>\r\n<div class='row page-section' id= 'whentouse'>\r\n<div class='col-lg-12'>\r\n<h2 class='showHideElement' >When to use<a title='Link to this heading' class='link-header' href='/async-validators/creditCardAsync/validators#whentouse'><i class='fa fa-link'></i></a></h2>\r\n\r\n<p class='showHideElement' >Supppose you want to create a user form in which you want creditCardAsync details and you have fields like CardType, VisaCard, AmericanExpress,MaestroCard, JCBcard, DiscoverCard, MasterCard asynchronously Here depending upon the requirement these scenarios may arise.</p>\r\n<ol class='showHideElement'>  \r\n    <li>creditCardAsync Type has different Card Types like Visa, AmericanExpress, Maestro, JCB, Discover, DinersClub, MasterCard.</li>\r\n    <li>Apply creditCardAsync validation based on matched condition in the form, like if the CardType  is <span class='highlighted'>visa</span> then the VisaCard value should be in VisaCard format.</li>\r\n    <li>Display the Custom Message on VisaCard field.  </li>\r\n    <li>Shows the custom message on <span class='highlighted'>Other Master Card</span> field by using <span class='highlighted'>messageKey</span> property.</li>\r\n    <data-scope scope=\"['decorator','validator']\">\r\n      <li>Apply creditCardAsync validation dynamically based on server rules.</li>\r\n    </data-scope>\r\n</ol>\r\n<p class='showHideElement' >Letâ€™s see how credit card validator fulfil the need.</p>\r\n</div></div>\r\n<div class='row page-section' id= 'basiccreditcardasyncvalidation'>\r\n<div class='col-lg-12'>\r\n<h2>Basic creditCardAsync Validation<a title='Link to this heading' class='link-header' href='/async-validators/creditCardAsync/validators#basiccreditcardasyncvalidation'><i class='fa fa-link'></i></a></h2>\r\n\r\n<p class='showHideElement' >Through Angular FormBuilder service we create FormGroup in the component.</p>\r\n<p class='showHideElement' >Here we have covered Add form operations. </p>\r\n<div component=\"app-code\" key=\"creditCardAsync-add-component\"></div> \r\n<p class='showHideElement' >Next, we need to write html code.</p>\r\n<div component=\"app-code\" key=\"creditCardAsync-add-html\"></div> \r\n<div component=\"app-example-runner\" ref-component=\"app-creditCardAsync-add\"></div>\r\n</div></div>\r\n<div class='row page-section' id= 'validatorconfig'>\r\n<div class='col-lg-12'>\r\n<h2>ValidatorConfig<a title='Link to this heading' class='link-header' href='/async-validators/creditCardAsync/validators#validatorconfig'><i class='fa fa-link'></i></a></h2>\r\n\r\n<p class='showHideElement' >Type : <span class='highlighted'>Observable</span></p>\r\n<p class='showHideElement' >validator config is used to dynamically resolve the value of the property according to the server rules by using the keyword <span class='highlighted'>of</span> as below </p>\r\n<p class='showHideElement' >Below options are not mandatory to use in the <span class='highlighted'>RxwebValidators.creditCardAsync({validatorConfig:of({&ltproperty_name&gt:&ltvalue&gt})})</span> validator. If needed then use the below options.</p>\r\n<div class='row page-section' id= 'completecreditcardasyncexample'>\r\n<div class='col-lg-12'>\r\n<h2>Complete creditCardAsync Example<a title='Link to this heading' class='link-header' href='/async-validators/creditCardAsync/validators#completecreditcardasyncexample'><i class='fa fa-link'></i></a></h2>\r\n\r\n<p class='showHideElement' >This Complete creditCardAsync example which includes all the creditCardAsyncConfig properties will fulfil the requirement of scenarios 1, 2 and 3 </p>\r\n<div component=\"app-tabs\" key=\"complete\"></div>\r\n</div></div>\r\n"
}