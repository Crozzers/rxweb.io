{"rightSidebarLinks":[{"id":"extensionasync","title":"extensionAsync","subLink":null},{"id":"whentouse","title":"When to use","subLink":[]},{"id":"basicextensionasyncvalidation","title":"Basic extensionAsync Validation","subLink":[]},{"id":"validatorconfig","title":"ValidatorConfig","subLink":[{"title":"extensions","id":"extensions","thirdLevelLink":[]},{"title":"message","id":"message","thirdLevelLink":[]},{"title":"messageKey","id":"messagekey","thirdLevelLink":[]}]},{"id":"completeextensionasyncexample","title":"Complete extensionAsync Example","subLink":[]}],"title":"extensionAsync","description":"extensionAsync validation decorators allows user to validate the input which is in the proper extensionAsync format.","validatorType":"decorators","validationTypeTitle":"Decorators","type":"tabs","gitDocPath":"https://github.com/rxweb/rxweb.io/edit/master/docs/angular/reactive-forms/reactive-form-validators/async-validators/extensionAsync.md","category":"async-validators","subCategory":"String","linkTitle":"extensionAsync","tabArray":{"basic-operations":[{"tabName":"Add","tabGroupContent":null,"content":"<div component=\"app-code\" key=\"extensionAsync-add-component\"></div> \r\n<p class='showHideElement' >Next, we need to write html code.</p>\r\n<div component=\"app-code\" key=\"extensionAsync-add-html\"></div> \r\n<div component=\"app-example-runner\" ref-component=\"app-extensionAsync-add\"></div>\r\n"},{"tabName":"Edit","tabGroupContent":null,"content":"<div component=\"app-code\" key=\"extensionAsync-edit-component\"></div>\r\n<p class='showHideElement' >The below default data which is coming from the server in this example of edit form which is set in the `user-data.json` in json format like this:</p>\r\n<div component=\"app-code\" key=\"extensionAsync-edit-json\"></div> \r\n<p class='showHideElement' >Next, we need to write html code.</p>\r\n<div component=\"app-code\" key=\"extensionAsync-edit-html\"></div> \r\n<div component=\"app-example-runner\" ref-component=\"app-extensionAsync-edit\"></div>\r\n"}],"complete":[{"tabName":"Example","tabGroupContent":null,"content":"<div component=\"app-example-runner\" ref-component=\"app-extensionAsync-complete\"></div>\r\n"},{"tabName":"Model","tabGroupContent":null,"content":"<div component=\"app-code\" key=\"extensionAsync-complete-model\"></div> \r\n"},{"tabName":"Component","tabGroupContent":null,"content":"<div component=\"app-code\" key=\"extensionAsync-complete-component\"></div> \r\n"},{"tabName":"Html","tabGroupContent":null,"content":"<div component=\"app-code\" key=\"extensionAsync-complete-html\"></div> \r\n"}]},"innerHtml":null,"htmlContent":"<div class=\"title-bar top_title\"><p>extensionAsync</p></div> <div class=\"title-bar\"><p>extensionAsync validation decorator allows user to validate the input which is in the proper extensionAsync format asynchronously.</p></div>\r\n<div class='row page-section' id= 'whentouse'>\r\n<div class='col-lg-12'>\r\n<h2 class='showHideElement' >When to use<a title='Link to this heading' class='link-header'  href='/async-validators/extensionAsync/decorators#whentouse'><i class='fa fa-link'></i></a></h2>\r\n\r\n<p class='showHideElement' >Suppose you want to create a UserInfo form, which contains fields like fileType, profilePicture ,imageFile ,documentFile ,contactFile and you want the user to upload file which have a proper extensionAsync format asynchronously. Here depending upon the requirement, these scenarios may arise..</p>\r\n<ol class='showHideElement'>\r\n   <li>Allow user to select profilePicture which have proper extensionAsync format.</li>\r\n   <li>Adding custom message on <span class='highlighted'>ContactFile</span> field.</li>\r\n   <li>Shows the custom message on <span class='highlighted'>Excel File</span> field by using <span class='highlighted'>messageKey</span> property.</li>\r\n   <data-scope scope=\"['decorator','validator']\">\r\n      <li>Apply extensionAsync validation dynamically based on server rules.</li>\r\n   </data-scope>\r\n</ol>\r\n<p class='showHideElement' >Let's see how extensionAsync decorator fulfil the need.</p>\r\n</div></div>\r\n<div class='row page-section' id= 'basicextensionasyncvalidation'>\r\n<div class='col-lg-12'>\r\n<h2>Basic extensionAsync Validation<a title='Link to this heading' class='link-header'  href='/async-validators/extensionAsync/decorators#basicextensionasyncvalidation'><i class='fa fa-link'></i></a></h2>\r\n\r\n<p class='showHideElement' >First we need to create a UserInfo model and define a property of profilePicture in the model to achieve the functional need of point 1.</p>\r\n<div component=\"app-code\" key=\"extensionAsync-add-model\"></div> \r\n<p class='showHideElement' >Through Angular FormBuilder service we create FormGroup in the component.</p>\r\n<p class='showHideElement' >Here we have covered Add and Edit form operations. </p>\r\n<div component=\"app-tabs\" key=\"basic-operations\"></div>\r\n</div></div>\r\n<div class='row page-section' id= 'validatorconfig'>\r\n<div class='col-lg-12'>\r\n<h2>ValidatorConfig<a title='Link to this heading' class='link-header'  href='/async-validators/extensionAsync/decorators#validatorconfig'><i class='fa fa-link'></i></a></h2>\r\n\r\n<p class='showHideElement' >Type : <span class='highlighted'>Observable</span></p>\r\n<p class='showHideElement' >validator config is used to dynamically resolve the value of the property according to the server rules by using the keyword <span class='highlighted'>of</span> as below </p>\r\n<p class='showHideElement' >Below options are not mandatory to use in the <span class='highlighted'>@extensionAsync({validatorConfig:of({&ltproperty_name&gt:&ltvalue&gt})})</span> decorator. If needed then use the below options.</p>\r\n<table class=\"table table-bordered table-striped showHideElement\">\r\n<tr><th>Option</th><th>Description</th></tr>\r\n<tr><td><a (click)='scrollTo(\"#extensions\")'  title=\"extensions\">extensions</a></td><td>extensions property of ExtensionConfig is an array of multiple extensions which are allowed to be selected by the user.</td></tr>\r\n<tr><td><a  (click)='scrollTo(\"#message\")'  title=\"message\">message</a></td><td>To override the global configuration message and set the custom error message on respective FormControl</td></tr>\r\n<tr><td><a (click)='scrollTo(\"#messageKey\")' title=\"messageKey\">messageKey</a></td><td>messageKey property of BaseConfig can be used when the user wants to show a different custom validation message on some of their fields. User can define a custom messageKey globally by defining it in ReactiveFormConfig and set it in the message property of the validation.</td></tr>\r\n</table>\r\n</div></div>\r\n<div class='row page-section' id= 'extensions'>\r\n<div class='col-lg-12'>\r\n<h2>extensions<a title='Link to this heading' class='link-header'  href='/async-validators/extensionAsync/decorators#extensions'><i class='fa fa-link'></i></a></h2>\r\n\r\n<p class='showHideElement' >Type :  <span class='highlighted'>string[]</span> </p>\r\n<p class='showHideElement' >extensions property of ExtensionConfig is an array of multiple extensions which are allowed to be selected by the user.</p>\r\n<div component=\"app-code\" key=\"extensionAsync-extensionsExample-model\"></div> \r\n<div component=\"app-example-runner\" ref-component=\"app-extensionAsync-extensions\" title=\"extensionAsync decorator with extensions\" key=\"extensions\"></div>\r\n</div></div>\r\n<div class='row page-section' id= 'message'>\r\n<div class='col-lg-12'>\r\n<h2>message<a title='Link to this heading' class='link-header'  href='/async-validators/extensionAsync/decorators#message'><i class='fa fa-link'></i></a></h2>\r\n\r\n<p class='showHideElement' >Type :  <span class='highlighted'>string</span> </p>\r\n<p class='showHideElement' >To override the global configuration message and set the custom message on respective FormControl.</p>\r\n<div component=\"app-code\" key=\"extensionAsync-messageExample-model\"></div> \r\n<div component=\"app-example-runner\" ref-component=\"app-extensionAsync-message\" title=\"extensionAsync decorator with message\" key=\"message\"></div>\r\n</div></div>\r\n<div class='row page-section' id= 'messagekey'>\r\n<div class='col-lg-12'>\r\n<h2>messageKey<a title='Link to this heading' class='link-header'  href='/async-validators/extensionAsync/decorators#messagekey'><i class='fa fa-link'></i></a></h2>\r\n\r\n<p class='showHideElement' >Type : <span class='highlighted'>string</span></p>\r\n<p class='showHideElement' >messageKey property of BaseConfig can be used when the user wants to show a different custom validation message on some of their fields. User can define a custom messageKey globally by defining it in ReactiveFormConfig and set it in the message property of the validation.</p>\r\n<div component=\"app-code\" key=\"extensionAsync-messageKeyExample-model\"></div> \r\n<div component=\"app-example-runner\" ref-component=\"app-extensionAsync-messageKey\" title=\"extensionAsync decorator with messageKey\" key=\"messageKey\"></div>\r\n</div></div>\r\n<div class='row page-section' id= 'completeextensionasyncexample'>\r\n<div class='col-lg-12'>\r\n<h2>Complete extensionAsync Example<a title='Link to this heading' class='link-header'  href='/async-validators/extensionAsync/decorators#completeextensionasyncexample'><i class='fa fa-link'></i></a></h2>\r\n\r\n<p class='showHideElement' >This Complete extensionAsync example which includes all the ExtensionConfig properties will fulfil the requirement of scenarios 1, 2, 3 and 4.</p>\r\n<div component=\"app-tabs\" key=\"complete\"></div>\r\n</div></div>\r\n"}