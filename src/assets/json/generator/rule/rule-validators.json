{"complete":{"notes":[],"component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup, FormBuilder } from \"@angular/forms\"\r\nimport { RxwebValidators } from '@rxweb/reactive-form-validators';\r\n\r\n@Component({\r\n    selector: 'app-rule-complete-validator',\r\n    templateUrl: './rule-complete.component.html'\r\n})\r\nexport class RuleCompleteValidatorComponent implements OnInit {\r\n    addressInfoFormGroup: FormGroup\r\n\r\n\tconstructor(\r\n        private formBuilder: FormBuilder )\r\n\t{ }\r\n\r\n    ngOnInit() {\r\n        this.addressInfoFormGroup = this.formBuilder.group({\r\n            zipcode:['',], \r\n            countryName:['',], \r\n            stateName:['', RxwebValidators.rule({customRules:[(entity) => {return entity.zipcode == 4000 ? { 'required': 'This field is required' } : null;}]  ,conditionalExpression:(x,y) => x.countryName == \"India\" })], \r\n            cityName:['', RxwebValidators.rule({customRules:[(entity) => {return entity.zipcode == 4000 ? { 'required': 'This field is required' } : null;}]  ,conditionalExpression:'x => x.countryName ==\"India\"' })], \r\n            colonyName:['', RxwebValidators.rule({customRules:[(entity) => {return entity.zipcode == 10001 ? { 'required': 'This field is dependent on the zipcode field' } : null;}] })], \r\n        });\r\n    }\r\n}\r\n","html":"<div>\r\n  <form  [formGroup]=\"addressInfoFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label>Zipcode</label>\r\n      <input type=\"text\" formControlName=\"zipcode\" class=\"form-control\"  />\r\n\t <small class=\"form-text text-danger\" *ngIf=\"addressInfoFormGroup.controls.zipcode.errors\">{{addressInfoFormGroup.controls.zipcode.errors.rule?.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Country Name</label>\r\n      <input type=\"text\" formControlName=\"countryName\" class=\"form-control\"  />\r\n\t <small class=\"form-text text-danger\" *ngIf=\"addressInfoFormGroup.controls.countryName.errors\">{{addressInfoFormGroup.controls.countryName.errors.rule?.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>State Name</label>\r\n      <input type=\"text\" formControlName=\"stateName\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">If you want to apply customRules on this field, then you need to enter 'Zipcode' value as 4000.<br/></small>\r\n      <small class=\"form-text text-muted\">If you want to apply conditional validation on 'State Name' then you need to add 'Country Name' input as 'India'.<br/></small>\r\n      <small class=\"form-text text-muted\">Conditional Expression with type 'function'<br/></small>\r\n\t <small class=\"form-text text-danger\" *ngIf=\"addressInfoFormGroup.controls.stateName.errors\">{{addressInfoFormGroup.controls.stateName.errors.rule?.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>City Name</label>\r\n      <input type=\"text\" formControlName=\"cityName\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">If you want to apply customRules on this field, then you need to enter 'Zipcode' value as 4000.<br/></small>\r\n      <small class=\"form-text text-muted\">If you want to apply conditional validation on 'State Name' then you need to add 'Country Name' input as 'India'.<br/></small>\r\n      <small class=\"form-text text-muted\">Conditional Expression with type 'string'<br/></small>\r\n\t <small class=\"form-text text-danger\" *ngIf=\"addressInfoFormGroup.controls.cityName.errors\">{{addressInfoFormGroup.controls.cityName.errors.rule?.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Colony Name</label>\r\n      <input type=\"text\" formControlName=\"colonyName\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">rule validation based on the customRules <br/></small>\r\n\t <small class=\"form-text text-danger\" *ngIf=\"addressInfoFormGroup.controls.colonyName.errors\">{{addressInfoFormGroup.controls.colonyName.errors.rule?.message}}<br/></small>\t\r\n    </div>\r\n    <button [disabled]=\"!addressInfoFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","model":null,"modelName":null,"json":{}},"customRulesExampleFunction":{"notes":null,"component":null,"html":null,"model":"RxwebValidators.rule({customRules:[(entity) => {return entity.zipcode == 4000 ? { 'required': 'This field is required' } : null;}]  ,conditionalExpression:(x,y) => x.countryName == \"India\" });\r\n","modelName":null,"json":{}},"customRules":{"notes":[],"component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup, FormBuilder } from \"@angular/forms\"\r\nimport { RxwebValidators } from '@rxweb/reactive-form-validators';\r\n\r\n@Component({\r\n    selector: 'app-rule-customRules-validator',\r\n    templateUrl: './rule-custom-rules.component.html'\r\n})\r\nexport class RuleCustomRulesValidatorComponent implements OnInit {\r\n    addressInfoFormGroup: FormGroup\r\n\r\n\tconstructor(\r\n        private formBuilder: FormBuilder )\r\n\t{ }\r\n\r\n    ngOnInit() {\r\n        this.addressInfoFormGroup = this.formBuilder.group({\r\n            cityName:['', RxwebValidators.rule({customRules:[(entity) => {return entity.zipcode == 4000 ? { 'required': 'This field is required' } : null;}]  ,conditionalExpression:'x => x.countryName ==\"India\"' })], \r\n            stateName:['', RxwebValidators.rule({customRules:[(entity) => {return entity.zipcode == 4000 ? { 'required': 'This field is required' } : null;}]  ,conditionalExpression:(x,y) => x.countryName == \"India\" })], \r\n        });\r\n    }\r\n}\r\n","html":"<div>\r\n  <form  [formGroup]=\"addressInfoFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label>City Name</label>\r\n      <input type=\"text\" formControlName=\"cityName\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">If you want to apply customRules on this field, then you need to enter 'Zipcode' value as 4000.<br/></small>\r\n      <small class=\"form-text text-muted\">If you want to apply conditional validation on 'State Name' then you need to add 'Country Name' input as 'India'.<br/></small>\r\n      <small class=\"form-text text-muted\">Conditional Expression with type 'string'<br/></small>\r\n\t <small class=\"form-text text-danger\" *ngIf=\"addressInfoFormGroup.controls.cityName.errors\">{{addressInfoFormGroup.controls.cityName.errors.rule?.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>State Name</label>\r\n      <input type=\"text\" formControlName=\"stateName\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">If you want to apply customRules on this field, then you need to enter 'Zipcode' value as 4000.<br/></small>\r\n      <small class=\"form-text text-muted\">If you want to apply conditional validation on 'State Name' then you need to add 'Country Name' input as 'India'.<br/></small>\r\n      <small class=\"form-text text-muted\">Conditional Expression with type 'function'<br/></small>\r\n\t <small class=\"form-text text-danger\" *ngIf=\"addressInfoFormGroup.controls.stateName.errors\">{{addressInfoFormGroup.controls.stateName.errors.rule?.message}}<br/></small>\t\r\n    </div>\r\n    <button [disabled]=\"!addressInfoFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","model":null,"modelName":null,"json":{}},"conditionalExpressionExampleFunction":{"notes":null,"component":null,"html":null,"model":"RxwebValidators.rule({customRules:[(entity) => {return entity.zipcode == 4000 ? { 'required': 'This field is required' } : null;}]  ,conditionalExpression:(x,y) => x.countryName == \"India\" });\r\n","modelName":null,"json":{}},"conditionalExpression":{"notes":[],"component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup, FormBuilder } from \"@angular/forms\"\r\nimport { RxwebValidators } from '@rxweb/reactive-form-validators';\r\n\r\n@Component({\r\n    selector: 'app-rule-conditionalExpression-validator',\r\n    templateUrl: './rule-conditional-expression.component.html'\r\n})\r\nexport class RuleConditionalExpressionValidatorComponent implements OnInit {\r\n    addressInfoFormGroup: FormGroup\r\n\r\n\tconstructor(\r\n        private formBuilder: FormBuilder )\r\n\t{ }\r\n\r\n    ngOnInit() {\r\n        this.addressInfoFormGroup = this.formBuilder.group({\r\n            countryName:['',], \r\n            cityName:['', RxwebValidators.rule({customRules:[(entity) => {return entity.zipcode == 4000 ? { 'required': 'This field is required' } : null;}]  ,conditionalExpression:'x => x.countryName ==\"India\"' })], \r\n            stateName:['', RxwebValidators.rule({customRules:[(entity) => {return entity.zipcode == 4000 ? { 'required': 'This field is required' } : null;}]  ,conditionalExpression:(x,y) => x.countryName == \"India\" })], \r\n        });\r\n    }\r\n}\r\n","html":"<div>\r\n  <form  [formGroup]=\"addressInfoFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label>Country Name</label>\r\n      <input type=\"text\" formControlName=\"countryName\" class=\"form-control\"  />\r\n\t <small class=\"form-text text-danger\" *ngIf=\"addressInfoFormGroup.controls.countryName.errors\">{{addressInfoFormGroup.controls.countryName.errors.rule?.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>City Name</label>\r\n      <input type=\"text\" formControlName=\"cityName\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">If you want to apply customRules on this field, then you need to enter 'Zipcode' value as 4000.<br/></small>\r\n      <small class=\"form-text text-muted\">If you want to apply conditional validation on 'State Name' then you need to add 'Country Name' input as 'India'.<br/></small>\r\n      <small class=\"form-text text-muted\">Conditional Expression with type 'string'<br/></small>\r\n\t <small class=\"form-text text-danger\" *ngIf=\"addressInfoFormGroup.controls.cityName.errors\">{{addressInfoFormGroup.controls.cityName.errors.rule?.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>State Name</label>\r\n      <input type=\"text\" formControlName=\"stateName\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">If you want to apply customRules on this field, then you need to enter 'Zipcode' value as 4000.<br/></small>\r\n      <small class=\"form-text text-muted\">If you want to apply conditional validation on 'State Name' then you need to add 'Country Name' input as 'India'.<br/></small>\r\n      <small class=\"form-text text-muted\">Conditional Expression with type 'function'<br/></small>\r\n\t <small class=\"form-text text-danger\" *ngIf=\"addressInfoFormGroup.controls.stateName.errors\">{{addressInfoFormGroup.controls.stateName.errors.rule?.message}}<br/></small>\t\r\n    </div>\r\n    <button [disabled]=\"!addressInfoFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","model":null,"modelName":null,"json":{}},"customRulesExampleString":{"notes":null,"component":null,"html":null,"model":"RxwebValidators.rule({customRules:[(entity) => {return entity.zipcode == 4000 ? { 'required': 'This field is required' } : null;}]  ,conditionalExpression:'x => x.countryName ==\"India\"' });\r\n","modelName":null,"json":{}},"conditionalExpressionExampleString":{"notes":null,"component":null,"html":null,"model":"RxwebValidators.rule({customRules:[(entity) => {return entity.zipcode == 4000 ? { 'required': 'This field is required' } : null;}]  ,conditionalExpression:'x => x.countryName ==\"India\"' });\r\n","modelName":null,"json":{}},"customRulesExample":{"notes":null,"component":null,"html":null,"model":"RxwebValidators.rule({customRules:[(entity) => {return entity.zipcode == 10001 ? { 'required': 'This field is dependent on the zipcode field' } : null;}] });\r\n","modelName":null,"json":{}},"dynamic":{"notes":[],"component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup, FormBuilder } from \"@angular/forms\"\r\nimport { RxwebValidators } from '@rxweb/reactive-form-validators';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { FormBuilderConfiguration,RxFormBuilder} from '@rxweb/reactive-form-validators';\r\n\r\n@Component({\r\n    selector: 'app-rule-dynamic-validator',\r\n    templateUrl: './rule-dynamic.component.html'\r\n})\r\nexport class RuleDynamicValidatorComponent implements OnInit {\r\n    addressInfoFormGroup: FormGroup\r\n\r\n\tconstructor(\r\n        private formBuilder: RxFormBuilder , private http: HttpClient )\r\n\t{ }\r\n\r\n    ngOnInit() {\r\n\t\tlet formBuilderConfiguration = new FormBuilderConfiguration();\r\n\t\tthis.http.get('assets/examples/reactive-form-validators/validators/rule/dynamic/dynamic.json').subscribe(dynamic => {\r\n\t\t\tformBuilderConfiguration.dynamicValidation = JSON.parse(JSON.stringify(dynamic));\r\n\t\t\tvar addressInfo = { zipcode:'', countryName:'', stateName:'', cityName:'', colonyName:'',  }\r\n\t\t\tthis.addressInfoFormGroup = this.formBuilder.group(addressInfo,formBuilderConfiguration);\r\n\t\t})\r\n    }\r\n}\r\n","html":"<div>\r\n  <form  *ngIf=\"addressInfoFormGroup\"  [formGroup]=\"addressInfoFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label>Zipcode</label>\r\n      <input type=\"text\" formControlName=\"zipcode\" class=\"form-control\"   />\r\n      <small class=\"form-text text-danger\" *ngIf=\"addressInfoFormGroup.controls.zipcode.errors\">{{addressInfoFormGroup.controls.zipcode.errors.rule.message}}<br/></small>\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Country Name</label>\r\n      <input type=\"text\" formControlName=\"countryName\" class=\"form-control\"   />\r\n      <small class=\"form-text text-danger\" *ngIf=\"addressInfoFormGroup.controls.countryName.errors\">{{addressInfoFormGroup.controls.countryName.errors.rule.message}}<br/></small>\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>City Name</label>\r\n      <input type=\"text\" formControlName=\"cityName\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">If you want to apply customRules on this field, then you need to enter 'Zipcode' value as 4000.<br/></small>\r\n      <small class=\"form-text text-muted\">If you want to apply conditional validation on 'State Name' then you need to add 'Country Name' input as 'India'.<br/></small>\r\n      <small class=\"form-text text-muted\">Conditional Expression with type 'string'<br/></small>\r\n      <small class=\"form-text text-danger\" *ngIf=\"addressInfoFormGroup.controls.cityName.errors\">{{addressInfoFormGroup.controls.cityName.errors.rule.message}}<br/></small>\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Colony Name</label>\r\n      <input type=\"text\" formControlName=\"colonyName\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">rule validation based on the customRules <br/></small>\r\n      <small class=\"form-text text-danger\" *ngIf=\"addressInfoFormGroup.controls.colonyName.errors\">{{addressInfoFormGroup.controls.colonyName.errors.rule.message}}<br/></small>\r\n    </div>\r\n    <button [disabled]=\"!addressInfoFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","model":null,"modelName":null,"json":{"dynamic.json":"{\"zipcode\":{},\"countryName\":{},\"cityName\":{\"rule\":{\"customRules\":\"[(entity) => {return entity.zipcode == 4000 ? { required: This field is required } : null;}]\",\"conditionalExpression\":\"x => x.countryName ==\\\"India\\\"\"}},\"colonyName\":{\"rule\":{\"customRules\":\"[(entity) => {return entity.zipcode == 10001 ? { required: This field is dependent on the zipcode field } : null;}]\"}}}"}},"add":{"notes":[],"component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup, FormBuilder } from \"@angular/forms\"\r\nimport { RxwebValidators } from '@rxweb/reactive-form-validators';\r\n\r\n@Component({\r\n    selector: 'app-rule-add-validator',\r\n    templateUrl: './rule-add.component.html'\r\n})\r\nexport class RuleAddValidatorComponent implements OnInit {\r\n    addressInfoFormGroup: FormGroup\r\n\r\n\tconstructor(\r\n        private formBuilder: FormBuilder )\r\n\t{ }\r\n\r\n    ngOnInit() {\r\n        this.addressInfoFormGroup = this.formBuilder.group({\r\n            zipcode:['',], \r\n            colonyName:['', RxwebValidators.rule({customRules:[(entity) => {return entity.zipcode == 10001 ? { 'required': 'This field is dependent on the zipcode field' } : null;}] })], \r\n        });\r\n    }\r\n}\r\n","html":"<div>\r\n  <form  [formGroup]=\"addressInfoFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label>Zipcode</label>\r\n      <input type=\"text\" formControlName=\"zipcode\" class=\"form-control\"  />\r\n\t <small class=\"form-text text-danger\" *ngIf=\"addressInfoFormGroup.controls.zipcode.errors\">{{addressInfoFormGroup.controls.zipcode.errors.rule?.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Colony Name</label>\r\n      <input type=\"text\" formControlName=\"colonyName\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">rule validation based on the customRules <br/></small>\r\n\t <small class=\"form-text text-danger\" *ngIf=\"addressInfoFormGroup.controls.colonyName.errors\">{{addressInfoFormGroup.controls.colonyName.errors.rule?.message}}<br/></small>\t\r\n    </div>\r\n    <button [disabled]=\"!addressInfoFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","model":null,"modelName":null,"json":{}}}