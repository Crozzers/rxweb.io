{
    "complete": {
        "notes": null,
        "component": "import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from \"@angular/forms\"\r\nimport { RxFormBuilder } from '@rxweb/reactive-form-validators';\r\n\r\nimport { AddressInfo } from './address-info.model';\r\n\r\n@Component({\r\n    selector: 'app-rule-complete',\r\n    templateUrl: './rule-complete.component.html'\r\n})\r\nexport class RuleCompleteComponent implements OnInit {\r\n    addressInfoFormGroup: FormGroup\r\n\r\n    constructor(\r\n        private formBuilder: RxFormBuilder    ) { }\r\n\r\n    ngOnInit() {\r\n        let addressInfo = new AddressInfo();\r\n        this.addressInfoFormGroup = this.formBuilder.formGroup(addressInfo);\r\n    }\r\n}\r\n",
        "html": "<div>\r\n  <form  [formGroup]=\"addressInfoFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label>Zipcode</label>\r\n      <input type=\"text\" formControlName=\"zipcode\" class=\"form-control\"  />\r\n\t <small class=\"form-text text-danger\" *ngIf=\"addressInfoFormGroup.controls.zipcode.errors\">{{addressInfoFormGroup.controls.zipcode.errors.rule?.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Country Name</label>\r\n      <input type=\"text\" formControlName=\"countryName\" class=\"form-control\"  />\r\n\t <small class=\"form-text text-danger\" *ngIf=\"addressInfoFormGroup.controls.countryName.errors\">{{addressInfoFormGroup.controls.countryName.errors.rule?.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>State Name</label>\r\n      <input type=\"text\" formControlName=\"stateName\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">If you want to apply customRules on this field, then you need to enter 'Zipcode' value as 4000.<br/></small>\r\n      <small class=\"form-text text-muted\">If you want to apply conditional validation on 'State Name' then you need to add 'Country Name' input as 'India'.<br/></small>\r\n      <small class=\"form-text text-muted\">Conditional Expression with type 'function'<br/></small>\r\n\t <small class=\"form-text text-danger\" *ngIf=\"addressInfoFormGroup.controls.stateName.errors\">{{addressInfoFormGroup.controls.stateName.errors.rule?.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>City Name</label>\r\n      <input type=\"text\" formControlName=\"cityName\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">If you want to apply customRules on this field, then you need to enter 'Zipcode' value as 4000.<br/></small>\r\n      <small class=\"form-text text-muted\">If you want to apply conditional validation on 'State Name' then you need to add 'Country Name' input as 'India'.<br/></small>\r\n      <small class=\"form-text text-muted\">Conditional Expression with type 'string'<br/></small>\r\n\t <small class=\"form-text text-danger\" *ngIf=\"addressInfoFormGroup.controls.cityName.errors\">{{addressInfoFormGroup.controls.cityName.errors.rule?.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Colony Name</label>\r\n      <input type=\"text\" formControlName=\"colonyName\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">rule validation based on the customRules <br/></small>\r\n\t <small class=\"form-text text-danger\" *ngIf=\"addressInfoFormGroup.controls.colonyName.errors\">{{addressInfoFormGroup.controls.colonyName.errors.rule?.message}}<br/></small>\t\r\n    </div>\r\n    <button [disabled]=\"!addressInfoFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n",
        "model": "import {  rule,prop, } from \"@rxweb/reactive-form-validators\"\r\n\r\nexport class AddressInfo {\r\n\r\n\t@prop()\r\n\tzipcode: number;\r\n\r\n\t@prop()\r\n\tcountryName: string;\r\n\r\n\t//If you want to apply conditional expression of type 'function'\r\n\t@rule({customRules:[(entity) => {return entity.zipcode == 4000 ? { 'required': 'This field is required' } : null;}]  ,conditionalExpression:(x,y) => x.countryName == \"India\" }) \r\n\tstateName: string;\r\n\r\n\t//If you want to apply conditional expression of type 'string'\r\n\t@rule({customRules:[(entity) => {return entity.zipcode == 4000 ? { 'required': 'This field is required' } : null;}]  ,conditionalExpression:'x => x.countryName ==\"India\"' }) \r\n\tcityName: string;\r\n\r\n\t@rule({customRules:[(entity) => {return entity.zipcode == 10001 ? { 'required': 'This field is dependent on the zipcode field' } : null;}] }) \r\n\tcolonyName: string;\r\n\r\n}\r\n",
        "modelName": "address-info.model.ts",
        "json": {}
    },
    "customRulesExampleFunction": {
        "notes": null,
        "component": null,
        "html": null,
        "model": "@rule({customRules:[(entity) => {return entity.zipcode == 4000 ? { 'required': 'This field is required' } : null;}]  ,conditionalExpression:(x,y) => x.countryName == \"India\" }) \r\nstateName: string;\r\n",
        "modelName": null,
        "json": {}
    },
    "customRules": {
        "notes": null,
        "component": "import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from \"@angular/forms\"\r\nimport { RxFormBuilder } from '@rxweb/reactive-form-validators';\r\n\r\nimport { AddressInfo } from './address-info.model';\r\n\r\n@Component({\r\n    selector: 'app-rule-customRules',\r\n    templateUrl: './rule-custom-rules.component.html'\r\n})\r\nexport class RuleCustomRulesComponent implements OnInit {\r\n    addressInfoFormGroup: FormGroup\r\n\r\n    constructor(\r\n        private formBuilder: RxFormBuilder    ) { }\r\n\r\n    ngOnInit() {\r\n        let addressInfo = new AddressInfo();\r\n        this.addressInfoFormGroup = this.formBuilder.formGroup(addressInfo);\r\n    }\r\n}\r\n",
        "html": "<div>\r\n  <form  [formGroup]=\"addressInfoFormGroup\">\r\n      <div class=\"form-group\">\r\n          <label>Zipcode</label>\r\n          <input type=\"text\" formControlName=\"zipcode\" class=\"form-control\"  />\r\n       <small class=\"form-text text-danger\" *ngIf=\"addressInfoFormGroup.controls.zipcode.errors\">{{addressInfoFormGroup.controls.zipcode.errors.required.message}}<br/></small>\t\r\n        </div>\r\n    <div class=\"form-group\">\r\n      <label>Country Name</label>\r\n      <input type=\"text\" formControlName=\"countryName\" class=\"form-control\"  />\r\n\t <small class=\"form-text text-danger\" *ngIf=\"addressInfoFormGroup.controls.countryName.errors\">{{addressInfoFormGroup.controls.countryName.errors.rule?.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>City Name</label>\r\n      <input type=\"text\" formControlName=\"cityName\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">If you want to apply customRules on this field, then you need to enter 'Zipcode' value as 4000.<br/></small>\r\n      <small class=\"form-text text-muted\">If you want to apply conditional validation on 'State Name' then you need to add 'Country Name' input as 'India'.<br/></small>\r\n      <small class=\"form-text text-muted\">Conditional Expression with type 'string'<br/></small>\r\n\t <small class=\"form-text text-danger\" *ngIf=\"addressInfoFormGroup.controls.cityName.errors\">{{addressInfoFormGroup.controls.cityName.errors.rule?.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>State Name</label>\r\n      <input type=\"text\" formControlName=\"stateName\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">If you want to apply customRules on this field, then you need to enter 'Zipcode' value as 4000.<br/></small>\r\n      <small class=\"form-text text-muted\">If you want to apply conditional validation on 'State Name' then you need to add 'Country Name' input as 'India'.<br/></small>\r\n      <small class=\"form-text text-muted\">Conditional Expression with type 'function'<br/></small>\r\n\t <small class=\"form-text text-danger\" *ngIf=\"addressInfoFormGroup.controls.stateName.errors\">{{addressInfoFormGroup.controls.stateName.errors.rule?.message}}<br/></small>\t\r\n    </div>\r\n    <button [disabled]=\"!addressInfoFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n",
        "model": "import {  rule, } from \"@rxweb/reactive-form-validators\"\r\n\r\nexport class AddressInfo {\r\n\r\n\t//If you want to apply conditional expression of type 'string'\r\n\t@rule({customRules:[(entity) => {return entity.zipcode == 4000 ? { 'required': 'This field is required' } : null;}]  ,conditionalExpression:'x => x.countryName ==\"India\"' }) \r\n\tcityName: string;\r\n\r\n\t//If you want to apply conditional expression of type 'function'\r\n\t@rule({customRules:[(entity) => {return entity.zipcode == 4000 ? { 'required': 'This field is required' } : null;}]  ,conditionalExpression:(x,y) => x.countryName == \"India\" }) \r\n\tstateName: string;\r\n\r\n}\r\n",
        "modelName": "address-info.model.ts",
        "json": {}
    },
    "conditionalExpressionExampleFunction": {
        "notes": null,
        "component": null,
        "html": null,
        "model": "@rule({customRules:[(entity) => {return entity.zipcode == 4000 ? { 'required': 'This field is required' } : null;}]  ,conditionalExpression:(x,y) => x.countryName == \"India\" }) \r\nstateName: string;\r\n",
        "modelName": null,
        "json": {}
    },
    "conditionalExpression": {
        "notes": null,
        "component": "import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from \"@angular/forms\"\r\nimport { RxFormBuilder } from '@rxweb/reactive-form-validators';\r\n\r\nimport { AddressInfo } from './address-info.model';\r\n\r\n@Component({\r\n    selector: 'app-rule-conditionalExpression',\r\n    templateUrl: './rule-conditional-expression.component.html'\r\n})\r\nexport class RuleConditionalExpressionComponent implements OnInit {\r\n    addressInfoFormGroup: FormGroup\r\n\r\n    constructor(\r\n        private formBuilder: RxFormBuilder    ) { }\r\n\r\n    ngOnInit() {\r\n        let addressInfo = new AddressInfo();\r\n        this.addressInfoFormGroup = this.formBuilder.formGroup(addressInfo);\r\n    }\r\n}\r\n",
        "html": "<div>\r\n  <form  [formGroup]=\"addressInfoFormGroup\">\r\n      <div class=\"form-group\">\r\n          <label>Zipcode</label>\r\n          <input type=\"text\" formControlName=\"zipcode\" class=\"form-control\"  />\r\n       <small class=\"form-text text-danger\" *ngIf=\"addressInfoFormGroup.controls.zipcode.errors\">{{addressInfoFormGroup.controls.zipcode.errors.required.message}}<br/></small>\t\r\n        </div>\r\n    <div class=\"form-group\">\r\n      <label>Country Name</label>\r\n      <input type=\"text\" formControlName=\"countryName\" class=\"form-control\"  />\r\n\t <small class=\"form-text text-danger\" *ngIf=\"addressInfoFormGroup.controls.countryName.errors\">{{addressInfoFormGroup.controls.countryName.errors.rule?.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>City Name</label>\r\n      <input type=\"text\" formControlName=\"cityName\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">If you want to apply customRules on this field, then you need to enter 'Zipcode' value as 4000.<br/></small>\r\n      <small class=\"form-text text-muted\">If you want to apply conditional validation on 'State Name' then you need to add 'Country Name' input as 'India'.<br/></small>\r\n      <small class=\"form-text text-muted\">Conditional Expression with type 'string'<br/></small>\r\n\t <small class=\"form-text text-danger\" *ngIf=\"addressInfoFormGroup.controls.cityName.errors\">{{addressInfoFormGroup.controls.cityName.errors.rule?.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>State Name</label>\r\n      <input type=\"text\" formControlName=\"stateName\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">If you want to apply customRules on this field, then you need to enter 'Zipcode' value as 4000.<br/></small>\r\n      <small class=\"form-text text-muted\">If you want to apply conditional validation on 'State Name' then you need to add 'Country Name' input as 'India'.<br/></small>\r\n      <small class=\"form-text text-muted\">Conditional Expression with type 'function'<br/></small>\r\n\t <small class=\"form-text text-danger\" *ngIf=\"addressInfoFormGroup.controls.stateName.errors\">{{addressInfoFormGroup.controls.stateName.errors.rule?.message}}<br/></small>\t\r\n    </div>\r\n    <button [disabled]=\"!addressInfoFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n",
        "model": "import { rule, prop, } from \"@rxweb/reactive-form-validators\"\r\n\r\nexport class AddressInfo {\r\n\r\n\t@prop()\r\n\tzipcode: number;\r\n\r\n\t@prop()\r\n\tcountryName: string;\r\n\r\n\t//If you want to apply conditional expression of type 'string'\r\n\t@rule({ customRules: [(entity) => { return entity.zipcode == 4000 ? { 'required': 'This field is required' } : null; }], conditionalExpression: 'x => x.countryName ==\"India\"' })\r\n\tcityName: string;\r\n\r\n\t//If you want to apply conditional expression of type 'function'\r\n\t@rule({ customRules: [(entity) => { return entity.zipcode == 4000 ? { 'required': 'This field is required' } : null; }], conditionalExpression: (x, y) => x.countryName == \"India\" })\r\n\tstateName: string;\r\n\r\n}",
        "modelName": "address-info.model.ts",
        "json": {}
    },
    "customRulesExampleString": {
        "notes": null,
        "component": null,
        "html": null,
        "model": "@rule({customRules:[(entity) => {return entity.zipcode == 4000 ? { 'required': 'This field is required' } : null;}]  ,conditionalExpression:'x => x.countryName ==\"India\"' }) \r\ncityName: string;\r\n",
        "modelName": null,
        "json": {}
    },
    "conditionalExpressionExampleString": {
        "notes": null,
        "component": null,
        "html": null,
        "model": "@rule({customRules:[(entity) => {return entity.zipcode == 4000 ? { 'required': 'This field is required' } : null;}]  ,conditionalExpression:'x => x.countryName ==\"India\"' }) \r\ncityName: string;\r\n",
        "modelName": null,
        "json": {}
    },
    "customRulesExample": {
        "notes": null,
        "component": null,
        "html": null,
        "model": "@rule({customRules:[(entity) => {return entity.zipcode == 10001 ? { 'required': 'This field is dependent on the zipcode field' } : null;}] }) \r\ncolonyName: string;\r\n",
        "modelName": null,
        "json": {}
    },
    "dynamic": {
        "notes": null,
        "component": "import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from \"@angular/forms\"\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { RxFormBuilder } from '@rxweb/reactive-form-validators';\r\nimport { FormBuilderConfiguration,} from '@rxweb/reactive-form-validators';\r\n\r\nimport { AddressInfo } from './address-info.model';\r\n\r\n@Component({\r\n    selector: 'app-rule-dynamic',\r\n    templateUrl: './rule-dynamic.component.html'\r\n})\r\nexport class RuleDynamicComponent implements OnInit {\r\n    addressInfoFormGroup: FormGroup\r\n\r\n    constructor(\r\n        private formBuilder: RxFormBuilder,private http: HttpClient    ) { }\r\n\r\n    ngOnInit() {\r\n        let addressInfo = new AddressInfo();\r\n        let formBuilderConfiguration = new FormBuilderConfiguration();\r\n\t\tthis.http.get('assets/examples/reactive-form-validators/decorators/rule/dynamic/dynamic.json').subscribe(dynamic => {\r\n            formBuilderConfiguration.dynamicValidation = JSON.parse(JSON.stringify(dynamic));\r\n\t\t\tthis.addressInfoFormGroup = this.formBuilder.formGroup(addressInfo,formBuilderConfiguration);\r\n        })\r\n    }\r\n}\r\n",
        "html": "<div>\r\n  <form  *ngIf=\"addressInfoFormGroup\"  [formGroup]=\"addressInfoFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label>Zipcode</label>\r\n      <input type=\"text\" formControlName=\"zipcode\" class=\"form-control\"   />\r\n      <small class=\"form-text text-danger\" *ngIf=\"addressInfoFormGroup.controls.zipcode.errors\">{{addressInfoFormGroup.controls.zipcode.errors.rule.message}}<br/></small>\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Country Name</label>\r\n      <input type=\"text\" formControlName=\"countryName\" class=\"form-control\"   />\r\n      <small class=\"form-text text-danger\" *ngIf=\"addressInfoFormGroup.controls.countryName.errors\">{{addressInfoFormGroup.controls.countryName.errors.rule.message}}<br/></small>\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>City Name</label>\r\n      <input type=\"text\" formControlName=\"cityName\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">If you want to apply customRules on this field, then you need to enter 'Zipcode' value as 4000.<br/></small>\r\n      <small class=\"form-text text-muted\">If you want to apply conditional validation on 'State Name' then you need to add 'Country Name' input as 'India'.<br/></small>\r\n      <small class=\"form-text text-muted\">Conditional Expression with type 'string'<br/></small>\r\n      <small class=\"form-text text-danger\" *ngIf=\"addressInfoFormGroup.controls.cityName.errors\">{{addressInfoFormGroup.controls.cityName.errors.rule.message}}<br/></small>\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Colony Name</label>\r\n      <input type=\"text\" formControlName=\"colonyName\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">rule validation based on the customRules <br/></small>\r\n      <small class=\"form-text text-danger\" *ngIf=\"addressInfoFormGroup.controls.colonyName.errors\">{{addressInfoFormGroup.controls.colonyName.errors.rule.message}}<br/></small>\r\n    </div>\r\n    <button [disabled]=\"!addressInfoFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n",
        "model": "import {  rule,prop, } from \"@rxweb/reactive-form-validators\"\r\n\r\nexport class AddressInfo {\r\n\r\n\t@prop()\r\n\tzipcode: number;\r\n\r\n\t@prop()\r\n\tcountryName: string;\r\n\r\n\t@prop()\r\n\tcityName: string;\r\n\r\n\t@prop()\r\n\tcolonyName: string;\r\n\r\n}\r\n",
        "modelName": "address-info.model.ts",
        "json": {
            "dynamic.json": "{\"zipcode\":{},\"countryName\":{},\"cityName\":{\"rule\":{\"customRules\":\"[(entity) => {return entity.zipcode == 4000 ? { required: This field is required } : null;}]\",\"conditionalExpression\":\"x => x.countryName ==\\\"India\\\"\"}},\"colonyName\":{\"rule\":{\"customRules\":\"[(entity) => {return entity.zipcode == 10001 ? { required: This field is dependent on the zipcode field } : null;}]\"}}}"
        }
    },
    "add": {
        "notes": null,
        "component": "import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from \"@angular/forms\"\r\nimport { RxFormBuilder } from '@rxweb/reactive-form-validators';\r\n\r\nimport { AddressInfo } from './address-info.model';\r\n\r\n@Component({\r\n    selector: 'app-rule-add',\r\n    templateUrl: './rule-add.component.html'\r\n})\r\nexport class RuleAddComponent implements OnInit {\r\n    addressInfoFormGroup: FormGroup\r\n\r\n    constructor(\r\n        private formBuilder: RxFormBuilder    ) { }\r\n\r\n    ngOnInit() {\r\n        let addressInfo = new AddressInfo();\r\n        this.addressInfoFormGroup = this.formBuilder.formGroup(addressInfo);\r\n    }\r\n}\r\n",
        "html": "<div>\r\n  <form  [formGroup]=\"addressInfoFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label>Zipcode</label>\r\n      <input type=\"text\" formControlName=\"zipcode\" class=\"form-control\"  />\r\n\t <small class=\"form-text text-danger\" *ngIf=\"addressInfoFormGroup.controls.zipcode.errors\">{{addressInfoFormGroup.controls.zipcode.errors.rule?.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Colony Name</label>\r\n      <input type=\"text\" formControlName=\"colonyName\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">rule validation based on the customRules <br/></small>\r\n\t <small class=\"form-text text-danger\" *ngIf=\"addressInfoFormGroup.controls.colonyName.errors\">{{addressInfoFormGroup.controls.colonyName.errors.rule?.message}}<br/></small>\t\r\n    </div>\r\n    <button [disabled]=\"!addressInfoFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n",
        "model": "import {  rule,prop, } from \"@rxweb/reactive-form-validators\"\r\n\r\nexport class AddressInfo {\r\n\r\n\t@prop()\r\n\tzipcode: number;\r\n\r\n\t@rule({customRules:[(entity) => {return entity.zipcode == 10001 ? { 'required': 'This field is dependent on the zipcode field' } : null;}] }) \r\n\tcolonyName: string;\r\n\r\n}\r\n",
        "modelName": "address-info.model.ts",
        "json": {}
    },
    "edit": {
        "notes": null,
        "component": "import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from \"@angular/forms\"\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { RxFormBuilder } from '@rxweb/reactive-form-validators';\r\n\r\nimport { AddressInfo } from './address-info.model';\r\n\r\n@Component({\r\n    selector: 'app-rule-edit',\r\n    templateUrl: './rule-edit.component.html'\r\n})\r\nexport class RuleEditComponent implements OnInit {\r\n    addressInfoFormGroup: FormGroup\r\n\r\n    constructor(\r\n        private formBuilder: RxFormBuilder,private http: HttpClient    ) { }\r\n\r\n    ngOnInit() {\r\n        this.http.get('assets/examples/reactive-form-validators/decorators/rule/edit/address-info-data.json').subscribe(addressInfo => {\r\n            this.addressInfoFormGroup = this.formBuilder.formGroup<AddressInfo>(AddressInfo,addressInfo);\r\n        })\r\n    }\r\n}\r\n",
        "html": "<div>\r\n  <form  *ngIf=\"addressInfoFormGroup\"  [formGroup]=\"addressInfoFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label>Zipcode</label>\r\n      <input type=\"text\" formControlName=\"zipcode\" class=\"form-control\"  />\r\n\t <small class=\"form-text text-danger\" *ngIf=\"addressInfoFormGroup.controls.zipcode.errors\">{{addressInfoFormGroup.controls.zipcode.errors.rule?.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Colony Name</label>\r\n      <input type=\"text\" formControlName=\"colonyName\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">rule validation based on the customRules <br/></small>\r\n\t <small class=\"form-text text-danger\" *ngIf=\"addressInfoFormGroup.controls.colonyName.errors\">{{addressInfoFormGroup.controls.colonyName.errors.rule?.message}}<br/></small>\t\r\n    </div>\r\n    <button [disabled]=\"!addressInfoFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n",
        "model": "import {  rule,prop, } from \"@rxweb/reactive-form-validators\"\r\n\r\nexport class AddressInfo {\r\n\r\n\t@prop()\r\n\tzipcode: number;\r\n\r\n\t@rule({customRules:[(entity) => {return entity.zipcode == 10001 ? { 'required': 'This field is dependent on the zipcode field' } : null;}] }) \r\n\tcolonyName: string;\r\n\r\n}\r\n",
        "modelName": "address-info.model.ts",
        "json": {
            "address-info-data.json": "{\"zipcode\":10001,\"colonyName\":\"Bandra\"}"
        }
    }
}