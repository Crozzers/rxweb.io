{"complete":{"notes":[],"component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup, FormBuilder } from \"@angular/forms\"\r\nimport { RxwebValidators } from '@rxweb/reactive-form-validators';\r\n\r\n@Component({\r\n    selector: 'app-maxTimeAsync-complete-validator',\r\n    templateUrl: './max-time-async-complete.component.html'\r\n})\r\nexport class MaxTimeAsyncCompleteValidatorComponent implements OnInit {\r\n    attandanceDetailFormGroup: FormGroup\r\n\r\n\tconstructor(\r\n        private formBuilder: FormBuilder )\r\n\t{ }\r\n\r\n    ngOnInit() {\r\n        this.attandanceDetailFormGroup = this.formBuilder.group({\r\n            entryPlace:['',], \r\n            closingTime:['', RxwebValidators.maxTimeAsync({validatorConfig:of({value:'23:30'})})], \r\n            breakHours:['', RxwebValidators.maxTimeAsync({validatorConfig:of({operator:'<'  ,value:'00:10'})})], \r\n            totalOutTime:['', RxwebValidators.maxTimeAsync({validatorConfig:of({allowSeconds:true  ,value:'02:00:00'})})], \r\n            exitTime:['', RxwebValidators.maxTimeAsync({validatorConfig:of({message:'You can enter only time format data'  ,fieldName:'closingTime'})})], \r\n            netInTime:['', RxwebValidators.maxTimeAsync({validatorConfig:of({messageKey:'maxTimeMessageKey'  ,fieldName:'totalInTime'})})], \r\n       });\r\n    }\r\n}\r\n","html":"<div>\r\n  <form  [formGroup]=\"attandanceDetailFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label>Entry Place</label>\r\n      <input type=\"text\" formControlName=\"entryPlace\" class=\"form-control\"  />\r\n     <small class=\"form-text text-danger\" *ngIf=\"attandanceDetailFormGroup.controls.entryPlace.errors\">{{attandanceDetailFormGroup.controls.entryPlace.errors.maxTime.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Closing Time</label>\r\n      <input type=\"text\" formControlName=\"closingTime\" class=\"form-control\"  />\r\n     <small class=\"form-text text-danger\" *ngIf=\"attandanceDetailFormGroup.controls.closingTime.errors\">{{attandanceDetailFormGroup.controls.closingTime.errors.maxTime.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Break Hours</label>\r\n      <input type=\"text\" formControlName=\"breakHours\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">Value should be less than 00:10<br/></small>\r\n     <small class=\"form-text text-danger\" *ngIf=\"attandanceDetailFormGroup.controls.breakHours.errors\">{{attandanceDetailFormGroup.controls.breakHours.errors.maxTime.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Total Time Out</label>\r\n      <input type=\"text\" formControlName=\"totalOutTime\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">This field allow seconds in input time.<br/></small>\r\n     <small class=\"form-text text-danger\" *ngIf=\"attandanceDetailFormGroup.controls.totalOutTime.errors\">{{attandanceDetailFormGroup.controls.totalOutTime.errors.maxTime.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Exit Time</label>\r\n      <input type=\"text\" formControlName=\"exitTime\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">Shows Custom Validation Message.<br/></small>\r\n     <small class=\"form-text text-danger\" *ngIf=\"attandanceDetailFormGroup.controls.exitTime.errors\">{{attandanceDetailFormGroup.controls.exitTime.errors.maxTime.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Net-In Time</label>\r\n      <input type=\"text\" formControlName=\"netInTime\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">Shows Custom Validation Message using message key<br/></small>\r\n     <small class=\"form-text text-danger\" *ngIf=\"attandanceDetailFormGroup.controls.netInTime.errors\">{{attandanceDetailFormGroup.controls.netInTime.errors.maxTimeMessageKey.message}}<br/></small>\t\t\r\n    </div>\r\n    <button [disabled]=\"!attandanceDetailFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","model":null,"modelName":null,"json":{}},"valueExample":{"notes":null,"component":null,"html":null,"model":"RxwebValidators.maxTimeAsync({validatorConfig:of({value:'23:30'})});\r\n","modelName":null,"json":{}},"value":{"notes":[],"component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup, FormBuilder } from \"@angular/forms\"\r\nimport { RxwebValidators } from '@rxweb/reactive-form-validators';\r\n\r\n@Component({\r\n    selector: 'app-maxTimeAsync-value-validator',\r\n    templateUrl: './max-time-async-value.component.html'\r\n})\r\nexport class MaxTimeAsyncValueValidatorComponent implements OnInit {\r\n    attandanceDetailFormGroup: FormGroup\r\n\r\n\tconstructor(\r\n        private formBuilder: FormBuilder )\r\n\t{ }\r\n\r\n    ngOnInit() {\r\n        this.attandanceDetailFormGroup = this.formBuilder.group({\r\n            closingTime:['', RxwebValidators.maxTimeAsync({validatorConfig:of({value:'23:30'})})], \r\n       });\r\n    }\r\n}\r\n","html":"<div>\r\n  <form  [formGroup]=\"attandanceDetailFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label>Closing Time</label>\r\n      <input type=\"text\" formControlName=\"closingTime\" class=\"form-control\"  />\r\n     <small class=\"form-text text-danger\" *ngIf=\"attandanceDetailFormGroup.controls.closingTime.errors\">{{attandanceDetailFormGroup.controls.closingTime.errors.maxTime.message}}<br/></small>\t\r\n    </div>\r\n    <button [disabled]=\"!attandanceDetailFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","model":null,"modelName":null,"json":{}},"operatorExample":{"notes":null,"component":null,"html":null,"model":"RxwebValidators.maxTimeAsync({validatorConfig:of({operator:'<'  ,value:'00:10'})});\r\n","modelName":null,"json":{}},"operator":{"notes":[],"component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup, FormBuilder } from \"@angular/forms\"\r\nimport { RxwebValidators } from '@rxweb/reactive-form-validators';\r\n\r\n@Component({\r\n    selector: 'app-maxTimeAsync-operator-validator',\r\n    templateUrl: './max-time-async-operator.component.html'\r\n})\r\nexport class MaxTimeAsyncOperatorValidatorComponent implements OnInit {\r\n    attandanceDetailFormGroup: FormGroup\r\n\r\n\tconstructor(\r\n        private formBuilder: FormBuilder )\r\n\t{ }\r\n\r\n    ngOnInit() {\r\n        this.attandanceDetailFormGroup = this.formBuilder.group({\r\n            breakHours:['', RxwebValidators.maxTimeAsync({validatorConfig:of({operator:'<'  ,value:'00:10'})})], \r\n       });\r\n    }\r\n}\r\n","html":"<div>\r\n  <form  [formGroup]=\"attandanceDetailFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label>Break Hours</label>\r\n      <input type=\"text\" formControlName=\"breakHours\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">Value should be less than 00:10<br/></small>\r\n     <small class=\"form-text text-danger\" *ngIf=\"attandanceDetailFormGroup.controls.breakHours.errors\">{{attandanceDetailFormGroup.controls.breakHours.errors.maxTime.message}}<br/></small>\t\r\n    </div>\r\n    <button [disabled]=\"!attandanceDetailFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","model":null,"modelName":null,"json":{}},"allowSecondsExample":{"notes":null,"component":null,"html":null,"model":"RxwebValidators.maxTimeAsync({validatorConfig:of({allowSeconds:true  ,value:'02:00:00'})});\r\n","modelName":null,"json":{}},"allowSeconds":{"notes":[],"component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup, FormBuilder } from \"@angular/forms\"\r\nimport { RxwebValidators } from '@rxweb/reactive-form-validators';\r\n\r\n@Component({\r\n    selector: 'app-maxTimeAsync-allowSeconds-validator',\r\n    templateUrl: './max-time-async-allow-seconds.component.html'\r\n})\r\nexport class MaxTimeAsyncAllowSecondsValidatorComponent implements OnInit {\r\n    attandanceDetailFormGroup: FormGroup\r\n\r\n\tconstructor(\r\n        private formBuilder: FormBuilder )\r\n\t{ }\r\n\r\n    ngOnInit() {\r\n        this.attandanceDetailFormGroup = this.formBuilder.group({\r\n            totalOutTime:['', RxwebValidators.maxTimeAsync({validatorConfig:of({allowSeconds:true  ,value:'02:00:00'})})], \r\n       });\r\n    }\r\n}\r\n","html":"<div>\r\n  <form  [formGroup]=\"attandanceDetailFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label>Total Time Out</label>\r\n      <input type=\"text\" formControlName=\"totalOutTime\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">This field allow seconds in input time.<br/></small>\r\n     <small class=\"form-text text-danger\" *ngIf=\"attandanceDetailFormGroup.controls.totalOutTime.errors\">{{attandanceDetailFormGroup.controls.totalOutTime.errors.maxTime.message}}<br/></small>\t\r\n    </div>\r\n    <button [disabled]=\"!attandanceDetailFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","model":null,"modelName":null,"json":{}},"messageExample":{"notes":null,"component":null,"html":null,"model":"RxwebValidators.maxTimeAsync({validatorConfig:of({message:'You can enter only time format data'  ,fieldName:'closingTime'})});\r\n","modelName":null,"json":{}},"message":{"notes":[],"component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup, FormBuilder } from \"@angular/forms\"\r\nimport { RxwebValidators } from '@rxweb/reactive-form-validators';\r\n\r\n@Component({\r\n    selector: 'app-maxTimeAsync-message-validator',\r\n    templateUrl: './max-time-async-message.component.html'\r\n})\r\nexport class MaxTimeAsyncMessageValidatorComponent implements OnInit {\r\n    attandanceDetailFormGroup: FormGroup\r\n\r\n\tconstructor(\r\n        private formBuilder: FormBuilder )\r\n\t{ }\r\n\r\n    ngOnInit() {\r\n        this.attandanceDetailFormGroup = this.formBuilder.group({\r\n            exitTime:['', RxwebValidators.maxTimeAsync({validatorConfig:of({message:'You can enter only time format data'  ,fieldName:'closingTime'})})], \r\n       });\r\n    }\r\n}\r\n","html":"<div>\r\n  <form  [formGroup]=\"attandanceDetailFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label>Exit Time</label>\r\n      <input type=\"text\" formControlName=\"exitTime\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">Shows Custom Validation Message.<br/></small>\r\n     <small class=\"form-text text-danger\" *ngIf=\"attandanceDetailFormGroup.controls.exitTime.errors\">{{attandanceDetailFormGroup.controls.exitTime.errors.maxTime.message}}<br/></small>\t\r\n    </div>\r\n    <button [disabled]=\"!attandanceDetailFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","model":null,"modelName":null,"json":{}},"fieldNameExample":{"notes":null,"component":null,"html":null,"model":"RxwebValidators.maxTimeAsync({validatorConfig:of({message:'You can enter only time format data'  ,fieldName:'closingTime'})});\r\n","modelName":null,"json":{}},"fieldName":{"notes":[],"component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup, FormBuilder } from \"@angular/forms\"\r\nimport { RxwebValidators } from '@rxweb/reactive-form-validators';\r\n\r\n@Component({\r\n    selector: 'app-maxTimeAsync-fieldName-validator',\r\n    templateUrl: './max-time-async-field-name.component.html'\r\n})\r\nexport class MaxTimeAsyncFieldNameValidatorComponent implements OnInit {\r\n    attandanceDetailFormGroup: FormGroup\r\n\r\n\tconstructor(\r\n        private formBuilder: FormBuilder )\r\n\t{ }\r\n\r\n    ngOnInit() {\r\n        this.attandanceDetailFormGroup = this.formBuilder.group({\r\n            closingTime:['', RxwebValidators.maxTimeAsync({validatorConfig:of({value:'23:30'})})], \r\n            exitTime:['', RxwebValidators.maxTimeAsync({validatorConfig:of({message:'You can enter only time format data'  ,fieldName:'closingTime'})})], \r\n       });\r\n    }\r\n}\r\n","html":"<div>\r\n  <form  [formGroup]=\"attandanceDetailFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label>Closing Time</label>\r\n      <input type=\"text\" formControlName=\"closingTime\" class=\"form-control\"  />\r\n     <small class=\"form-text text-danger\" *ngIf=\"attandanceDetailFormGroup.controls.closingTime.errors\">{{attandanceDetailFormGroup.controls.closingTime.errors.maxTime.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Exit Time</label>\r\n      <input type=\"text\" formControlName=\"exitTime\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">Shows Custom Validation Message.<br/></small>\r\n     <small class=\"form-text text-danger\" *ngIf=\"attandanceDetailFormGroup.controls.exitTime.errors\">{{attandanceDetailFormGroup.controls.exitTime.errors.maxTime.message}}<br/></small>\t\r\n    </div>\r\n    <button [disabled]=\"!attandanceDetailFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","model":null,"modelName":null,"json":{}},"messageKeyExample":{"notes":null,"component":null,"html":null,"model":"RxwebValidators.maxTimeAsync({validatorConfig:of({messageKey:'maxTimeMessageKey'  ,fieldName:'totalInTime'})});\r\n","modelName":null,"json":{}},"messageKey":{"notes":[],"component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup, FormBuilder } from \"@angular/forms\"\r\nimport { RxwebValidators } from '@rxweb/reactive-form-validators';\r\n\r\n@Component({\r\n    selector: 'app-maxTimeAsync-messageKey-validator',\r\n    templateUrl: './max-time-async-message-key.component.html'\r\n})\r\nexport class MaxTimeAsyncMessageKeyValidatorComponent implements OnInit {\r\n    attandanceDetailFormGroup: FormGroup\r\n\r\n\tconstructor(\r\n        private formBuilder: FormBuilder )\r\n\t{ }\r\n\r\n    ngOnInit() {\r\n        this.attandanceDetailFormGroup = this.formBuilder.group({\r\n            netInTime:['', RxwebValidators.maxTimeAsync({validatorConfig:of({messageKey:'maxTimeMessageKey'  ,fieldName:'totalInTime'})})], \r\n       });\r\n    }\r\n}\r\n","html":"<div>\r\n  <form  [formGroup]=\"attandanceDetailFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label>Net-In Time</label>\r\n      <input type=\"text\" formControlName=\"netInTime\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">Shows Custom Validation Message using message key<br/></small>\r\n     <small class=\"form-text text-danger\" *ngIf=\"attandanceDetailFormGroup.controls.netInTime.errors\">{{attandanceDetailFormGroup.controls.netInTime.errors.maxTimeMessageKey.message}}<br/></small>\t\t\r\n    </div>\r\n    <button [disabled]=\"!attandanceDetailFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","model":null,"modelName":null,"json":{}},"dynamic":{"notes":[],"component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup, FormBuilder } from \"@angular/forms\"\r\nimport { RxwebValidators } from '@rxweb/reactive-form-validators';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { FormBuilderConfiguration,RxFormBuilder} from '@rxweb/reactive-form-validators';\r\nimport { environment } from 'src/environments/environment';\r\n\r\n@Component({\r\n    selector: 'app-maxTimeAsync-dynamic-validator',\r\n    templateUrl: './max-time-async-dynamic.component.html'\r\n})\r\nexport class MaxTimeAsyncDynamicValidatorComponent implements OnInit {\r\n    attandanceDetailFormGroup: FormGroup\r\n\r\n\tconstructor(\r\n        private formBuilder: RxFormBuilder , private http: HttpClient )\r\n\t{ }\r\n\r\n    ngOnInit() {\r\n\t\tlet formBuilderConfiguration = new FormBuilderConfiguration();\r\n\t\tthis.http.get('assets/examples/reactive-form-validators/validators/maxTimeAsync/dynamic/dynamic.json?v='+environment.appVersion).subscribe(dynamic => {\r\n\t\t\tformBuilderConfiguration.dynamicValidation = JSON.parse(JSON.stringify(dynamic));\r\n\t\t\tvar attandanceDetail = { entryPlace:'', closingTime:'', breakHours:'', totalOutTime:'', exitTime:'', netInTime:'',  }\r\n\t\t\tthis.attandanceDetailFormGroup = this.formBuilder.group(attandanceDetail,formBuilderConfiguration);\r\n\t\t})\r\n    }\r\n}\r\n","html":"<div>\r\n  <form  *ngIf=\"attandanceDetailFormGroup\"  [formGroup]=\"attandanceDetailFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label>Entry Place</label>\r\n      <input type=\"text\" formControlName=\"entryPlace\" class=\"form-control\"   />\r\n      <small class=\"form-text text-danger\" *ngIf=\"attandanceDetailFormGroup.controls.entryPlace.errors\">{{attandanceDetailFormGroup.controls.entryPlace.errors.maxTime.message}}<br/></small>\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Closing Time</label>\r\n      <input type=\"text\" formControlName=\"closingTime\" class=\"form-control\"  />\r\n     <small class=\"form-text text-danger\" *ngIf=\"attandanceDetailFormGroup.controls.closingTime.errors\">{{attandanceDetailFormGroup.controls.closingTime.errors.maxTime.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Break Hours</label>\r\n      <input type=\"text\" formControlName=\"breakHours\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">Value should be less than 00:10<br/></small>\r\n     <small class=\"form-text text-danger\" *ngIf=\"attandanceDetailFormGroup.controls.breakHours.errors\">{{attandanceDetailFormGroup.controls.breakHours.errors.maxTime.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Total Time Out</label>\r\n      <input type=\"text\" formControlName=\"totalOutTime\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">This field allow seconds in input time.<br/></small>\r\n     <small class=\"form-text text-danger\" *ngIf=\"attandanceDetailFormGroup.controls.totalOutTime.errors\">{{attandanceDetailFormGroup.controls.totalOutTime.errors.maxTime.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Exit Time</label>\r\n      <input type=\"text\" formControlName=\"exitTime\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">Shows Custom Validation Message.<br/></small>\r\n     <small class=\"form-text text-danger\" *ngIf=\"attandanceDetailFormGroup.controls.exitTime.errors\">{{attandanceDetailFormGroup.controls.exitTime.errors.maxTime.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Net-In Time</label>\r\n      <input type=\"text\" formControlName=\"netInTime\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">Shows Custom Validation Message using message key<br/></small>\r\n     <small class=\"form-text text-danger\" *ngIf=\"attandanceDetailFormGroup.controls.netInTime.errors\">{{attandanceDetailFormGroup.controls.netInTime.errors.maxTimeMessageKey.message}}<br/></small>\t\t\r\n    </div>\r\n    <button [disabled]=\"!attandanceDetailFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","model":null,"modelName":null,"json":{"dynamic.json":"{\"entryPlace\":{},\"closingTime\":{\"maxTimeAsync\":{\"value\":\"23:30\"}},\"breakHours\":{\"maxTimeAsync\":{\"operator\":\"<\",\"value\":\"00:10\"}},\"totalOutTime\":{\"maxTimeAsync\":{\"allowSeconds\":\"true\",\"value\":\"02:00:00\"}},\"exitTime\":{\"maxTimeAsync\":{\"message\":\"You can enter only time format data\",\"fieldName\":\"closingTime\"}},\"netInTime\":{\"maxTimeAsync\":{\"messageKey\":\"maxTimeMessageKey\",\"fieldName\":\"totalInTime\"}}}"}},"add":{"notes":[],"component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup, FormBuilder } from \"@angular/forms\"\r\nimport { RxwebValidators } from '@rxweb/reactive-form-validators';\r\n\r\n@Component({\r\n    selector: 'app-maxTimeAsync-add-validator',\r\n    templateUrl: './max-time-async-add.component.html'\r\n})\r\nexport class MaxTimeAsyncAddValidatorComponent implements OnInit {\r\n    attandanceDetailFormGroup: FormGroup\r\n\r\n\tconstructor(\r\n        private formBuilder: FormBuilder )\r\n\t{ }\r\n\r\n    ngOnInit() {\r\n        this.attandanceDetailFormGroup = this.formBuilder.group({\r\n            entryTime:['', RxwebValidators.maxTimeAsync({validatorConfig:of({value:'11:00'})})], \r\n       });\r\n    }\r\n}\r\n","html":"<div>\r\n  <form  [formGroup]=\"attandanceDetailFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label>Entry Time</label>\r\n      <input type=\"text\" formControlName=\"entryTime\" class=\"form-control\"  />\r\n     <small class=\"form-text text-danger\" *ngIf=\"attandanceDetailFormGroup.controls.entryTime.errors\">{{attandanceDetailFormGroup.controls.entryTime.errors.maxTime.message}}<br/></small>\t\r\n    </div>\r\n    <button [disabled]=\"!attandanceDetailFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","model":null,"modelName":null,"json":{}}}