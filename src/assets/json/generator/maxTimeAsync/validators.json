{"rightSidebarLinks":[{"id":"maxtimeasync","title":"maxTimeAsync","subLink":null},{"id":"whentouse","title":"When to use","subLink":[]},{"id":"basicmaxtimeasyncvalidation","title":"Basic maxTimeAsync Validation","subLink":[]},{"id":"validatorconfig","title":"ValidatorConfig","subLink":[{"title":"allowSeconds","id":"allowseconds","thirdLevelLink":[]},{"title":"fieldName","id":"fieldname","thirdLevelLink":[]},{"title":"message","id":"message","thirdLevelLink":[]},{"title":"messageKey","id":"messagekey","thirdLevelLink":[]},{"title":"operator","id":"operator","thirdLevelLink":[]},{"title":"value","id":"value","thirdLevelLink":[]}]},{"id":"completemaxtimeasyncexample","title":"Complete maxTimeAsync Example","subLink":[]}],"title":"maxTimeAsync","description":"maxTimeAsync validation  validators  will allow user to enter the input time format which must be less than or equal to the maximum time mentioned in the config parameters.","validatorType":"validators","validationTypeTitle":"Validators","type":"tabs","gitDocPath":"https://github.com/rxweb/rxweb.io/edit/master/docs/angular/reactive-forms/reactive-form-validators/async-validators/maxTimeAsync.md","category":"async-validators","subCategory":"Date and Time","linkTitle":"maxTimeAsync","tabArray":{"complete":[{"tabName":"Example","tabGroupContent":null,"content":"<div component=\"app-example-runner\" ref-component=\"app-maxTimeAsync-complete\"></div>\r\n"},{"tabName":"Component","tabGroupContent":null,"content":"<div component=\"app-code\" key=\"maxTimeAsync-complete-component\"></div> \r\n"},{"tabName":"Html","tabGroupContent":null,"content":"<div component=\"app-code\" key=\"maxTimeAsync-complete-html\"></div> \r\n"}]},"innerHtml":null,"htmlContent":"<div class=\"title-bar top_title\"><p>maxTimeAsync</p></div> <div class=\"title-bar\"><p>maxTimeAsync validation  validator  will allow user to enter the input time format which must be less than or equal to the minimum time mentioned in the config parameters asynchronously.</p></div>\r\n<div class='row page-section' id= 'whentouse'>\r\n<div class='col-lg-12'>\r\n<h2 class='showHideElement' >When to use<a title='Link to this heading' class='link-header' href='/async-validators/maxTimeAsync/validators#whentouse'><i class='fa fa-link'></i></a></h2>\r\n\r\n<p class='showHideElement' >Suppose you want to create a AttendanceDetail form, which contains field of EntryPlace, EntryTime, TotalTimeOut,Net In Time, Total In Time and Exit Time you want the user to enter valid time format which must not exceed the maximum time asynchronously. Here depending upon the requirement these scenarios may arise..</p>\r\n<ol class='showHideElement'>\r\n    <li>Allow maxTimeAsync validation in <span class='highlighted'>Closing Time</span> without seconds.</li>\r\n    <li>Allowing seconds in TotalTimeOut.</li>\r\n    <li>Adding Custom Message on <span class='highlighted'>Exit Time</span> Field.</li>\r\n    <li>Allowing either <span class='highlighted'>strictly less than</span> or <span class='highlighted'>less than equal to</span> operator on Break Hours Field based on a particular value.</li>\r\n    <li>Shows the custom message on <span class='highlighted'>Net In Time</span> field by using <span class='highlighted'>messageKey</span> property.</li>\r\n    <data-scope scope=\"['decorator','validator']\">\r\n        <li>Apply minTime validation dynamically based on server rules.</li>\r\n    </data-scope>\r\n</ol>\r\n<p class='showHideElement' >Letâ€™s see how maxTimeAsync validator fulfil the need.</p>\r\n</div></div>\r\n<div class='row page-section' id= 'basicmaxtimeasyncvalidation'>\r\n<div class='col-lg-12'>\r\n<h2>Basic maxTimeAsync Validation<a title='Link to this heading' class='link-header' href='/async-validators/maxTimeAsync/validators#basicmaxtimeasyncvalidation'><i class='fa fa-link'></i></a></h2>\r\n\r\n<p class='showHideElement' >Through Angular FormBuilder service we create FormGroup in the component.</p>\r\n<p class='showHideElement' >Here we have covered Add form operations. </p>\r\n<div component=\"app-code\" key=\"maxTimeAsync-add-component\"></div> \r\n<p class='showHideElement' >Next, we need to write html code.</p>\r\n<div component=\"app-code\" key=\"maxTimeAsync-add-html\"></div> \r\n<div component=\"app-example-runner\" ref-component=\"app-maxTimeAsync-add\"></div>\r\n</div></div>\r\n<div class='row page-section' id= 'validatorconfig'>\r\n<div class='col-lg-12'>\r\n<h2>ValidatorConfig<a title='Link to this heading' class='link-header' href='/async-validators/maxTimeAsync/validators#validatorconfig'><i class='fa fa-link'></i></a></h2>\r\n\r\n<p class='showHideElement' >Type : <span class='highlighted'>Observable</span></p>\r\n<p class='showHideElement' >validator config is used to dynamically resolve the value of the property according to the server rules by using the keyword <span class='highlighted'>of</span> as below </p>\r\n<p class='showHideElement' >Below options are not mandatory to use in the <span class='highlighted'>RxwebValidators.maxTimeAsync({validatorConfig:of({validatorConfig:of({&ltproperty_name&gt:&ltvalue&gt})})</span> validator. If needed then use the below options.</p>\r\n<table class=\"table table-bordered table-striped showHideElement\">\r\n<tr><th>Option</th><th>Description</th></tr>\r\n<tr><td><a (click)='scrollTo(\"#allowseconds\")' title=\"allowseconds\">allowseconds</a></td><td>If you are allowed seconds in time format then you need to put this as true.</td></tr>\r\n<tr><td><a (click)='scrollTo(\"#fieldName\")' title=\"fieldName\">fieldName</a></td><td>fieldName property of TimeRelationConfig can be used when the user wants to restricts the input time to be less than any particular field input.</td></tr>\r\n<tr><td><a (click)='scrollTo(\"#message\")' title=\"message\">message</a></td><td>To override the global configuration message and set the custom error message on respective FormControl</td></tr>\r\n<tr><td><a (click)='scrollTo(\"#messageKey\")' title=\"messageKey\">messageKey</a></td><td>messageKey property of BaseConfig can be used when the user wants to show a different custom validation message on some of their fields. User can define a custom messageKey globally by defining it in ReactiveFormConfig and set it in the message property of the validation.</td></tr>\r\n<tr><td><a (click)='scrollTo(\"#operator\")' title=\"operator\">operator</a></td><td>operator is used to validate time based upon less than or less than equal to a particular value, The default validation is based upon less than equal to.</td></tr>\r\n<tr><td><a (click)='scrollTo(\"#value\")' title=\"value\">value</a></td><td>value property of TimeRelationConfig can be used when the user wants to restricts the input time to be less than any particular time.</td></tr>\r\n</table >\r\n</div></div>\r\n<div class='row page-section' id= 'allowseconds'>\r\n<div class='col-lg-12'>\r\n<h2>allowSeconds<a title='Link to this heading' class='link-header' href='/async-validators/maxTimeAsync/validators#allowseconds'><i class='fa fa-link'></i></a></h2>\r\n\r\n<p class='showHideElement' >Type :  <span class='highlighted'>boolean</span> </p>\r\n<p class='showHideElement' >If you are allowed seconds in time format then you need to put this as true.</p>\r\n<div component=\"app-code\" key=\"maxTimeAsync-allowSecondsExample-model\"></div> \r\n<div component=\"app-example-runner\" ref-component=\"app-maxTimeAsync-allowSeconds\" title=\"maxTimeAsync validator with allowSeconds\" key=\"allowSeconds\"></div>\r\n</div></div>\r\n<div class='row page-section' id= 'fieldname'>\r\n<div class='col-lg-12'>\r\n<h2>fieldName<a title='Link to this heading' class='link-header' href='/async-validators/maxTimeAsync/validators#fieldname'><i class='fa fa-link'></i></a></h2>\r\n\r\n<p class='showHideElement' >Type :  <span class='highlighted'>string</span> </p>\r\n<p class='showHideElement' >fieldName property of TimeRelationConfig can be used when the user wants to restricts the input time to be less than any particular field input.</p>\r\n<div component=\"app-code\" key=\"maxTimeAsync-fieldNameExample-model\"></div> \r\n<div component=\"app-example-runner\" ref-component=\"app-maxTimeAsync-fieldName\" title=\"maxTimeAsync validator with fieldName\" key=\"fieldName\"></div>\r\n</div></div>\r\n<div class='row page-section' id= 'message'>\r\n<div class='col-lg-12'>\r\n<h2>message<a title='Link to this heading' class='link-header' href='/async-validators/maxTimeAsync/validators#message'><i class='fa fa-link'></i></a></h2>\r\n\r\n<p class='showHideElement' >Type :  <span class='highlighted'>string</span> </p>\r\n<p class='showHideElement' >To override the global configuration message and set the custom message on respective FormControl.</p>\r\n<div component=\"app-code\" key=\"maxTimeAsync-messageExample-model\"></div> \r\n<div component=\"app-example-runner\" ref-component=\"app-maxTimeAsync-message\" title=\"maxTimeAsync validator with message\" key=\"message\"></div>\r\n</div></div>\r\n<div class='row page-section' id= 'messagekey'>\r\n<div class='col-lg-12'>\r\n<h2>messageKey<a title='Link to this heading' class='link-header' href='/async-validators/maxTimeAsync/validators#messagekey'><i class='fa fa-link'></i></a></h2>\r\n\r\n<p class='showHideElement' >Type : <span class='highlighted'>string</span></p>\r\n<p class='showHideElement' >messageKey property of BaseConfig can be used when the user wants to show a different custom validation message on some of their fields. User can define a custom messageKey globally by defining it in ReactiveFormConfig and set it in the message property of the validation.</p>\r\n<div component=\"app-code\" key=\"maxTimeAsync-messageKeyExample-model\"></div> \r\n<div component=\"app-example-runner\" ref-component=\"app-maxTimeAsync-messageKey\" title=\"maxTimeAsync validator with messageKey\" key=\"messageKey\"></div>\r\n</div></div>\r\n<div class='row page-section' id= 'operator'>\r\n<div class='col-lg-12'>\r\n<h2>operator<a title='Link to this heading' class='link-header' href='/async-validators/maxTimeAsync/validators#operator'><i class='fa fa-link'></i></a></h2>\r\n\r\n<p class='showHideElement' >Type :  <span class='highlighted'>string</span> </p>\r\n<p class='showHideElement' ><span class='highlighted'>operator</span> is used to validate time based upon less than or less than equal to a particular value, The default validation is based upon less than equal to.</p>\r\n<div component=\"app-code\" key=\"maxTimeAsync-operatorExample-model\"></div> \r\n<div component=\"app-example-runner\" ref-component=\"app-maxTimeAsync-operator\" title=\"maxTimeAsync validator with operator\" key=\"operator\"></div>\r\n</div></div>\r\n<div class='row page-section' id= 'value'>\r\n<div class='col-lg-12'>\r\n<h2>value<a title='Link to this heading' class='link-header' href='/async-validators/maxTimeAsync/validators#value'><i class='fa fa-link'></i></a></h2>\r\n\r\n<p class='showHideElement' >Type :  <span class='highlighted'>string</span> </p>\r\n<p class='showHideElement' >value property of TimeRelationConfig can be used when the user wants to restricts the input time to be less than any particular time.</p>\r\n<div component=\"app-code\" key=\"maxTimeAsync-valueExample-model\"></div> \r\n<div component=\"app-example-runner\" ref-component=\"app-maxTimeAsync-value\" title=\"maxTimeAsync validator with value\" key=\"value\"></div>\r\n</div></div>\r\n<div class='row page-section' id= 'completemaxtimeasyncexample'>\r\n<div class='col-lg-12'>\r\n<h2>Complete maxTimeAsync Example<a title='Link to this heading' class='link-header' href='/async-validators/maxTimeAsync/validators#completemaxtimeasyncexample'><i class='fa fa-link'></i></a></h2>\r\n\r\n<p class='showHideElement' >This Complete maxTimeAsync example which includes all the maxTimeAsyncConfig properties will fulfil the requirement of scenarios 1, 2, 3, 4, 5 and 6.</p>\r\n<div component=\"app-tabs\" key=\"complete\"></div>\r\n</div></div>\r\n"}