{
    "complete": {
        "notes": [],
        "component": "import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup,Validators } from \"@angular/forms\"\r\nimport { Contact } from './contact.model';\r\n\r\n@Component({\r\n    selector: 'app-minLength-complete-template-driven-validation-directives',\r\n    templateUrl: './min-length-complete.component.html'\r\n})\r\nexport class MinLengthCompleteTemplateDrivenValidationDirectivesComponent implements OnInit {\r\n    contact: Contact\r\n\t\r\n    constructor(\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n       this.contact= new Contact()\r\n    }\r\n}\r\n",
        "html": "<div>\r\n  <form #contactForm = \"ngForm\" [rxwebForm]=\"contactForm\" [model]=\"contact\">\r\n    <div class=\"form-group\">\r\n      <label>Country Name</label>\r\n\t    <input type=\"text\" name=\"countryName\" [(ngModel)]=\"contact.countryName\"  class=\"form-control\" />\r\n\r\n\t   <small class=\"form-text text-danger\" *ngIf=\"contactForm.controls?.countryName?.errors\">{{contactForm.controls?.countryName?.errors?.minLength.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Mobile No.</label>\r\n\t    <input type=\"text\" name=\"mobileNo\" [(ngModel)]=\"contact.mobileNo\"  class=\"form-control\" [rxminLength]=\"{'value':10}\"/>\r\n\r\n      <small class=\"form-text text-muted\">Minimum length upto 10 characters.<br/></small>\r\n      <small class=\"form-text text-muted\">Shows message from ReactiveFormConfig.<br/></small>\r\n\t   <small class=\"form-text text-danger\" *ngIf=\"contactForm.controls?.mobileNo?.errors\">{{contactForm.controls?.mobileNo?.errors?.minLength.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Land line No</label>\r\n\t    <input type=\"text\" name=\"landLineNo\" [(ngModel)]=\"contact.landLineNo\"  class=\"form-control\" [rxminLength]=\"{'value':8,'message':'Minimum 8 characters are allowed'}\"/>\r\n\r\n      <small class=\"form-text text-muted\">Minimum length upto 8 characters.<br/></small>\r\n      <small class=\"form-text text-muted\">Shows custom message.<br/></small>\r\n\t   <small class=\"form-text text-danger\" *ngIf=\"contactForm.controls?.landLineNo?.errors\">{{contactForm.controls?.landLineNo?.errors?.minLength.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>State Code</label>\r\n\t    <input type=\"text\" name=\"stateCode\" [(ngModel)]=\"contact.stateCode\"  class=\"form-control\" [rxminLength]=\"{'value':3,'conditionalExpression':'x => x.countryName == \\'India\\''}\"/>\r\n\r\n      <small class=\"form-text text-muted\">If you want to apply conditionalExpression on 'State Code', then enter 'India' in 'Country Name'<br/></small>\r\n      <small class=\"form-text text-muted\">Minimum length upto 3 characters.<br/></small>\r\n      <small class=\"form-text text-muted\">Conditional Expression with type 'string'<br/></small>\r\n\t   <small class=\"form-text text-danger\" *ngIf=\"contactForm.controls?.stateCode?.errors\">{{contactForm.controls?.stateCode?.errors?.minLength.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>State Name</label>\r\n\t    <input type=\"text\" name=\"stateName\" [(ngModel)]=\"contact.stateName\"  class=\"form-control\" [rxminLength]=\"{'value':3,'messageKey':'minLengthMessageKey'}\"/>\r\n\r\n      <small class=\"form-text text-muted\">Shows custom message based on message key<br/></small>\r\n\t   <small class=\"form-text text-danger\" *ngIf=\"contactForm.controls?.stateName?.errors\">{{contactForm.controls?.stateName?.errors?.minLength.message}}<br/></small>\t\r\n    </div>\r\n    <button [disabled]=\"!contactForm.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n",
        "model": "\r\nexport class Contact {\r\n\r\n\tcountryName: string;\r\n\r\n\tmobileNo: string;\r\n\t\r\n\t\r\n\tlandLineNo: string;\r\n\t\r\n\t\r\n\tcountryCode: string;\r\n\t\r\n\t\r\n\tstateCode: string;\r\n\t\r\n\t\r\n\tstateName: string;\r\n\t\r\n\t\r\n}\r\n",
        "modelName": "contact.model.ts",
        "json": {}
    },
    "valueExample": {
        "notes": null,
        "component": null,
        "html": null,
        "model": "[rxminLength]=\"{'value':10}\"",
        "modelName": null,
        "json": {}
    },
    "value": {
        "notes": [],
        "component": "import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup,Validators } from \"@angular/forms\"\r\nimport { Contact } from './contact.model';\r\n\r\n@Component({\r\n    selector: 'app-minLength-value-template-driven-validation-directives',\r\n    templateUrl: './min-length-value.component.html'\r\n})\r\nexport class MinLengthValueTemplateDrivenValidationDirectivesComponent implements OnInit {\r\n    contact: Contact\r\n\t\r\n    constructor(\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n       this.contact= new Contact()\r\n    }\r\n}\r\n",
        "html": "<div>\r\n  <form #contactForm = \"ngForm\" [rxwebForm]=\"contactForm\" [model]=\"contact\">\r\n    <div class=\"form-group\">\r\n      <label>Mobile No.</label>\r\n\t    <input type=\"text\" name=\"mobileNo\" [(ngModel)]=\"contact.mobileNo\"  class=\"form-control\" [rxminLength]=\"{'value':10}\"/>\r\n\r\n      <small class=\"form-text text-muted\">Minimum length upto 10 characters.<br/></small>\r\n      <small class=\"form-text text-muted\">Shows message from ReactiveFormConfig.<br/></small>\r\n\t   <small class=\"form-text text-danger\" *ngIf=\"contactForm.controls?.mobileNo?.errors\">{{contactForm.controls?.mobileNo?.errors?.minLength.message}}<br/></small>\t\r\n    </div>\r\n    <button [disabled]=\"!contactForm.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n",
        "model": "\r\nexport class Contact {\r\n\r\n\tmobileNo: string;\r\n\t\r\n\t\r\n}\r\n",
        "modelName": "contact.model.ts",
        "json": {}
    },
    "messageExample": {
        "notes": null,
        "component": null,
        "html": null,
        "model": "[rxminLength]=\"{'value':8,'message':'Minimum 8 characters are allowed'}\"",
        "modelName": null,
        "json": {}
    },
    "message": {
        "notes": [],
        "component": "import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup,Validators } from \"@angular/forms\"\r\nimport { Contact } from './contact.model';\r\n\r\n@Component({\r\n    selector: 'app-minLength-message-template-driven-validation-directives',\r\n    templateUrl: './min-length-message.component.html'\r\n})\r\nexport class MinLengthMessageTemplateDrivenValidationDirectivesComponent implements OnInit {\r\n    contact: Contact\r\n\t\r\n    constructor(\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n       this.contact= new Contact()\r\n    }\r\n}\r\n",
        "html": "<div>\r\n  <form #contactForm = \"ngForm\" [rxwebForm]=\"contactForm\" [model]=\"contact\">\r\n    <div class=\"form-group\">\r\n      <label>Land line No</label>\r\n\t    <input type=\"text\" name=\"landLineNo\" [(ngModel)]=\"contact.landLineNo\"  class=\"form-control\" [rxminLength]=\"{'value':8,'message':'Minimum 8 characters are allowed'}\"/>\r\n\r\n      <small class=\"form-text text-muted\">Minimum length upto 8 characters.<br/></small>\r\n      <small class=\"form-text text-muted\">Shows custom message.<br/></small>\r\n\t   <small class=\"form-text text-danger\" *ngIf=\"contactForm.controls?.landLineNo?.errors\">{{contactForm.controls?.landLineNo?.errors?.minLength.message}}<br/></small>\t\r\n    </div>\r\n    <button [disabled]=\"!contactForm.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n",
        "model": "\r\nexport class Contact {\r\n\r\n\tlandLineNo: string;\r\n\t\r\n\t\r\n}\r\n",
        "modelName": "contact.model.ts",
        "json": {}
    },
    "valueExampleFunction": {
        "notes": null,
        "component": null,
        "html": null,
        "model": "[rxminLength]=\"{'value':3,'conditionalExpression':(x,y)=> x.countryName == \\'India\\'}\"",
        "modelName": null,
        "json": {}
    },
    "conditionalExpressionExampleFunction": {
        "notes": null,
        "component": null,
        "html": null,
        "model": "[rxminLength]=\"{'value':3,'conditionalExpression':(x,y)=> x.countryName == \\'India\\'}\"",
        "modelName": null,
        "json": {}
    },
    "conditionalExpression": {
        "notes": [],
        "component": "import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup,Validators } from \"@angular/forms\"\r\nimport { Contact } from './contact.model';\r\n\r\n@Component({\r\n    selector: 'app-minLength-conditionalExpression-template-driven-validation-directives',\r\n    templateUrl: './min-length-conditional-expression.component.html'\r\n})\r\nexport class MinLengthConditionalExpressionTemplateDrivenValidationDirectivesComponent implements OnInit {\r\n    contact: Contact\r\n\t\r\n    constructor(\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n       this.contact= new Contact()\r\n    }\r\n}\r\n",
        "html": "<div>\r\n  <form #contactForm = \"ngForm\" [rxwebForm]=\"contactForm\" [model]=\"contact\">\r\n    <div class=\"form-group\">\r\n      <label>Country Name</label>\r\n\t    <input type=\"text\" name=\"countryName\" [(ngModel)]=\"contact.countryName\"  class=\"form-control\" />\r\n\r\n\t   <small class=\"form-text text-danger\" *ngIf=\"contactForm.controls?.countryName?.errors\">{{contactForm.controls?.countryName?.errors?.minLength.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>State Code</label>\r\n\t    <input type=\"text\" name=\"stateCode\" [(ngModel)]=\"contact.stateCode\"  class=\"form-control\" [rxminLength]=\"{'value':3,'conditionalExpression':'x => x.countryName == \\'India\\''}\"/>\r\n\r\n      <small class=\"form-text text-muted\">If you want to apply conditionalExpression on 'State Code', then enter 'India' in 'Country Name'<br/></small>\r\n      <small class=\"form-text text-muted\">Minimum length upto 3 characters.<br/></small>\r\n      <small class=\"form-text text-muted\">Conditional Expression with type 'string'<br/></small>\r\n\t   <small class=\"form-text text-danger\" *ngIf=\"contactForm.controls?.stateCode?.errors\">{{contactForm.controls?.stateCode?.errors?.minLength.message}}<br/></small>\t\r\n    </div>\r\n    <button [disabled]=\"!contactForm.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n",
        "model": "\r\nexport class Contact {\r\n\r\n\tcountryName: string;\r\n\r\n\tstateCode: string;\r\n\t\r\n\t\r\n\tcountryCode: string;\r\n\t\r\n\t\r\n}\r\n",
        "modelName": "contact.model.ts",
        "json": {}
    },
    "valueExampleString": {
        "notes": null,
        "component": null,
        "html": null,
        "model": "[rxminLength]=\"{'value':3,'conditionalExpression':'x => x.countryName == \\'India\\''}\"",
        "modelName": null,
        "json": {}
    },
    "conditionalExpressionExampleString": {
        "notes": null,
        "component": null,
        "html": null,
        "model": "[rxminLength]=\"{'value':3,'conditionalExpression':'x => x.countryName == \\'India\\''}\"",
        "modelName": null,
        "json": {}
    },
    "messageKeyExample": {
        "notes": null,
        "component": null,
        "html": null,
        "model": "[rxminLength]=\"{'value':3,'messageKey':'minLengthMessageKey'}\"",
        "modelName": null,
        "json": {}
    },
    "messageKey": {
        "notes": [],
        "component": "import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup,Validators } from \"@angular/forms\"\r\nimport { Contact } from './contact.model';\r\n\r\n@Component({\r\n    selector: 'app-minLength-messageKey-template-driven-validation-directives',\r\n    templateUrl: './min-length-message-key.component.html'\r\n})\r\nexport class MinLengthMessageKeyTemplateDrivenValidationDirectivesComponent implements OnInit {\r\n    contact: Contact\r\n\t\r\n    constructor(\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n       this.contact= new Contact()\r\n    }\r\n}\r\n",
        "html": "<div>\r\n  <form #contactForm = \"ngForm\" [rxwebForm]=\"contactForm\" [model]=\"contact\">\r\n    <div class=\"form-group\">\r\n      <label>State Name</label>\r\n\t    <input type=\"text\" name=\"stateName\" [(ngModel)]=\"contact.stateName\"  class=\"form-control\" [rxminLength]=\"{'value':3,'messageKey':'minLengthMessageKey'}\"/>\r\n\r\n      <small class=\"form-text text-muted\">Shows custom message based on message key<br/></small>\r\n\t   <small class=\"form-text text-danger\" *ngIf=\"contactForm.controls?.stateName?.errors\">{{contactForm.controls?.stateName?.errors?.minLength.message}}<br/></small>\t\r\n    </div>\r\n    <button [disabled]=\"!contactForm.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n",
        "model": "\r\nexport class Contact {\r\n\r\n\tstateName: string;\r\n\t\r\n\t\r\n}\r\n",
        "modelName": "contact.model.ts",
        "json": {}
    },
    "add": {
        "notes": [],
        "component": "import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup,Validators } from \"@angular/forms\"\r\nimport { Contact } from './contact.model';\r\n\r\n@Component({\r\n    selector: 'app-minLength-add-template-driven-validation-directives',\r\n    templateUrl: './min-length-add.component.html'\r\n})\r\nexport class MinLengthAddTemplateDrivenValidationDirectivesComponent implements OnInit {\r\n    contact: Contact\r\n\t\r\n    constructor(\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n       this.contact= new Contact()\r\n    }\r\n}\r\n",
        "html": "<div>\r\n  <form #contactForm = \"ngForm\" [rxwebForm]=\"contactForm\" [model]=\"contact\">\r\n    <div class=\"form-group\">\r\n      <label>Country Name</label>\r\n\t    <input type=\"text\" name=\"countryName\" [(ngModel)]=\"contact.countryName\"  class=\"form-control\" [rxminLength]=\"{'value':3}\"/>\r\n\r\n      <small class=\"form-text text-muted\">Minimum length upto 3 characters.<br/></small>\r\n\t   <small class=\"form-text text-danger\" *ngIf=\"contactForm.controls?.countryName?.errors\">{{contactForm.controls?.countryName?.errors?.minLength.message}}<br/></small>\t\r\n    </div>\r\n    <button [disabled]=\"!contactForm.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n",
        "model": "\r\nexport class Contact {\r\n\r\n\tcountryName: string;\r\n\t\r\n\t\r\n}\r\n",
        "modelName": "contact.model.ts",
        "json": {}
    }
}