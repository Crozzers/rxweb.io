{"rightSidebarLinks":[{"id":"factorasync","title":"factorAsync","subLink":null},{"id":"whentouse","title":"When to use","subLink":[]},{"id":"basicfactorasyncvalidation","title":"Basic factorAsync Validation","subLink":[]},{"id":"validatorconfig","title":"ValidatorConfig","subLink":[{"title":"dividend","id":"dividend","thirdLevelLink":[]},{"title":"fieldName","id":"fieldname","thirdLevelLink":[]},{"title":"message","id":"message","thirdLevelLink":[]},{"title":"messageKey","id":"messagekey","thirdLevelLink":[]}]},{"id":"completefactorasyncexample","title":"Complete factorAsync Example","subLink":[]}],"title":"factorAsync","description":"factorAsync validation template driven will allow user to enter valid factor of a number which is called dividend.","validatorType":"template-driven","validationTypeTitle":"Template Driven Decorator","type":"tabs","gitDocPath":"https://github.com/rxweb/rxweb.io/edit/master/docs/angular/reactive-forms/reactive-form-validators/async-validators/factorAsync.md","category":"async-validators","subCategory":null,"linkTitle":"factorAsync","tabArray":{"complete":[{"tabName":"Example","tabGroupContent":null,"content":"<div component=\"app-example-runner\" ref-component=\"app-factorAsync-complete\"></div>\r\n"},{"tabName":"Model","tabGroupContent":null,"content":"<div component=\"app-code\" key=\"factorAsync-complete-model\"></div> \r\n"},{"tabName":"Component","tabGroupContent":null,"content":"<div component=\"app-code\" key=\"factorAsync-complete-component\"></div>\r\n"},{"tabName":"Html","tabGroupContent":null,"content":"<div component=\"app-code\" key=\"factorAsync-complete-html\"></div> \r\n"}]},"innerHtml":null,"htmlContent":"<div class=\"title-bar top_title\"><p>factorAsync</p></div> <div class=\"title-bar\"><p>factorAsync validation template driven will allow user to enter valid factorAsync of a number which is called dividend asynchronously.</p></div>\r\n<div class='row page-section' id= 'whentouse'>\r\n<div class='col-lg-12'>\r\n<h2 class='showHideElement' >When to use<a title='Link to this heading' class='link-header' href=''/async-validators/factorAsync/template-driven/decorators#whentouse'><i class='fa fa-link'></i></a></h2>\r\n\r\n<p class='showHideElement' >Suppose you want to create a user form in which you want user to enter factorAsync of a particular value which contains fields like firstNumber, secondNumber, ThirdNumber, fourthNumber, fifthNumber and sixthNumber asynchronously. Here depending upon the requirement these scenarios may arise.</p>\r\n<ol class='showHideElement'>\r\n   <li>Apply factorAsync validation on fifthNumber field based on 'firstName', so that input enterred in fifthNumber field must be a factorAsync of the input enterred in firstName.</li>\r\n   <li>Apply factorAsync validation on <span class='highlighted'>fourthNumber</span> field based of dividend. dividend is the value for which factors are calculated.</li>\r\n   <li>Adding the Custom Validation Message on <span class='highlighted'>sixthNumber</span> field.</li>\r\n   <li>Shows the custom message on <span class='highlighted'>Seventh Number</span> field by using <span class='highlighted'>messageKey</span> property.</li>\r\n   <data-scope scope=\"['decorator','validator']\">\r\n      <li>Apply factorAsync validation dynamically based on server rules.</li>\r\n   </data-scope>\r\n</ol>\r\n<p class='showHideElement' >Letâ€™s see how factorAsync template driven fulfil the need.</p>\r\n</div></div>\r\n<div class='row page-section' id= 'basicfactorasyncvalidation'>\r\n<div class='col-lg-12'>\r\n<h2>Basic factorAsync Validation<a title='Link to this heading' class='link-header' href='/async-validators/factorAsync/template-driven/decorators#basicfactorasyncvalidation'><i class='fa fa-link'></i></a></h2>\r\n\r\n<p class='showHideElement' >First we need to create a User Model class and define property of firstNumber in the model to achieve the basic functional need.</p>\r\n<div component=\"app-code\" key=\"factorAsync-add-model\"></div> \r\n<p class='showHideElement' >Through Angular FormBuilder service we create FormGroup in the component.</p>\r\n<p class='showHideElement' >Here we have covered Add form operations. </p>\r\n<div component=\"app-code\" key=\"factorAsync-add-component\"></div> \r\n<p class='showHideElement' >Next, we need to write html code.</p>\r\n<div component=\"app-code\" key=\"factorAsync-add-html\"></div> \r\n<div component=\"app-example-runner\" ref-component=\"app-factorAsync-add\"></div>\r\n</div></div>\r\n<div class='row page-section' id= 'validatorconfig'>\r\n<div class='col-lg-12'>\r\n<h2>ValidatorConfig<a title='Link to this heading' class='link-header' href='/async-validators/factorAsync/template-driven/decorators#validatorconfig'><i class='fa fa-link'></i></a></h2>\r\n\r\n<p class='showHideElement' >Type : <span class='highlighted'>Observable</span></p>\r\n<p class='showHideElement' >validator config is used to dynamically resolve the value of the property according to the server rules by using the keyword <span class='highlighted'>of</span> as below </p>\r\n<p class='showHideElement' >Below options are not mandatory to use in the <span class='highlighted'>factorAsync</span> validation. If needed then use the below options.</p>\r\n<table class=\"table table-bordered table-striped showHideElement\">\r\n<tr><th>Option</th><th>Description</th></tr>\r\n<tr><td><a href=\"#dividend\" (click)='scrollTo(\"#dividend\")' title=\"dividend\">dividend</a></td><td>dividend property of FactorConfig is used to assign a value whose factors to be enterred as input.</td></tr>\r\n<tr><td><a href=\"#fieldName\" (click)='scrollTo(\"#fieldName\")' title=\"fieldName\">fieldName</a></td><td>fieldName property is the name of the name of field for which the factors needed to be entered.</td></tr>\r\n<tr><td><a href=\"#message\" (click)='scrollTo(\"#message\")' title=\"message\">message</a></td><td>To override the global configuration message and set the custom error message on respective FormControl</td></tr>\r\n<tr><td><a href=\"#messageKey\" (click)='scrollTo(\"#messageKey\")' title=\"messageKey\">messageKey</a></td><td>messageKey property of BaseConfig can be used when the user wants to show a different custom validation message on some of their fields. User can define a custom messageKey globally by defining it in ReactiveFormConfig and set it in the message property of the validation.</td></tr>\r\n</table>\r\n</div></div>\r\n<div class='row page-section' id= 'dividend'>\r\n<div class='col-lg-12'>\r\n<h2>dividend<a title='Link to this heading' class='link-header' href='/async-validators/factorAsync/template-driven/decorators#dividend'><i class='fa fa-link'></i></a></h2>\r\n\r\n<p class='showHideElement' >Type :  <span class='highlighted'>string</span> </p>\r\n<p class='showHideElement' >dividend property of FactorConfig is used to assign a value whose factors to be enterred as input.</p>\r\n<div component=\"app-code\" key=\"factorAsync-dividendExample-model\"></div> \r\n<div component=\"app-example-runner\" ref-component=\"app-factorAsync-dividend\" title=\"factorAsync template driven with dividend\" key=\"dividend\"></div>\r\n</div></div>\r\n<div class='row page-section' id= 'fieldname'>\r\n<div class='col-lg-12'>\r\n<h2>fieldName<a title='Link to this heading' class='link-header' href='/async-validators/factorAsync/template-driven/decorators#fieldname'><i class='fa fa-link'></i></a></h2>\r\n\r\n<p class='showHideElement' >Type :  <span class='highlighted'>string</span> </p>\r\n<p class='showHideElement' >fieldName property is the name of the name of field for which the factors needed to be entered.</p>\r\n<div component=\"app-code\" key=\"factorAsync-fieldNameExample-model\"></div> \r\n<div component=\"app-example-runner\" ref-component=\"app-factorAsync-fieldName\" title=\"factorAsync template driven with fieldName\" key=\"fieldName\"></div>\r\n</div></div>\r\n<div class='row page-section' id= 'message'>\r\n<div class='col-lg-12'>\r\n<h2>message<a title='Link to this heading' class='link-header' href='/async-validators/factorAsync/template-driven/decorators#message'><i class='fa fa-link'></i></a></h2>\r\n\r\n<p class='showHideElement' >Type :  <span class='highlighted'>string</span> </p>\r\n<p class='showHideElement' >To override the global configuration message and set the custom error message on respective FormControl</p>\r\n<div component=\"app-code\" key=\"factorAsync-messageExample-model\"></div> \r\n<div component=\"app-example-runner\" ref-component=\"app-factorAsync-message\" title=\"factorAsync template driven with message\" key=\"message\"></div>\r\n</div></div>\r\n<div class='row page-section' id= 'messagekey'>\r\n<div class='col-lg-12'>\r\n<h2>messageKey<a title='Link to this heading' class='link-header' href='/async-validators/factorAsync/template-driven/decorators#messagekey'><i class='fa fa-link'></i></a></h2>\r\n\r\n<p class='showHideElement' >Type : <span class='highlighted'>string</span></p>\r\n<p class='showHideElement' >messageKey property of BaseConfig can be used when the user wants to show a different custom validation message on some of their fields. User can define a custom messageKey globally by defining it in ReactiveFormConfig and set it in the message property of the validation.</p>\r\n<div component=\"app-code\" key=\"factorAsync-messageKeyExample-model\"></div> \r\n<div component=\"app-example-runner\" ref-component=\"app-factorAsync-messageKey\" title=\"factorAsync template driven with messageKey\" key=\"messageKey\"></div>\r\n</div></div>\r\n<div class='row page-section' id= 'completefactorasyncexample'>\r\n<div class='col-lg-12'>\r\n<h2>Complete factorAsync Example<a title='Link to this heading' class='link-header' href='/async-validators/factorAsync/template-driven/decorators#completefactorasyncexample'><i class='fa fa-link'></i></a></h2>\r\n\r\n<p class='showHideElement' >This Complete factorAsync example which includes all the FactorConfig properties will fulfil the requirement of scenarios 1, 2, 3, 4 and 5.</p>\r\n<div component=\"app-tabs\" key=\"complete\"></div>\r\n</div></div>\r\n"}