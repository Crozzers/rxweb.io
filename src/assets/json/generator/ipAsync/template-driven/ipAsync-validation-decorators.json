{"complete":{"notes":[],"component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup,Validators } from \"@angular/forms\"\r\nimport { User } from './user.model';\r\n\r\n@Component({\r\n    selector: 'app-ipAsync-complete-template-driven-validation-decorators',\r\n    templateUrl: './ip-async-complete.component.html'\r\n})\r\nexport class IpAsyncCompleteTemplateDrivenValidationDecoratorsComponent implements OnInit {\r\n    user: User\r\n\t\t\t\t\tipTypes = [ \"V4\", \"V6\", \"AnyOne\",];\r\n\r\n    constructor(\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n       this.user= new User()\r\n    }\r\n}\r\n","html":"<div>\r\n  <form #userForm = \"ngForm\" [rxwebForm]=\"userForm\" [model]=\"user\">\r\n    <div class=\"form-group\">\r\n      <label>Ip Type</label>\r\n      <select name=\"ipType\" [(ngModel)]=\"user.ipType\"  class=\"form-control\" >\r\n\t\t<option [value]=\"item\" *ngFor=\"let item of ipTypes\">{{item}}</option>\r\n      </select>\r\n\r\n      <small class=\"form-text text-muted\">Based on selection of ip type conditional validation is applied<br/></small>\r\n\t   <small class=\"form-text text-danger\" *ngIf=\"userForm.controls?.ipType?.errors\">{{userForm.controls?.ipType?.errors?.ip.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>IP V4</label>\r\n\t    <input type=\"text\" name=\"ipV4\" [(ngModel)]=\"user.ipV4\"  class=\"form-control\" />\r\n\r\n      <small class=\"form-text text-muted\">This validation is applied when input value is not IP V4 Type<br/></small>\r\n\t   <small class=\"form-text text-danger\" *ngIf=\"userForm.controls?.ipV4?.errors\">{{userForm.controls?.ipV4?.errors?.ip.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>IP V6</label>\r\n\t    <input type=\"text\" name=\"ipV6\" [(ngModel)]=\"user.ipV6\"  class=\"form-control\" />\r\n\r\n      <small class=\"form-text text-muted\">This validation is applied when input value is not IP V6 Type<br/></small>\r\n\t   <small class=\"form-text text-danger\" *ngIf=\"userForm.controls?.ipV6?.errors\">{{userForm.controls?.ipV6?.errors?.ip.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Any IP Type</label>\r\n\t    <input type=\"text\" name=\"anyIPType\" [(ngModel)]=\"user.anyIPType\"  class=\"form-control\" />\r\n\r\n      <small class=\"form-text text-muted\">This validation is applied when input value is not any type of IP<br/></small>\r\n\t   <small class=\"form-text text-danger\" *ngIf=\"userForm.controls?.anyIPType?.errors\">{{userForm.controls?.anyIPType?.errors?.ip.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>IP V4 CIDR</label>\r\n\t    <input type=\"text\" name=\"ipV4Cidr\" [(ngModel)]=\"user.ipV4Cidr\"  class=\"form-control\" />\r\n\r\n      <small class=\"form-text text-muted\">This validation allowed ip version 4 and for supernetting Ips<br/></small>\r\n\t   <small class=\"form-text text-danger\" *ngIf=\"userForm.controls?.ipV4Cidr?.errors\">{{userForm.controls?.ipV4Cidr?.errors?.ip.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>IP V6 CIDR</label>\r\n\t    <input type=\"text\" name=\"ipV6Cidr\" [(ngModel)]=\"user.ipV6Cidr\"  class=\"form-control\" />\r\n\r\n      <small class=\"form-text text-muted\">This validation allowed ip version 6 and for supernetting Ips<br/></small>\r\n\t   <small class=\"form-text text-danger\" *ngIf=\"userForm.controls?.ipV6Cidr?.errors\">{{userForm.controls?.ipV6Cidr?.errors?.ip.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>IP V4 Custom Message</label>\r\n\t    <input type=\"text\" name=\"ipV4Message\" [(ngModel)]=\"user.ipV4Message\"  class=\"form-control\" />\r\n\r\n      <small class=\"form-text text-muted\">This validation allowed ip version 4 it display custom message<br/></small>\r\n\t   <small class=\"form-text text-danger\" *ngIf=\"userForm.controls?.ipV4Message?.errors\">{{userForm.controls?.ipV4Message?.errors?.ip.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>IP V6 Custom Message Key</label>\r\n\t    <input type=\"text\" name=\"ipV6MessageKey\" [(ngModel)]=\"user.ipV6MessageKey\"  class=\"form-control\" />\r\n\r\n      <small class=\"form-text text-muted\">This field only allows ip version 6 input and shows custom validation message based on message key.<br/></small>\r\n\t   <small class=\"form-text text-danger\" *ngIf=\"userForm.controls?.ipV6MessageKey?.errors\">{{userForm.controls?.ipV6MessageKey?.errors?.ip.message}}<br/></small>\t\r\n    </div>\r\n    <button [disabled]=\"!userForm.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","model":"import {  ipAsync,prop, } from   \"@rxweb/reactive-form-validators\"   \r\n\r\nexport class User {\r\n\r\n\t@prop()\r\n\tipType: string;\r\n\r\n\t@ipAsync({version:1 }) \r\n\tipV4: string;\r\n\t\r\n\t\r\n\t@ipAsync({version:2 }) \r\n\tipV6: string;\r\n\t\r\n\t\r\n\t@ipAsync({version:3 }) \r\n\tanyIPType: string;\r\n\t\r\n\t\r\n\t@ipAsync({version:1  ,isCidr:true }) \r\n\tipV4Cidr: string;\r\n\t\r\n\t\r\n\t@ipAsync({version:2  ,isCidr:true }) \r\n\tipV6Cidr: string;\r\n\t\r\n\t\r\n\t@ipAsync({version:1  ,message:'Please Enter IP V4 type Only' }) \r\n\tipV4Message: string;\r\n\t\r\n\t\r\n\t@ipAsync({version:2  ,messageKey:'ipMessageKey' }) \r\n\tipV6MessageKey: string;\r\n\t\r\n\t\r\n}\r\n","modelName":"user.model.ts","json":{}},"versionExample":{"notes":null,"component":null,"html":null,"model":"@ipAsync({version:1 }) \r\nipV4: string;\r\n","modelName":null,"json":{}},"version":{"notes":[],"component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup,Validators } from \"@angular/forms\"\r\nimport { User } from './user.model';\r\n\r\n@Component({\r\n    selector: 'app-ipAsync-version-template-driven-validation-decorators',\r\n    templateUrl: './ip-async-version.component.html'\r\n})\r\nexport class IpAsyncVersionTemplateDrivenValidationDecoratorsComponent implements OnInit {\r\n    user: User\r\n\t\r\n    constructor(\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n       this.user= new User()\r\n    }\r\n}\r\n","html":"<div>\r\n  <form #userForm = \"ngForm\" [rxwebForm]=\"userForm\" [model]=\"user\">\r\n    <div class=\"form-group\">\r\n      <label>IP V4</label>\r\n\t    <input type=\"text\" name=\"ipV4\" [(ngModel)]=\"user.ipV4\"  class=\"form-control\" />\r\n\r\n      <small class=\"form-text text-muted\">This validation is applied when input value is not IP V4 Type<br/></small>\r\n\t   <small class=\"form-text text-danger\" *ngIf=\"userForm.controls?.ipV4?.errors\">{{userForm.controls?.ipV4?.errors?.ip.message}}<br/></small>\t\r\n    </div>\r\n    <button [disabled]=\"!userForm.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","model":"import {  ipAsync, } from   \"@rxweb/reactive-form-validators\"   \r\n\r\nexport class User {\r\n\r\n\t@ipAsync({version:1 }) \r\n\tipV4: string;\r\n\t\r\n\t\r\n}\r\n","modelName":"user.model.ts","json":{}},"isCidrExample":{"notes":null,"component":null,"html":null,"model":"@ipAsync({version:1  ,isCidr:true }) \r\nipV4Cidr: string;\r\n","modelName":null,"json":{}},"isCidr":{"notes":[],"component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup,Validators } from \"@angular/forms\"\r\nimport { User } from './user.model';\r\n\r\n@Component({\r\n    selector: 'app-ipAsync-isCidr-template-driven-validation-decorators',\r\n    templateUrl: './ip-async-is-cidr.component.html'\r\n})\r\nexport class IpAsyncIsCidrTemplateDrivenValidationDecoratorsComponent implements OnInit {\r\n    user: User\r\n\t\r\n    constructor(\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n       this.user= new User()\r\n    }\r\n}\r\n","html":"<div>\r\n  <form #userForm = \"ngForm\" [rxwebForm]=\"userForm\" [model]=\"user\">\r\n    <div class=\"form-group\">\r\n      <label>IP V4 CIDR</label>\r\n\t    <input type=\"text\" name=\"ipV4Cidr\" [(ngModel)]=\"user.ipV4Cidr\"  class=\"form-control\" />\r\n\r\n      <small class=\"form-text text-muted\">This validation allowed ip version 4 and for supernetting Ips<br/></small>\r\n\t   <small class=\"form-text text-danger\" *ngIf=\"userForm.controls?.ipV4Cidr?.errors\">{{userForm.controls?.ipV4Cidr?.errors?.ip.message}}<br/></small>\t\r\n    </div>\r\n    <button [disabled]=\"!userForm.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","model":"import {  ipAsync, } from   \"@rxweb/reactive-form-validators\"   \r\n\r\nexport class User {\r\n\r\n\t@ipAsync({version:1  ,isCidr:true }) \r\n\tipV4Cidr: string;\r\n\t\r\n\t\r\n}\r\n","modelName":"user.model.ts","json":{}},"messageExample":{"notes":null,"component":null,"html":null,"model":"@ipAsync({version:1  ,message:'Please Enter IP V4 type Only' }) \r\nipV4Message: string;\r\n","modelName":null,"json":{}},"message":{"notes":[],"component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup,Validators } from \"@angular/forms\"\r\nimport { User } from './user.model';\r\n\r\n@Component({\r\n    selector: 'app-ipAsync-message-template-driven-validation-decorators',\r\n    templateUrl: './ip-async-message.component.html'\r\n})\r\nexport class IpAsyncMessageTemplateDrivenValidationDecoratorsComponent implements OnInit {\r\n    user: User\r\n\t\r\n    constructor(\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n       this.user= new User()\r\n    }\r\n}\r\n","html":"<div>\r\n  <form #userForm = \"ngForm\" [rxwebForm]=\"userForm\" [model]=\"user\">\r\n    <div class=\"form-group\">\r\n      <label>IP V4 Custom Message</label>\r\n\t    <input type=\"text\" name=\"ipV4Message\" [(ngModel)]=\"user.ipV4Message\"  class=\"form-control\" />\r\n\r\n      <small class=\"form-text text-muted\">This validation allowed ip version 4 it display custom message<br/></small>\r\n\t   <small class=\"form-text text-danger\" *ngIf=\"userForm.controls?.ipV4Message?.errors\">{{userForm.controls?.ipV4Message?.errors?.ip.message}}<br/></small>\t\r\n    </div>\r\n    <button [disabled]=\"!userForm.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","model":"import {  ipAsync, } from   \"@rxweb/reactive-form-validators\"   \r\n\r\nexport class User {\r\n\r\n\t@ipAsync({version:1  ,message:'Please Enter IP V4 type Only' }) \r\n\tipV4Message: string;\r\n\t\r\n\t\r\n}\r\n","modelName":"user.model.ts","json":{}},"messageKeyExample":{"notes":null,"component":null,"html":null,"model":"@ipAsync({version:2  ,messageKey:'ipMessageKey' }) \r\nipV6MessageKey: string;\r\n","modelName":null,"json":{}},"messageKey":{"notes":[],"component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup,Validators } from \"@angular/forms\"\r\nimport { User } from './user.model';\r\n\r\n@Component({\r\n    selector: 'app-ipAsync-messageKey-template-driven-validation-decorators',\r\n    templateUrl: './ip-async-message-key.component.html'\r\n})\r\nexport class IpAsyncMessageKeyTemplateDrivenValidationDecoratorsComponent implements OnInit {\r\n    user: User\r\n\t\r\n    constructor(\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n       this.user= new User()\r\n    }\r\n}\r\n","html":"<div>\r\n  <form #userForm = \"ngForm\" [rxwebForm]=\"userForm\" [model]=\"user\">\r\n    <div class=\"form-group\">\r\n      <label>IP V6 Custom Message Key</label>\r\n\t    <input type=\"text\" name=\"ipV6MessageKey\" [(ngModel)]=\"user.ipV6MessageKey\"  class=\"form-control\" />\r\n\r\n      <small class=\"form-text text-muted\">This field only allows ip version 6 input and shows custom validation message based on message key.<br/></small>\r\n\t   <small class=\"form-text text-danger\" *ngIf=\"userForm.controls?.ipV6MessageKey?.errors\">{{userForm.controls?.ipV6MessageKey?.errors?.ip.message}}<br/></small>\t\r\n    </div>\r\n    <button [disabled]=\"!userForm.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","model":"import {  ipAsync, } from   \"@rxweb/reactive-form-validators\"   \r\n\r\nexport class User {\r\n\r\n\t@ipAsync({version:2  ,messageKey:'ipMessageKey' }) \r\n\tipV6MessageKey: string;\r\n\t\r\n\t\r\n}\r\n","modelName":"user.model.ts","json":{}},"add":{"notes":[],"component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup,Validators } from \"@angular/forms\"\r\nimport { User } from './user.model';\r\n\r\n@Component({\r\n    selector: 'app-ipAsync-add-template-driven-validation-decorators',\r\n    templateUrl: './ip-async-add.component.html'\r\n})\r\nexport class IpAsyncAddTemplateDrivenValidationDecoratorsComponent implements OnInit {\r\n    user: User\r\n\t\r\n    constructor(\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n       this.user= new User()\r\n    }\r\n}\r\n","html":"<div>\r\n  <form #userForm = \"ngForm\" [rxwebForm]=\"userForm\" [model]=\"user\">\r\n    <div class=\"form-group\">\r\n      <label>IP V4</label>\r\n\t    <input type=\"text\" name=\"ipV4\" [(ngModel)]=\"user.ipV4\"  class=\"form-control\" />\r\n\r\n      <small class=\"form-text text-muted\">This validation is applied when input value is not IP V4 Type<br/></small>\r\n\t   <small class=\"form-text text-danger\" *ngIf=\"userForm.controls?.ipV4?.errors\">{{userForm.controls?.ipV4?.errors?.ip.message}}<br/></small>\t\r\n    </div>\r\n    <button [disabled]=\"!userForm.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","model":"import {  ipAsync, } from   \"@rxweb/reactive-form-validators\"   \r\n\r\nexport class User {\r\n\r\n\t@ipAsync({version:1 }) \r\n\tipV4: string;\r\n\t\r\n\t\r\n}\r\n","modelName":"user.model.ts","json":{}}}