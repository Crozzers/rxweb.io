{"complete":{"notes":[],"component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup, FormBuilder } from \"@angular/forms\"\r\nimport { RxwebValidators } from '@rxweb/reactive-form-validators';\r\n\r\n@Component({\r\n    selector: 'app-ipAsync-complete-validator',\r\n    templateUrl: './ip-async-complete.component.html'\r\n})\r\nexport class IpAsyncCompleteValidatorComponent implements OnInit {\r\n    userFormGroup: FormGroup\r\n\r\n\t\t\t\tipTypes = [ \"V4\", \"V6\", \"AnyOne\",];\r\n\t\r\n\t\r\n\t\r\n\t\r\n\t\r\n\t\r\n\t\r\n\t\r\n\tconstructor(\r\n        private formBuilder: FormBuilder )\r\n\t{ }\r\n\r\n    ngOnInit() {\r\n        this.userFormGroup = this.formBuilder.group({\r\n            ipType:['',], \r\n            ipV4:['', RxwebValidators.ipAsync({validatorConfig:of({version:1 })})], \r\n            ipV6:['', RxwebValidators.ipAsync({validatorConfig:of({version:2 })})], \r\n            anyIPType:['', RxwebValidators.ipAsync({validatorConfig:of({version:3 })})], \r\n            ipV4Cidr:['', RxwebValidators.ipAsync({validatorConfig:of({version:1  ,isCidr:true })})], \r\n            ipV6Cidr:['', RxwebValidators.ipAsync({validatorConfig:of({version:2  ,isCidr:true })})], \r\n            ipV4Message:['', RxwebValidators.ipAsync({validatorConfig:of({version:1  ,message:'Please Enter IP V4 type Only' })})], \r\n            ipV6MessageKey:['', RxwebValidators.ipAsync({validatorConfig:of({version:2  ,messageKey:'ipMessageKey' })})], \r\n        });\r\n    }\r\n}\r\n","html":"<div>\r\n  <form  [formGroup]=\"userFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label>Ip Type</label>\r\n      <select formControlName=\"ipType\" class=\"form-control\">\r\n\t\t<option [value]=\"item\" *ngFor=\"let item of ipTypes\">{{item}}</option>\r\n      </select>\r\n      <small class=\"form-text text-muted\">Based on selection of ip type conditional validation is applied<br/></small>\r\n     <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.ipType.errors\">{{userFormGroup.controls.ipType.errors?.ip?.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>IP V4</label>\r\n      <input type=\"text\" formControlName=\"ipV4\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">This validation is applied when input value is not IP V4 Type<br/></small>\r\n     <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.ipV4.errors\">{{userFormGroup.controls.ipV4.errors?.ip?.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>IP V6</label>\r\n      <input type=\"text\" formControlName=\"ipV6\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">This validation is applied when input value is not IP V6 Type<br/></small>\r\n     <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.ipV6.errors\">{{userFormGroup.controls.ipV6.errors?.ip?.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Any IP Type</label>\r\n      <input type=\"text\" formControlName=\"anyIPType\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">This validation is applied when input value is not any type of IP<br/></small>\r\n     <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.anyIPType.errors\">{{userFormGroup.controls.anyIPType.errors?.ip?.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>IP V4 CIDR</label>\r\n      <input type=\"text\" formControlName=\"ipV4Cidr\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">This validation allowed ip version 4 and for supernetting Ips<br/></small>\r\n     <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.ipV4Cidr.errors\">{{userFormGroup.controls.ipV4Cidr.errors?.ip?.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>IP V6 CIDR</label>\r\n      <input type=\"text\" formControlName=\"ipV6Cidr\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">This validation allowed ip version 6 and for supernetting Ips<br/></small>\r\n     <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.ipV6Cidr.errors\">{{userFormGroup.controls.ipV6Cidr.errors?.ip?.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>IP V4 Custom Message</label>\r\n      <input type=\"text\" formControlName=\"ipV4Message\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">This validation allowed ip version 4 it display custom message<br/></small>\r\n     <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.ipV4Message.errors\">{{userFormGroup.controls.ipV4Message.errors?.ip?.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>IP V6 Custom Message Key</label>\r\n      <input type=\"text\" formControlName=\"ipV6MessageKey\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">This field only allows ip version 6 input and shows custom validation message based on message key.<br/></small>\r\n     <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.ipV6MessageKey.errors\">{{userFormGroup.controls.ipV6MessageKey.errors.ipMessageKey.message}}<br/></small>\t\t\r\n    </div>\r\n    <button [disabled]=\"!userFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","model":null,"modelName":null,"json":{}},"versionExample":{"notes":null,"component":null,"html":null,"model":"RxwebValidators.ipAsync({validatorConfig:of({version:1 });\r\n","modelName":null,"json":{}},"version":{"notes":[],"component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup, FormBuilder } from \"@angular/forms\"\r\nimport { RxwebValidators } from '@rxweb/reactive-form-validators';\r\n\r\n@Component({\r\n    selector: 'app-ipAsync-version-validator',\r\n    templateUrl: './ip-async-version.component.html'\r\n})\r\nexport class IpAsyncVersionValidatorComponent implements OnInit {\r\n    userFormGroup: FormGroup\r\n\r\n\tconstructor(\r\n        private formBuilder: FormBuilder )\r\n\t{ }\r\n\r\n    ngOnInit() {\r\n        this.userFormGroup = this.formBuilder.group({\r\n            ipV4:['', RxwebValidators.ipAsync({validatorConfig:of({version:1 })})], \r\n        });\r\n    }\r\n}\r\n","html":"<div>\r\n  <form  [formGroup]=\"userFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label>IP V4</label>\r\n      <input type=\"text\" formControlName=\"ipV4\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">This validation is applied when input value is not IP V4 Type<br/></small>\r\n     <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.ipV4.errors\">{{userFormGroup.controls.ipV4.errors?.ip?.message}}<br/></small>\t\r\n    </div>\r\n    <button [disabled]=\"!userFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","model":null,"modelName":null,"json":{}},"isCidrExample":{"notes":null,"component":null,"html":null,"model":"RxwebValidators.ipAsync({validatorConfig:of({version:1  ,isCidr:true });\r\n","modelName":null,"json":{}},"isCidr":{"notes":[],"component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup, FormBuilder } from \"@angular/forms\"\r\nimport { RxwebValidators } from '@rxweb/reactive-form-validators';\r\n\r\n@Component({\r\n    selector: 'app-ipAsync-isCidr-validator',\r\n    templateUrl: './ip-async-is-cidr.component.html'\r\n})\r\nexport class IpAsyncIsCidrValidatorComponent implements OnInit {\r\n    userFormGroup: FormGroup\r\n\r\n\tconstructor(\r\n        private formBuilder: FormBuilder )\r\n\t{ }\r\n\r\n    ngOnInit() {\r\n        this.userFormGroup = this.formBuilder.group({\r\n            ipV4Cidr:['', RxwebValidators.ipAsync({validatorConfig:of({version:1  ,isCidr:true })})], \r\n        });\r\n    }\r\n}\r\n","html":"<div>\r\n  <form  [formGroup]=\"userFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label>IP V4 CIDR</label>\r\n      <input type=\"text\" formControlName=\"ipV4Cidr\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">This validation allowed ip version 4 and for supernetting Ips<br/></small>\r\n     <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.ipV4Cidr.errors\">{{userFormGroup.controls.ipV4Cidr.errors?.ip?.message}}<br/></small>\t\r\n    </div>\r\n    <button [disabled]=\"!userFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","model":null,"modelName":null,"json":{}},"messageExample":{"notes":null,"component":null,"html":null,"model":"RxwebValidators.ipAsync({validatorConfig:of({version:1  ,message:'Please Enter IP V4 type Only' });\r\n","modelName":null,"json":{}},"message":{"notes":[],"component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup, FormBuilder } from \"@angular/forms\"\r\nimport { RxwebValidators } from '@rxweb/reactive-form-validators';\r\n\r\n@Component({\r\n    selector: 'app-ipAsync-message-validator',\r\n    templateUrl: './ip-async-message.component.html'\r\n})\r\nexport class IpAsyncMessageValidatorComponent implements OnInit {\r\n    userFormGroup: FormGroup\r\n\r\n\tconstructor(\r\n        private formBuilder: FormBuilder )\r\n\t{ }\r\n\r\n    ngOnInit() {\r\n        this.userFormGroup = this.formBuilder.group({\r\n            ipV4Message:['', RxwebValidators.ipAsync({validatorConfig:of({version:1  ,message:'Please Enter IP V4 type Only' })})], \r\n        });\r\n    }\r\n}\r\n","html":"<div>\r\n  <form  [formGroup]=\"userFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label>IP V4 Custom Message</label>\r\n      <input type=\"text\" formControlName=\"ipV4Message\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">This validation allowed ip version 4 it display custom message<br/></small>\r\n     <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.ipV4Message.errors\">{{userFormGroup.controls.ipV4Message.errors?.ip?.message}}<br/></small>\t\r\n    </div>\r\n    <button [disabled]=\"!userFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","model":null,"modelName":null,"json":{}},"messageKeyExample":{"notes":null,"component":null,"html":null,"model":"RxwebValidators.ipAsync({validatorConfig:of({version:2  ,messageKey:'ipMessageKey' });\r\n","modelName":null,"json":{}},"messageKey":{"notes":[],"component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup, FormBuilder } from \"@angular/forms\"\r\nimport { RxwebValidators } from '@rxweb/reactive-form-validators';\r\n\r\n@Component({\r\n    selector: 'app-ipAsync-messageKey-validator',\r\n    templateUrl: './ip-async-message-key.component.html'\r\n})\r\nexport class IpAsyncMessageKeyValidatorComponent implements OnInit {\r\n    userFormGroup: FormGroup\r\n\r\n\tconstructor(\r\n        private formBuilder: FormBuilder )\r\n\t{ }\r\n\r\n    ngOnInit() {\r\n        this.userFormGroup = this.formBuilder.group({\r\n            ipV6MessageKey:['', RxwebValidators.ipAsync({validatorConfig:of({version:2  ,messageKey:'ipMessageKey' })})], \r\n        });\r\n    }\r\n}\r\n","html":"<div>\r\n  <form  [formGroup]=\"userFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label>IP V6 Custom Message Key</label>\r\n      <input type=\"text\" formControlName=\"ipV6MessageKey\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">This field only allows ip version 6 input and shows custom validation message based on message key.<br/></small>\r\n     <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.ipV6MessageKey.errors\">{{userFormGroup.controls.ipV6MessageKey.errors.ipMessageKey.message}}<br/></small>\t\t\r\n    </div>\r\n    <button [disabled]=\"!userFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","model":null,"modelName":null,"json":{}},"dynamic":{"notes":[],"component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup, FormBuilder } from \"@angular/forms\"\r\nimport { RxwebValidators } from '@rxweb/reactive-form-validators';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { FormBuilderConfiguration,RxFormBuilder} from '@rxweb/reactive-form-validators';\r\nimport { environment } from 'src/environments/environment';\r\n\r\n@Component({\r\n    selector: 'app-ipAsync-dynamic-validator',\r\n    templateUrl: './ip-async-dynamic.component.html'\r\n})\r\nexport class IpAsyncDynamicValidatorComponent implements OnInit {\r\n    userFormGroup: FormGroup\r\n\r\n\t\t\t\tipTypes = [ \"V4\", \"V6\", \"AnyOne\",];\r\n\t\r\n\t\r\n\t\r\n\t\r\n\t\r\n\t\r\n\t\r\n\t\r\n\tconstructor(\r\n        private formBuilder: RxFormBuilder , private http: HttpClient )\r\n\t{ }\r\n\r\n    ngOnInit() {\r\n\t\tlet formBuilderConfiguration = new FormBuilderConfiguration();\r\n\t\tthis.http.get('assets/examples/reactive-form-validators/validators/ipAsync/dynamic/dynamic.json?v='+environment.appVersion).subscribe(dynamic => {\r\n\t\t\tformBuilderConfiguration.dynamicValidation = JSON.parse(JSON.stringify(dynamic));\r\n\t\t\tvar user = { ipType:'', ipV4:'', ipV6:'', anyIPType:'', ipV4Cidr:'', ipV6Cidr:'', ipV4Message:'', ipV6MessageKey:'',  }\r\n\t\t\tthis.userFormGroup = this.formBuilder.group(user,formBuilderConfiguration);\r\n\t\t})\r\n    }\r\n}\r\n","html":"<div>\r\n  <form  *ngIf=\"userFormGroup\"  [formGroup]=\"userFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label>Ip Type</label>\r\n      <select formControlName=\"ipType\" class=\"form-control\">\r\n\t\t<option [value]=\"item\" *ngFor=\"let item of ipTypes\">{{item}}</option>\r\n      </select>\r\n      <small class=\"form-text text-muted\">Based on selection of ip type conditional validation is applied<br/></small>\r\n      <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.ipType.errors\">{{userFormGroup.controls.ipType.errors?.ip?.message}}<br/></small>\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>IP V4</label>\r\n      <input type=\"text\" formControlName=\"ipV4\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">This validation is applied when input value is not IP V4 Type<br/></small>\r\n     <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.ipV4.errors\">{{userFormGroup.controls.ipV4.errors?.ip?.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>IP V6</label>\r\n      <input type=\"text\" formControlName=\"ipV6\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">This validation is applied when input value is not IP V6 Type<br/></small>\r\n     <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.ipV6.errors\">{{userFormGroup.controls.ipV6.errors?.ip?.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Any IP Type</label>\r\n      <input type=\"text\" formControlName=\"anyIPType\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">This validation is applied when input value is not any type of IP<br/></small>\r\n     <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.anyIPType.errors\">{{userFormGroup.controls.anyIPType.errors?.ip?.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>IP V4 CIDR</label>\r\n      <input type=\"text\" formControlName=\"ipV4Cidr\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">This validation allowed ip version 4 and for supernetting Ips<br/></small>\r\n     <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.ipV4Cidr.errors\">{{userFormGroup.controls.ipV4Cidr.errors?.ip?.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>IP V6 CIDR</label>\r\n      <input type=\"text\" formControlName=\"ipV6Cidr\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">This validation allowed ip version 6 and for supernetting Ips<br/></small>\r\n     <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.ipV6Cidr.errors\">{{userFormGroup.controls.ipV6Cidr.errors?.ip?.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>IP V4 Custom Message</label>\r\n      <input type=\"text\" formControlName=\"ipV4Message\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">This validation allowed ip version 4 it display custom message<br/></small>\r\n     <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.ipV4Message.errors\">{{userFormGroup.controls.ipV4Message.errors?.ip?.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>IP V6 Custom Message Key</label>\r\n      <input type=\"text\" formControlName=\"ipV6MessageKey\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">This field only allows ip version 6 input and shows custom validation message based on message key.<br/></small>\r\n     <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.ipV6MessageKey.errors\">{{userFormGroup.controls.ipV6MessageKey.errors.ipMessageKey.message}}<br/></small>\t\t\r\n    </div>\r\n    <button [disabled]=\"!userFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","model":null,"modelName":null,"json":{"dynamic.json":"{\"ipType\":{},\"ipV4\":{\"ipAsync\":{\"version\":\"1\"}},\"ipV6\":{\"ipAsync\":{\"version\":\"2\"}},\"anyIPType\":{\"ipAsync\":{\"version\":\"3\"}},\"ipV4Cidr\":{\"ipAsync\":{\"version\":\"1\",\"isCidr\":\"true\"}},\"ipV6Cidr\":{\"ipAsync\":{\"version\":\"2\",\"isCidr\":\"true\"}},\"ipV4Message\":{\"ipAsync\":{\"version\":\"1\",\"message\":\"Please Enter IP V4 type Only\"}},\"ipV6MessageKey\":{\"ipAsync\":{\"version\":\"2\",\"messageKey\":\"ipMessageKey\"}}}"}},"add":{"notes":[],"component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup, FormBuilder } from \"@angular/forms\"\r\nimport { RxwebValidators } from '@rxweb/reactive-form-validators';\r\n\r\n@Component({\r\n    selector: 'app-ipAsync-add-validator',\r\n    templateUrl: './ip-async-add.component.html'\r\n})\r\nexport class IpAsyncAddValidatorComponent implements OnInit {\r\n    userFormGroup: FormGroup\r\n\r\n\tconstructor(\r\n        private formBuilder: FormBuilder )\r\n\t{ }\r\n\r\n    ngOnInit() {\r\n        this.userFormGroup = this.formBuilder.group({\r\n            ipV4:['', RxwebValidators.ipAsync({validatorConfig:of({version:1 })})], \r\n        });\r\n    }\r\n}\r\n","html":"<div>\r\n  <form  [formGroup]=\"userFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label>IP V4</label>\r\n      <input type=\"text\" formControlName=\"ipV4\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">This validation is applied when input value is not IP V4 Type<br/></small>\r\n     <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.ipV4.errors\">{{userFormGroup.controls.ipV4.errors?.ip?.message}}<br/></small>\t\r\n    </div>\r\n    <button [disabled]=\"!userFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","model":null,"modelName":null,"json":{}}}