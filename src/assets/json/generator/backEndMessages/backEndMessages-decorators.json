{
    "add": {
        "notes": [],
        "component": "import { Component, OnInit } from '@angular\/core';\r\nimport { FormGroup, FormArray } from \"@angular\/forms\"\r\nimport { RxFormBuilder, RxFormGroup, RxFormControl } from '@rxweb\/reactive-form-validators';\r\n\r\nimport { User, Address } from '.\/user.model';\r\n\r\n@Component({\r\n    selector: 'app-backEndMessages-add',\r\n    templateUrl: '.\/back-end-messages-add.component.html'\r\n})\r\nexport class BackEndMessagesAddComponent implements OnInit {\r\n    userInfoFormGroup: RxFormGroup\r\n\r\n    constructor(\r\n        private formBuilder: RxFormBuilder) { }\r\n\r\n    ngOnInit() {\r\n        let user = new User();\r\n        user.address = new Address();\r\n        this.userInfoFormGroup = <RxFormGroup>this.formBuilder.formGroup(User, { firstName: '', address: { areaName: '' } });\r\n    }\r\n\r\n    setEndErrors() {\r\n\r\n        this.userInfoFormGroup.setBackEndErrors(\r\n            {\r\n                address: { areaName: { 'required': 'Invalid City' } },\r\n                firstName: { 'required': 'The entered value is Invalid' }\r\n            });\r\n    }\r\n\r\n\r\n    clearBackEndErrors() {\r\n        this.userInfoFormGroup.clearBackEndErrors();\r\n    }\r\n\r\n}\r\n",
        "html": "<div>\r\n    <form [formGroup]=\"userInfoFormGroup\">\r\n\r\n        <div class=\"form-group\">\r\n            <label>FirstName<\/label>\r\n            <input type=\"text\" formControlName=\"firstName\" class=\"form-control\" \/>\r\n            <small class=\"form-text text-danger\"\r\n                *ngIf=\"userInfoFormGroup.controls.firstName.errors\">{{userInfoFormGroup.controls.firstName.errorMessage}}<br \/><\/small>\r\n        <\/div>\r\n\r\n        <div class=\"form-group\" [formGroup]=\"userInfoFormGroup.controls.address\">\r\n            <label>areaName<\/label>\r\n            <input type=\"text\" formControlName=\"areaName\" class=\"form-control\" \/>\r\n            <small class=\"form-text text-danger\"\r\n            *ngIf=\"userInfoFormGroup.get('address')['controls'].areaName.errors\">{{userInfoFormGroup.get('address')['controls'].areaName.errorMessage}}<br \/><\/small>\r\n        <\/div>\r\n        <div class=\"btn btn-group\">\r\n            <button (click)=\"setEndErrors()\" class=\"btn btn-sm btn-primary\">Set Errors<\/button>&nbsp;\r\n            <button (click)=\"clearBackEndErrors()\" class=\"btn btn-sm btn-primary\">Clear Errors<\/button>\r\n        <\/div>\r\n    <\/form>\r\n<\/div>",
        "model": "import { propObject, required } from \"@rxweb\/reactive-form-validators\"\r\n\r\n\r\nexport class Address {\r\n    @required()\r\n    areaName: string;\r\n}\r\n\r\nexport class User {\r\n\r\n    @required()\r\n    firstName: string;\r\n\r\n    @propObject(Address)\r\n    address: Address;\r\n}",
        "modelName": "user.model.ts",
        "json": {}
    },
    "complete": {
        "notes": [],
        "component": "import { Component, OnInit } from '@angular\/core';\r\nimport { RxFormBuilder, RxFormGroup, RxFormControl, RxwebValidators } from '@rxweb\/reactive-form-validators';\r\n\r\nimport { User, Address } from '.\/user.model';\r\n\r\n@Component({\r\n    selector: 'app-backEndMessages-complete',\r\n    templateUrl: '.\/back-end-messages-complete.component.html'\r\n})\r\nexport class BackEndMessagesCompleteComponent implements OnInit {\r\n    userInfoFormGroup: RxFormGroup\r\n    firstNameCount:any=''\r\n    areaNameCount : any = ''\r\n    constructor(\r\n        private formBuilder: RxFormBuilder) { }\r\n\r\n    ngOnInit() {\r\n        let user = new User();\r\n        user.address = new Address();\r\n        this.userInfoFormGroup = <RxFormGroup>this.formBuilder.formGroup(User, { firstName: '', address: { areaName: '' } });\r\n    }\r\n\r\n    setFirstNameBackEndErrors() {\r\n        (<RxFormControl>this.userInfoFormGroup.controls.firstName).setBackEndErrors({ invalidValue: 'The Entered value is Invalid' });\r\n    }\r\n\r\n    setAreaNameBackEndErrors() {\r\n        (<RxFormControl>this.userInfoFormGroup.get('address')['controls'].areaName).setBackEndErrors({ invalidValue: 'The Entered value is Invalid' });\r\n    }\r\n\r\n    clearFirstNameBackEndErrors() {\r\n        (<RxFormControl>this.userInfoFormGroup.controls.firstName).clearBackEndErrors();\r\n    }\r\n\r\n    clearAreaNameBackEndErrors() {\r\n        (<RxFormControl>this.userInfoFormGroup.get('address')['controls'].areaName).clearBackEndErrors();\r\n    }\r\n\r\n    getAreaNameErrors() {\r\n        let validators = (<RxFormControl>this.userInfoFormGroup.get('address')['controls'].areaName).getValidators();\r\n        validators.push(RxwebValidators.alpha());\r\n        this.userInfoFormGroup.get('address')['controls'].areaName.setValidators(validators);\r\n        this.areaNameCount = (<RxFormControl>this.userInfoFormGroup.get('address')['controls'].areaName).getValidators().length;\r\n    }\r\n\r\n    getFirstNamerrors() {\r\n        let validators = (<RxFormControl>this.userInfoFormGroup.controls.firstName).getValidators();\r\n          validators.push(RxwebValidators.alpha());\r\n           this.userInfoFormGroup.controls.firstName.setValidators(validators);\r\n           this.firstNameCount = (<RxFormControl>this.userInfoFormGroup.controls.firstName).getValidators().length;\r\n      }\r\n\r\n}\r\n",
        "html": "<div>\r\n    <form [formGroup]=\"userInfoFormGroup\">\r\n\r\n        <div class=\"form-group\">\r\n            <label>FirstName<\/label>\r\n            <input type=\"text\" formControlName=\"firstName\" class=\"form-control\" \/>\r\n            <small class=\"form-text text-danger\"\r\n                *ngIf=\"userInfoFormGroup.controls.firstName.errors\">{{userInfoFormGroup.controls.firstName.errorMessage}}<br \/><\/small>\r\n                <small> FirstName Validators Count : {{firstNameCount}}<\/small>\r\n        <\/div>\r\n\r\n        <div class=\"form-group\" [formGroup]=\"userInfoFormGroup.controls.address\">\r\n            <label>areaName<\/label>\r\n            <input type=\"text\" formControlName=\"areaName\" class=\"form-control\" \/>\r\n            <small class=\"form-text text-danger\"\r\n                *ngIf=\"userInfoFormGroup.get('address')['controls'].areaName.errors\">{{userInfoFormGroup.get('address')['controls'].areaName.errorMessage}}<br \/><\/small>\r\n                <small> FirstName Validators Count : {{areaNameCount}}<\/small>\r\n        <\/div>\r\n        <div class=\"btn btn-group\">\r\n            <button (click)=\"setFirstNameBackEndErrors()\" class=\"btn btn-sm btn-primary\">Set FirstName\r\n                Error<\/button>&nbsp;\r\n                 <button (click)=\"getFirstNamerrors()\" class=\"btn btn-sm btn-primary\">Get FirstName\r\n                Validators<\/button>&nbsp;\r\n            <button (click)=\"setAreaNameBackEndErrors()\" class=\"btn btn-sm btn-primary\">Set AreaName\r\n                Error<\/button>&nbsp;\r\n            <button (click)=\"clearFirstNameBackEndErrors()\" class=\"btn btn-sm btn-primary\">Clear FirstName\r\n                Errors<\/button>&nbsp;\r\n            <button (click)=\"clearAreaNameBackEndErrors()\" class=\"btn btn-sm btn-primary\">Clear AreaName Errors<\/button>&nbsp;\r\n              <button (click)=\"getAreaNameErrors()\" class=\"btn btn-sm btn-primary\">Get AreaName Validators<\/button>\r\n        <\/div>\r\n    <\/form>\r\n<\/div>",
        "model": "import { propObject, required } from \"@rxweb\/reactive-form-validators\"\r\n\r\n\r\nexport class Address {\r\n    @required()\r\n    areaName: string;\r\n}\r\n\r\nexport class User {\r\n\r\n    @required()\r\n    firstName: string;\r\n\r\n    @propObject(Address)\r\n    address: Address;\r\n}",
        "modelName": "user.model.ts",
        "json": {}
    }
}