{
    "complete": {
        "notes": [],
        "component": "import { Component, OnInit } from '@angular/core';\r\nimport { RxFormGroup,RxFormBuilder ,FormGroupExtension} from '@rxweb/reactive-form-validators';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport {User} from './user.model'\r\n\r\n@Component({\r\n    selector: 'app-reset-complete',\r\n    templateUrl: './reset-complete.component.html'\r\n})\r\nexport class ResetCompleteComponent implements OnInit {\r\n    userFormGroup: RxFormGroup\r\n    \r\n\tconstructor(\r\n        private formBuilder: RxFormBuilder, private http: HttpClient )\r\n\t{ }\r\n\r\n    ngOnInit() {\r\n       let user = new User();       \r\n        this.userFormGroup = <RxFormGroup>this.formBuilder.formGroup(user);     \r\n    }\r\n    \r\n     resetForm(){\r\n        this.userFormGroup.resetForm();\r\n       \r\n      }\r\n}\r\n",
        "html": "<div>\r\n    <form  [formGroup]=\"userFormGroup\">\r\n      <div class=\"form-group\">\r\n        <label>First Name</label>\r\n        <input type=\"text\" formControlName=\"firstName\" class=\"form-control\"  />\r\n      </div>\r\n  \r\n      <div class=\"form-group\">\r\n        <label>Last Name</label>\r\n        <input type=\"text\" formControlName=\"lastName\" class=\"form-control\"  />\r\n      </div>\r\n \r\n      <div class=\"form-group\">\r\n        <label>User Name</label>\r\n        <input type=\"text\" formControlName=\"userName\" class=\"form-control\"  />\r\n      </div>\r\n  \r\n       <div class=\"form-group\">\r\n        <label>Password</label>\r\n        <input type=\"text\" formControlName=\"password\" class=\"form-control\"  />\r\n      </div>\r\n  \r\n      <button [disabled]=\"!userFormGroup.valid\"  class=\"btn btn-primary\">Submit</button>\r\n       <button (click)=\"resetForm()\"  class=\"btn btn-primary\">Reset</button>\r\n    </form>\r\n  </div>\r\n  ",
        "model": "import { prop } from \"@rxweb/reactive-form-validators\"\r\nexport class User {\r\n\r\n    @prop()\r\n    firstName:string;\r\n\r\n     @prop() \r\n     lastName : string;\r\n\r\n     @prop()\r\n     userName: string;\r\n\r\n     @prop()\r\n      password : string;\r\n              \r\n}\r\n",
        "modelName": "user.model.ts",
        "json": {}
    },
    "controlsOnly": {
        "notes": [],
        "component": "import { Component, OnInit } from '@angular/core';\r\nimport { RxFormGroup,RxFormBuilder ,FormGroupExtension,ResetFormType} from '@rxweb/reactive-form-validators';\r\nimport {User} from './user.model'\r\n\r\n\r\n@Component({\r\n    selector: 'app-reset-controlsOnly',\r\n    templateUrl: './reset-controls-only.component.html'\r\n})\r\nexport class ResetControlsOnlyComponent implements OnInit {\r\n    userFormGroup: RxFormGroup\r\n    \r\n\tconstructor(\r\n        private formBuilder: RxFormBuilder )\r\n\t{ }\r\n\r\n    ngOnInit() {\r\n       let user = new User();   \r\n        this.userFormGroup = <RxFormGroup>this.formBuilder.formGroup(user);     \r\n    }\r\n   \r\n    \r\n     resetForm(){\r\n        this.userFormGroup.resetForm({resetType:ResetFormType.ControlsOnly});   \r\n      }\r\n}\r\n",
        "html": "<div>\r\n    <form  [formGroup]=\"userFormGroup\">\r\n     <div class=\"form-group\">\r\n      <label>FirstName</label>\r\n      <input type=\"text\" formControlName=\"firstName\" class=\"form-control\"  />      \r\n    </div>\r\n\r\n      <button [disabled]=\"!userFormGroup.valid\"  class=\"btn btn-primary\">Submit</button>\r\n       <button (click)=\"resetForm()\"  class=\"btn btn-primary\">Reset</button>\r\n    </form>\r\n  </div>\r\n  ",
        "model": "import { prop } from \"@rxweb/reactive-form-validators\"\r\n\r\n\r\nexport class User {\r\n\r\n\t  @prop() \r\n      firstName: string;\r\n      \r\n}\r\n",
        "modelName": "user.model.ts",
        "json": {}
    },
    "formGroupsOnly": {
        "notes": [],
        "component": "import { Component, OnInit } from '@angular/core';\r\nimport { RxFormGroup,RxFormBuilder ,FormGroupExtension,ResetFormType} from '@rxweb/reactive-form-validators';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport {User,Address} from './user.model'\r\n\r\n\r\n@Component({\r\n    selector: 'app-reset-formGroupsOnly',\r\n    templateUrl: './reset-form-groups-only.component.html'\r\n})\r\nexport class ResetFormGroupsOnlyComponent implements OnInit {\r\n    userFormGroup: RxFormGroup\r\n    \r\n\tconstructor(\r\n        private formBuilder: RxFormBuilder, private http: HttpClient )\r\n\t{ }\r\n\r\n    ngOnInit() {\r\n       let user = new User();  \r\n        user.address = new Address(); \r\n        this.userFormGroup = <RxFormGroup>this.formBuilder.formGroup(user);     \r\n    }\r\n   \r\n    \r\n     resetForm(){\r\n        this.userFormGroup.resetForm({resetType:ResetFormType.FormGroupsOnly});   \r\n      }\r\n}\r\n",
        "html": "<div>\r\n    <form  [formGroup]=\"userFormGroup\">\r\n   \r\n       <div class=\"form-group\" [formGroup]=\"userFormGroup.controls.address\">\r\n      <label>areaName</label>\r\n      <input type=\"text\" formControlName=\"areaName\" class=\"form-control\"  />   \r\n    </div>\r\n\r\n      <button [disabled]=\"!userFormGroup.valid\"  class=\"btn btn-primary\">Submit</button>\r\n       <button (click)=\"resetForm()\"  class=\"btn btn-primary\">Reset</button>\r\n    </form>\r\n  </div>\r\n  ",
        "model": "import { prop,propObject } from \"@rxweb/reactive-form-validators\"\r\n\r\nexport class Address {\r\n    @prop()\r\n    areaName: string;\r\n}\r\n\r\nexport class User {\r\n\r\n\t @propObject(Address)\r\n    address: Address;\r\n   \r\n}\r\n",
        "modelName": "user.model.ts",
        "json": {}
    },
    "formArraysOnly": {
        "notes": [],
        "component": "import { Component, OnInit } from '@angular/core';\r\nimport { RxFormGroup,RxFormBuilder ,FormGroupExtension,ResetFormType} from '@rxweb/reactive-form-validators';\r\nimport {User,Hobby} from './user.model'\r\nimport {FormArray} from '@angular/forms';\r\n\r\n@Component({\r\n    selector: 'app-reset-formArraysOnly',\r\n    templateUrl: './reset-form-arrays-only.component.html'\r\n})\r\nexport class ResetFormArraysOnlyComponent implements OnInit {\r\n    userFormGroup: RxFormGroup\r\n    \r\n\tconstructor(\r\n        private formBuilder: RxFormBuilder )\r\n\t{ }\r\n\r\n    ngOnInit() {\r\n       let user = new User();\r\n        let hobby = new Hobby();\r\n\r\n         user.hobbies = new Array<Hobby>();\r\n         user.hobbies.push(hobby);  \r\n        this.userFormGroup = <RxFormGroup>this.formBuilder.formGroup(user);     \r\n    }\r\n      getFormArray(){\r\n      let formarray = this.userFormGroup.controls.hobbies as FormArray;\r\n      return formarray.controls;\r\n    }\r\n    \r\n     resetForm(){\r\n        this.userFormGroup.resetForm({resetType:ResetFormType.FormArraysOnly});   \r\n      }\r\n}\r\n",
        "html": "<div>\r\n    <form  [formGroup]=\"userFormGroup\">\r\n    \r\n \r\n      <div class=\"form-group\" [formGroup]=\"hobbyGroup\" *ngFor=\"let hobbyGroup of getFormArray()\">\r\n      <label>Hobby</label>\r\n      <input type=\"text\" formControlName=\"name\" class=\"form-control\"  />      \r\n    </div>\r\n  \r\n      <button [disabled]=\"!userFormGroup.valid\"  class=\"btn btn-primary\">Submit</button>\r\n       <button (click)=\"resetForm()\"  class=\"btn btn-primary\">Reset</button>\r\n    </form>\r\n  </div>\r\n  ",
        "model": "import { prop,propObject,propArray } from \"@rxweb/reactive-form-validators\"\r\n\r\n\r\nexport class Hobby {\r\n    @prop()\r\n    name: string;\r\n}\r\nexport class User {\r\n\r\n    @propArray(Hobby)\r\n    hobbies: Hobby[];\r\n}\r\n",
        "modelName": "user.model.ts",
        "json": {}
    },
    "controlsAndFormgroupsOnly": {
        "notes": [],
        "component": "import { Component, OnInit } from '@angular/core';\r\nimport { RxFormGroup,RxFormBuilder ,FormGroupExtension,ResetFormType} from '@rxweb/reactive-form-validators';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport {User,Address} from './user.model'\r\n\r\n\r\n@Component({\r\n    selector: 'app-reset-controlsAndFormgroupsOnly',\r\n    templateUrl: './reset-controls-and-formgroups-only.component.html'\r\n})\r\nexport class ResetControlsAndFormgroupsOnlyComponent implements OnInit {\r\n    userFormGroup: RxFormGroup\r\n    \r\n\tconstructor(\r\n        private formBuilder: RxFormBuilder, private http: HttpClient )\r\n\t{ }\r\n\r\n    ngOnInit() {\r\n       let user = new User();  \r\n        user.address = new Address(); \r\n        this.userFormGroup = <RxFormGroup>this.formBuilder.formGroup(user);     \r\n    }\r\n   \r\n    \r\n     resetForm(){\r\n        this.userFormGroup.resetForm({resetType:ResetFormType.ControlsAndFormGroupsOnly});   \r\n      }\r\n}\r\n",
        "html": "<div>\r\n    <form  [formGroup]=\"userFormGroup\">\r\n     <div class=\"form-group\">\r\n      <label>FirstName</label>\r\n      <input type=\"text\" formControlName=\"firstName\" class=\"form-control\"  />   \r\n    </div>\r\n\r\n       <div class=\"form-group\" [formGroup]=\"userFormGroup.controls.address\">\r\n      <label>areaName</label>\r\n      <input type=\"text\" formControlName=\"areaName\" class=\"form-control\"  />   \r\n    </div>\r\n\r\n      <button [disabled]=\"!userFormGroup.valid\"  class=\"btn btn-primary\">Submit</button>\r\n       <button (click)=\"resetForm()\"  class=\"btn btn-primary\">Reset</button>\r\n    </form>\r\n  </div>\r\n  ",
        "model": "import { prop,propObject } from \"@rxweb/reactive-form-validators\"\r\n\r\nexport class Address {\r\n    @prop()\r\n    areaName: string;\r\n}\r\n\r\nexport class User {\r\n\r\n    @prop()\r\n    firstName:string;\r\n\r\n\t @propObject(Address)\r\n    address: Address;\r\n   \r\n}\r\n",
        "modelName": "user.model.ts",
        "json": {}
    },
    "all":{
        "notes": [],
        "component": "import { Component, OnInit } from '@angular/core';\r\nimport { RxFormGroup,RxFormBuilder ,FormGroupExtension,ResetFormType} from '@rxweb/reactive-form-validators';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport {User,Address,Hobby} from './user.model'\r\nimport {FormArray} from '@angular/forms';\r\n\r\n@Component({\r\n    selector: 'app-reset-all',\r\n    templateUrl: './reset-all.component.html'\r\n})\r\nexport class ResetAllComponent implements OnInit {\r\n    userFormGroup: RxFormGroup\r\n    \r\n\tconstructor(\r\n        private formBuilder: RxFormBuilder, private http: HttpClient )\r\n\t{ }\r\n\r\n    ngOnInit() {\r\n       let user = new User();  \r\n        user.address = new Address(); \r\n          let hobby = new Hobby();\r\n            user.hobbies = new Array<Hobby>();\r\n         user.hobbies.push(hobby);\r\n        this.userFormGroup = <RxFormGroup>this.formBuilder.formGroup(user);     \r\n    }\r\n   \r\n       getFormArray(){\r\n      let formarray = this.userFormGroup.controls.hobbies as FormArray;\r\n      return formarray.controls;\r\n    }\r\n     resetForm(){\r\n        this.userFormGroup.resetForm({resetType:ResetFormType.All});   \r\n      }\r\n}\r\n",
        "html": "<div>\r\n    <form  [formGroup]=\"userFormGroup\">\r\n     <div class=\"form-group\">\r\n      <label>FirstName</label>\r\n      <input type=\"text\" formControlName=\"firstName\" class=\"form-control\"  />   \r\n    </div>\r\n\r\n       <div class=\"form-group\" [formGroup]=\"userFormGroup.controls.address\">\r\n      <label>areaName</label>\r\n      <input type=\"text\" formControlName=\"areaName\" class=\"form-control\"  />   \r\n    </div>\r\n  <div class=\"form-group\" [formGroup]=\"hobbyGroup\" *ngFor=\"let hobbyGroup of getFormArray()\">\r\n      <label>Name</label>\r\n      <input type=\"text\" formControlName=\"name\" class=\"form-control\"  />      \r\n    </div>\r\n      <button [disabled]=\"!userFormGroup.valid\"  class=\"btn btn-primary\">Submit</button>\r\n       <button (click)=\"resetForm()\"  class=\"btn btn-primary\">Reset</button>\r\n    </form>\r\n  </div>\r\n  ",
        "model": "import { prop,propObject,propArray } from \"@rxweb/reactive-form-validators\"\r\n\r\nexport class Address {\r\n    @prop()\r\n    areaName: string;\r\n}\r\nexport class Hobby {\r\n    @prop()\r\n    name: string;\r\n}\r\nexport class User {\r\n\r\n    @prop()\r\n    firstName:string;\r\n\r\n\t @propObject(Address)\r\n    address: Address;\r\n\r\n      @propArray(Hobby)\r\n    hobbies: Hobby[];\r\n   \r\n}\r\n",
        "modelName": "user.model.ts",
        "json": {}
    },
    "with": {
        "notes": [],
        "component": "import { Component, OnInit } from '@angular/core';\r\nimport { RxFormGroup,RxFormBuilder ,FormGroupExtension,ResetFormType} from '@rxweb/reactive-form-validators';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport {User,Address} from './user.model'\r\n\r\n\r\n@Component({\r\n    selector: 'app-reset-with',\r\n    templateUrl: './reset-with.component.html'\r\n})\r\nexport class ResetWithComponent implements OnInit {\r\n    userFormGroup: RxFormGroup\r\n    \r\n\tconstructor(\r\n        private formBuilder: RxFormBuilder, private http: HttpClient )\r\n\t{ }\r\n\r\n    ngOnInit() {\r\n       let user = new User();  \r\n        user.address = new Address(); \r\n        this.userFormGroup = <RxFormGroup>this.formBuilder.formGroup(user);     \r\n    }\r\n   \r\n    \r\n     resetForm(){\r\n        this.userFormGroup.resetForm({ with: [\"firstName\",\"address.areaName\"] });   \r\n      }\r\n}\r\n",
        "html": "<div>\r\n    <form  [formGroup]=\"userFormGroup\">\r\n     <div class=\"form-group\">\r\n      <label>FirstName</label>\r\n      <input type=\"text\" formControlName=\"firstName\" class=\"form-control\"  />   \r\n    </div>\r\n\r\n       <div class=\"form-group\" [formGroup]=\"userFormGroup.controls.address\">\r\n      <label>areaName</label>\r\n      <input type=\"text\" formControlName=\"areaName\" class=\"form-control\"  />   \r\n    </div>\r\n\r\n      <button [disabled]=\"!userFormGroup.valid\"  class=\"btn btn-primary\">Submit</button>\r\n       <button (click)=\"resetForm()\"  class=\"btn btn-primary\">Reset</button>\r\n    </form>\r\n  </div>\r\n  ",
        "model": "import { prop,propObject } from \"@rxweb/reactive-form-validators\"\r\n\r\nexport class Address {\r\n    @prop()\r\n    areaName: string;\r\n}\r\n\r\nexport class User {\r\n\r\n    @prop()\r\n    firstName:string;\r\n\r\n\t @propObject(Address)\r\n    address: Address;\r\n   \r\n}\r\n",
        "modelName": "user.model.ts",
        "json": {}
    },
      "value": {
        "notes": [],
        "component": "import { Component, OnInit } from '@angular/core';\r\nimport { RxFormGroup,RxFormBuilder ,FormGroupExtension,ResetFormType} from '@rxweb/reactive-form-validators';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport {User,Address} from './user.model'\r\n\r\n\r\n@Component({\r\n    selector: 'app-reset-value',\r\n    templateUrl: './reset-value.component.html'\r\n})\r\nexport class ResetValueComponent implements OnInit {\r\n    userFormGroup: RxFormGroup\r\n    \r\n\tconstructor(\r\n        private formBuilder: RxFormBuilder, private http: HttpClient )\r\n\t{ }\r\n\r\n    ngOnInit() {\r\n       let user = new User();  \r\n        user.address = new Address(); \r\n        this.userFormGroup = <RxFormGroup>this.formBuilder.formGroup(user);     \r\n    }\r\n   \r\n    \r\n     resetForm(){\r\n        this.userFormGroup.resetForm({ with: [\"firstName\",\"address.areaName\"] });   \r\n      }\r\n}\r\n",
        "html": "<div>\r\n    <form  [formGroup]=\"userFormGroup\">\r\n   \r\n       <div class=\"form-group\" [formGroup]=\"userFormGroup.controls.address\">\r\n      <label>areaName</label>\r\n      <input type=\"text\" formControlName=\"areaName\" class=\"form-control\"  />   \r\n    </div>\r\n\r\n      <button [disabled]=\"!userFormGroup.valid\"  class=\"btn btn-primary\">Submit</button>\r\n       <button (click)=\"resetForm()\"  class=\"btn btn-primary\">Reset</button>\r\n    </form>\r\n  </div>\r\n  ",
        "model": "import { prop,propObject } from \"@rxweb/reactive-form-validators\"\r\n\r\nexport class Address {\r\n    @prop()\r\n    areaName: string;\r\n}\r\n\r\nexport class User {\r\n\r\n\t @propObject(Address)\r\n    address: Address;\r\n   \r\n}",
        "modelName": "user.model.ts",
        "json": {}
    },
    "definedPropsOnly": {
        "notes": [],
        "component": "import { Component, OnInit } from '@angular/core';\r\nimport { RxFormGroup,RxFormBuilder ,FormGroupExtension,ResetFormType} from '@rxweb/reactive-form-validators';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport {User} from './user.model'\r\n\r\n@Component({\r\n    selector: 'app-reset-definedPropsOnly',\r\n    templateUrl: './reset-defined-props-only.component.html'\r\n})\r\nexport class ResetDefinedPropsOnlyComponent implements OnInit {\r\n    userFormGroup: RxFormGroup\r\n    \r\n\tconstructor(\r\n        private formBuilder: RxFormBuilder, private http: HttpClient )\r\n\t{ }\r\n\r\n    ngOnInit() {\r\n       let user = new User(); \r\n        this.userFormGroup = <RxFormGroup>this.formBuilder.formGroup(user);     \r\n    }\r\n   \r\n      \r\n     resetForm(){\r\n        this.userFormGroup.resetForm({resetType:ResetFormType.DefinedPropsOnly,value:{ firstName: 'John' }});   \r\n      }\r\n}\r\n",
        "html": "<div>\r\n    <form  [formGroup]=\"userFormGroup\">\r\n     <div class=\"form-group\">\r\n      <label>FirstName</label>\r\n      <input type=\"text\" formControlName=\"firstName\" class=\"form-control\"  />   \r\n    </div>\r\n\r\n\r\n      <button [disabled]=\"!userFormGroup.valid\"  class=\"btn btn-primary\">Submit</button>\r\n       <button (click)=\"resetForm()\"  class=\"btn btn-primary\">Reset</button>\r\n    </form>\r\n  </div>\r\n  ",
        "model": "import { prop } from \"@rxweb/reactive-form-validators\"\r\n\r\nexport class User {\r\n\r\n    @prop()\r\n    firstName:string;\r\n  \r\n}\r\n",
        "modelName": "user.model.ts",
        "json": {}
    }
}