{
    "router":{
        "component":"import { Injectable } from '@angular\/core';\r\nimport { IAuthorize, AuthorizeConfig } from '@rxweb\/angular-router';\r\nimport { Router, ActivatedRouteSnapshot } from '@angular\/router';\r\nimport { RxHttp } from '@rxweb\/http';\r\n\r\nexport var dbAccessModule: any;\r\n\r\n@Injectable({\r\n    providedIn: 'root',\r\n})\r\nexport class AuthorizationResolver implements IAuthorize {\r\n\r\n    constructor(private http: RxHttp, private router: Router) { }\r\n\r\n    \/\/ For retrieving the access of the application module to user for the parent module \r\n    authorize(authorizeConfig: AuthorizeConfig, route: ActivatedRouteSnapshot): Promise<boolean> | boolean {\r\n\r\n        var promise = new Promise<boolean>((resolve, reject) => {\r\n\r\n            if (dbAccessModule == undefined || dbAccessModule == null) {\r\n                this.http.get<string>({ path: \"api\/Authorize\/access\", }).subscribe(response => {\r\n                    dbAccessModule = JSON.parse(response);\r\n                    \/\/resolve(dbAccessModule);\r\n                    let isAccess = this.verifyAuthorization(authorizeConfig);\r\n                    resolve(isAccess);\r\n                    if (!isAccess)\r\n                        this.router.navigate([\"\/dashboard\"])\r\n                })\r\n            }\r\n            else {\r\n                let isAccess = this.verifyAuthorization(authorizeConfig);\r\n                resolve(isAccess);\r\n                if (!isAccess)\r\n                    this.router.navigate([\"\/dashboard\"])\r\n            }\r\n\r\n        })\r\n        return promise;\r\n    }\r\n\r\n    \/\/ To check the access level based upon the application module and the action type\r\n    verifyAuthorization(authorizeConfig: AuthorizeConfig): boolean {\r\n        return dbAccessModule[authorizeConfig.accessLevel][authorizeConfig.action]\r\n    }\r\n\r\n    \/\/ For retrieving the access of the application module to user for the child module\r\n    authorizeChildren(authorizeConfig: AuthorizeConfig, pageAuthorizeConfig: AuthorizeConfig) {\r\n        if (dbAccessModule == undefined || dbAccessModule == null) {\r\n            var promise = new Promise<boolean>((resolve, reject) => {\r\n            this.http.get<string>({ path: \"api\/Authorize\/access\" }).subscribe(response => {\r\n                dbAccessModule = JSON.parse(response);\r\n                var result = this.verifyAuthorization(authorizeConfig);\r\n                resolve(result);\r\n\r\n            })\r\n        })\r\n        return promise;\r\n        }\r\n        else {\r\n            return this.verifyAuthorization(authorizeConfig);\r\n\r\n        }\r\n\r\n    }\r\n}\r\n"
    },
    "anonymous":{
          "component":"import { Component, OnInit } from '@angular\/core';\r\nimport { anonymous } from '@rxweb\/angular-router'\r\n\r\n@anonymous()\r\n@Component({\r\n    selector: 'app-login',\r\n    templateUrl: '.\/login.component.html',\r\n    styleUrls: ['.\/login.component.css']\r\n})\r\n\r\nexport class LoginComponent implements OnInit {\r\n\r\n    ngOnInit(){\r\n\r\n    }\r\n}"
    },
    "complete":{
        "component":"import { Component, OnInit } from \"@angular\/core\"\r\nimport { access } from '@rxweb\/angular-router';\r\n\r\n@access({ accessLevel: 57, action: \"post\" })\r\n@Component({\r\n    selector: \"app-event-add\",\r\n    templateUrl: '.\/event-add.component.html'\r\n})\r\nexport class EventAddComponent implements OnInit {\r\n\r\n    ngOnInit(){\r\n\r\n    }\r\n}",
        "model":"import { ModuleWithProviders } from '@angular\/core';\r\nimport { Routes, RouterModule } from '@angular\/router';\r\nimport { EventAddComponent } from '.\/add\/event-add.component';\r\n\r\nimport { BaseCanActivate } from \"@rxweb\/angular-router\"\r\nconst ROUTES: Routes = [\r\n    {\r\n        path: 'add',\r\n      component: EventAddComponent, canActivate: [BaseCanActivate]\r\n    }\r\n];\r\n\r\nexport const ROUTING = RouterModule.forChild(ROUTES);"
    }
}