{
    "candidate":{
      
        "controlcomponent":"import { Component, OnInit } from \"@angular\/core\";\r\nimport { FormGroup, FormBuilder } from \"@angular\/forms\";\r\nimport { Router } from \"@angular\/router\";\r\nimport { access } from \"@rxweb\/angular-router\";\r\nimport { CandidateAvailabilityAddComponent  } from '..\/add\/candidate-availablility-add.component';\r\n\r\n@Component({\r\n  selector: \"app-candidate-availability-add\",\r\n  templateUrl: \".\/candidate-availabilility-add.component.html\"\r\n})\r\n\r\nexport class CandidateComponent implements OnInit {\r\n  candidateAvailabilityAdd: any = CandidateAvailabilityAddComponent;\r\n  constructor() {}\r\n\r\n  ngOnInit() {\r\n   \r\n  }\r\n \r\n}",
        "html":"<a *rxAuthorize=\"candidateAvailabilityAdd\" (click)=\"addCandidateAvailability \" ><i class=\"fa fa-plus ml-2\"><\/i><\/a>",
        "routing":"import { ModuleWithProviders } from '@angular\/core';\r\nimport { Routes, RouterModule } from '@angular\/router';\r\n\r\nimport { CandidateComponent } from '.\/candidate.component';\r\nimport { BaseCanActivate } from '@rxweb\/angular-router';\r\n\r\nconst ROUTES: Routes = [\r\n    {\r\n        path: '',\r\n        component: CandidateComponent, canActivate: [BaseCanActivate] \r\n    }\r\n];\r\n\r\nexport const ROUTING = RouterModule.forChild(ROUTES);",
        "json":"{\r\n  \"1\": {\r\n    \"get\": true,\r\n    \"post\": true,\r\n    \"put\": true,\r\n    \"patch\": true,\r\n    \"delete\": true\r\n  }\r\n}",
        "sharedcomponent":"authorizeChildren(\r\n    authorizeConfig: AuthorizeConfig,\r\n    pageAuthorizeConfig: AuthorizeConfig\r\n  ) {\r\n    if (dbAccessModule === undefined || dbAccessModule == null) {\r\n      const promise = new Promise<boolean>((resolve, reject) => {\r\n      \/\/ The custom code to retrieve the user access object from the server \r\n        this.http\r\n          .get(\"assets\/user-access\/user-access.json\")\r\n          .subscribe(response => {\r\n            dbAccessModule = response;\r\n            const result = this.verifyAuthorization(authorizeConfig);\r\n            resolve(result);\r\n          });\r\n      });\r\n      return promise;\r\n    } else {\r\n      return this.verifyAuthorization(authorizeConfig);\r\n    }\r\n  }",
        "model":"import { BrowserModule } from '@angular\/platform-browser';\r\nimport { NgModule } from '@angular\/core';\r\nimport { routerModule, RxRoutingModule } from '@rxweb\/angular-router'\r\nimport { AppRoutingModule } from '.\/app-routing.module';\r\nimport { AppComponent } from '.\/app.component';\r\nimport { LoginComponent } from '.\/login\/login.component';\r\nimport { DashboardComponent } from '.\/dashboard\/dashboard.component';\r\nimport { RxWebModule } from '.\/rxweb.module';\r\n\r\nimport { AuthorizationResolver } from \".\/security\/authorization-resolver\";\r\n\r\n@routerModule({\r\n  authorization:AuthorizationResolver\r\n})\r\n@NgModule({\r\n  declarations: [\r\n    AppComponent,\r\n    LoginComponent,\r\n    DashboardComponent\r\n  ],\r\n  imports: [\r\n    RxRoutingModule,\r\n    RxWebModule,\r\n    BrowserModule,\r\n    AppRoutingModule\r\n  ],\r\n  providers: [],\r\n  bootstrap: [AppComponent]\r\n})\r\nexport class AppModule { }\r\n",
        "component":"import { Component, OnInit } from \"@angular\/core\";\r\nimport { FormGroup, FormBuilder } from \"@angular\/forms\";\r\nimport { Router } from \"@angular\/router\";\r\nimport { access } from \"@rxweb\/angular-router\";\r\n\r\n@Component({\r\n  selector: \"app-candidate\",\r\n  templateUrl: \".\/candidate.component.html\"\r\n})\r\n@access({accessLevel:1,action:'get'})\r\nexport class CandidateComponent implements OnInit {\r\n\r\n  constructor() {}\r\n\r\n  ngOnInit() {\r\n   \r\n  }\r\n \r\n}"
    },
    "router":{
        "candidatelisthtml":"<app-candidate-add *rxAuthorize=[candidateAdd]><\/app-candidate-add>",
        "candidateaddcomponent":"import { Component, OnInit } from \"@angular\/core\";\r\nimport { access, CoreComponent } from \"@rxweb\/angular-router\";\r\nimport { FormBuilder, FormGroup } from \"@angular\/forms\";\r\nimport { RxFormBuilder } from \"@rxweb\/reactive-form-validators\"\r\n\r\n@Component({\r\n  selector: \"app-candidate-add\",\r\n  templateUrl: \".\/candidate-add.component.html\"\r\n})\r\n@access({ accessLevel: 2, action: \"post\" })\r\nexport class CandidateAddComponent extends CoreComponent implements OnInit {\r\n  candidateFormGroup: FormGroup;\r\n  constructor(private formBuilder: RxFormBuilder) {\r\n    super();\r\n  }\r\n\r\n  ngOnInit() {\r\n    let candidate = new Candidate();\r\n    this.candidateFormGroup = this.formBuilder.formGroup(candidate);\r\n  }\r\n}\r\n",
        "candidatelistrouting":"import { ModuleWithProviders } from '@angular\/core';\r\nimport { Routes, RouterModule } from '@angular\/router';\r\n\r\nimport { CandidateAddComponent } from '.\/add\/candidate-add.component';\r\nimport { BaseCanActivate } from '@rxweb\/angular-router';\r\n\r\nconst ROUTES: Routes = [\r\n    {\r\n        path: '',\r\n        component: CandidateAddComponent, canActivate: [BaseCanActivate] \r\n    }\r\n];\r\n\r\nexport const ROUTING = RouterModule.forChild(ROUTES);",
        "candidatelistcomponent":"export class CandidateListComponent implements OnInit {\r\n  candidateAdd: any = CandidateAddComponent;\r\n \r\n}",
        "json":"{\r\n  \"1\": {\r\n    \"get\": true,\r\n    \"post\": true,\r\n    \"put\": true,\r\n    \"patch\": true,\r\n    \"delete\": true\r\n  }\r\n}",
        "sharedcomponent":"authorizeChildren(\r\n    authorizeConfig: AuthorizeConfig,\r\n    pageAuthorizeConfig: AuthorizeConfig\r\n  ) {\r\n    if (dbAccessModule === undefined || dbAccessModule == null) {\r\n      const promise = new Promise<boolean>((resolve, reject) => {\r\n      \/\/ The custom code to retrieve the user access object from the server \r\n        this.http\r\n          .get(\"assets\/user-access\/user-access.json\")\r\n          .subscribe(response => {\r\n            dbAccessModule = response;\r\n            const result = this.verifyAuthorization(authorizeConfig);\r\n            resolve(result);\r\n          });\r\n      });\r\n      return promise;\r\n    } else {\r\n      return this.verifyAuthorization(authorizeConfig);\r\n    }\r\n  }",
        "model":"@routerModule({\r\n    authorization:AuthorizationResolver\r\n  })\r\n@NgModule({...})\r\nexport class AppModule { }",
        "component":"import { Injectable } from \"@angular\/core\";\r\nimport { IAuthorize, AuthorizeConfig } from \"@rxweb\/angular-router\";\r\nimport { Router, ActivatedRouteSnapshot } from \"@angular\/router\";\r\nimport { HttpClient } from \"@angular\/common\/http\";\r\n\r\nexport var dbAccessModule: any;\r\n\r\n@Injectable({\r\n  providedIn: \"root\"\r\n})\r\nexport class AuthorizationResolver implements IAuthorize {\r\n  constructor(private http: HttpClient, private router: Router) {}\r\n\r\n  authorize(\r\n    authorizeConfig: AuthorizeConfig,\r\n    route: ActivatedRouteSnapshot\r\n  ): Promise<boolean> | boolean {\r\n    var promise = new Promise<boolean>((resolve, reject) => {\r\n      var t = this;\r\n\r\n      if (dbAccessModule == undefined || dbAccessModule == null) {\r\n        \/\/server side api\r\n        this.http\r\n          .get(\"assets\/user-access\/user-access.json\")\r\n          .subscribe(response => {\r\n            dbAccessModule = response;\r\n            let isAccess = this.verifyAuthorization(authorizeConfig);\r\n            resolve(isAccess);\r\n            if (!isAccess) this.router.navigate([\"\/dashboard\"]);\r\n          });\r\n      } else {\r\n        let isAccess = this.verifyAuthorization(authorizeConfig);\r\n        resolve(isAccess);\r\n        if (!isAccess) this.router.navigate([\"\/dashboard\"]);\r\n      }\r\n    });\r\n    return promise;\r\n  }\r\n\r\n  verifyAuthorization(authorizeConfig: AuthorizeConfig): boolean {\r\n    return dbAccessModule[authorizeConfig.accessLevel][authorizeConfig.action];\r\n  }\r\n}"
    },
    "anonymous":{
          "component":"import { Component, OnInit } from \"@angular\/core\";\r\nimport { FormGroup, FormBuilder } from \"@angular\/forms\";\r\nimport { Router } from \"@angular\/router\";\r\nimport { anonymous } from \"@rxweb\/angular-router\";\r\n\r\n@Component({\r\n  selector: \"app-login\",\r\n  templateUrl: \".\/login.component.html\"\r\n})\r\n@anonymous()\r\nexport class LoginComponent implements OnInit {\r\n  userFormGroup: FormGroup;\r\n\r\n  constructor(private formBuilder: FormBuilder, private router: Router) {}\r\n\r\n  ngOnInit() {\r\n    this.userFormGroup = this.formBuilder.group({\r\n      userName: [\"\"],\r\n      password: [\"\"]\r\n    });\r\n  }\r\n  submit() {\r\n    \/\/ Custom Business Logic to call the api and verify the user\r\n    this.router.navigate([\"\/dashboard\"], { replaceUrl: true });\r\n  }\r\n}    "
    },
    "complete":{
        "component":"import { Component, OnInit } from \"@angular\/core\";\r\nimport { access, CoreComponent } from \"@rxweb\/angular-router\";\r\n\r\n@Component({\r\n  selector: \"app-dashboard\",\r\n  templateUrl: \".\/dashboard.component.html\"\r\n})\r\n@access({ accessLevel: 1, action: \"get\" })\r\nexport class DashboardComponent extends CoreComponent implements OnInit {\r\n  constructor() {\r\n    super();\r\n  }\r\n\r\n  ngOnInit() {}\r\n}\r\n",
        "model":"import { ModuleWithProviders } from \"@angular\/core\";\r\nimport { Routes, RouterModule } from \"@angular\/router\";\r\nimport { DashboardComponent } from \".\/dashboard.component\";\r\nimport { LoginComponent } from \".\/login.component\";\r\nimport { BaseCanActivate } from \"@rxweb\/angular-router\";\r\n\r\nconst ROUTES: Routes = [\r\n  {\r\n    path: \"\",\r\n    redirectTo: \"login\",\r\n    pathMatch: \"full\"\r\n  },\r\n  {\r\n    path: \"login\",\r\n    component: LoginComponent,\r\n    canActivate: [BaseCanActivate]\r\n  },\r\n  {\r\n    path: \"dashboard\",\r\n    component: DashboardComponent,\r\n    canActivate: [BaseCanActivate]\r\n  }\r\n];\r\n\r\nexport const ROUTING = RouterModule.forRoot(ROUTES);"
    }
}