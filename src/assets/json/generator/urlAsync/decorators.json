{"rightSidebarLinks":[{"id":"urlasync","title":"urlAsync","subLink":null},{"id":"whentouse","title":"When to use","subLink":[]},{"id":"basicurlasyncvalidation","title":"Basic urlAsync Validation","subLink":[]},{"id":"validatorconfig","title":"ValidatorConfig","subLink":[{"title":"urlAsyncValidationType","id":"urlasyncvalidationtype","thirdLevelLink":[]},{"title":"message","id":"message","thirdLevelLink":[]},{"title":"messageKey","id":"messagekey","thirdLevelLink":[]}]},{"id":"completeurlasyncexample","title":"Complete urlAsync Example","subLink":[]}],"title":"urlAsync","description":"urlAsync validation  decorators  will check that value entered in the property is in the correct url format or not.","validatorType":"decorators","validationTypeTitle":"Decorators","type":"tabs","gitDocPath":"https://github.com/rxweb/rxweb.io/edit/master/docs/angular/reactive-forms/reactive-form-validators/async-validators/urlAsync.md","category":"async-validators","subCategory":"String","linkTitle":"urlAsync","tabArray":{"basic-operations":[{"tabName":"Add","tabGroupContent":null,"content":"<div component=\"app-code\" key=\"urlAsync-add-component\"></div> \r\n<p class='showHideElement' >Next, we need to write html code.</p>\r\n<div component=\"app-code\" key=\"urlAsync-add-html\"></div> \r\n<div component=\"app-example-runner\" ref-component=\"app-urlAsync-add\"></div>\r\n"},{"tabName":"Edit","tabGroupContent":null,"content":"<div component=\"app-code\" key=\"urlAsync-edit-component\"></div>\r\n<p class='showHideElement' >The below code is `web-site-info-model-data.json` for getting data from the server </p>\r\n<div component=\"app-code\" key=\"urlAsync-edit-json\"></div> \r\n<p class='showHideElement' >Next, we need to write html code.</p>\r\n<div component=\"app-code\" key=\"urlAsync-edit-html\"></div> \r\n<div component=\"app-example-runner\" ref-component=\"app-urlAsync-edit\"></div>\r\n"}],"complete":[{"tabName":"Example","tabGroupContent":null,"content":"<div component=\"app-example-runner\" ref-component=\"app-urlAsync-complete\"></div>\r\n"},{"tabName":"Model","tabGroupContent":null,"content":"<div component=\"app-code\" key=\"urlAsync-complete-model\"></div> \r\n"},{"tabName":"Component","tabGroupContent":null,"content":"<div component=\"app-code\" key=\"urlAsync-complete-component\"></div> \r\n"},{"tabName":"Html","tabGroupContent":null,"content":"<div component=\"app-code\" key=\"urlAsync-complete-html\"></div> \r\n"}]},"innerHtml":null,"htmlContent":"<div class=\"title-bar top_title\"><p>urlAsync</p></div> <div class=\"title-bar\"><p>urlAsync validation  decorator  will check that value entered in the property is in the correct url format or not asynchronously.</p></div>\r\n<div class='row page-section' id= 'whentouse'>\r\n<div class='col-lg-12'>\r\n<h2 class='showHideElement' >When to use<a title='Link to this heading' class='link-header'  href='/async-validators/urlAsync/decorators#whentouse'><i class='fa fa-link'></i></a></h2>\r\n\r\n<p class='showHideElement' >Suppose you want to create a website-info form, which contains fields like AdminWebsiteurlAsync, CustomerWebsiteurlAsync, MaintenanceWebsiteurlAsync and you want the user to enter valid urlAsync asynchronously. Here depending upon the requirement these scenarios may arise.</p>\r\n<ol class='showHideElement'>\r\n   <li>Adding AdminWebsiteurlAsync without any conditional expression.</li>\r\n   <li>Adding Custom Message on MaintenanceWebsiteurlAsync Field.</li>\r\n   <li>Shows the custom message on <span class='highlighted'>Deployed Website urlAsync</span> field by using <span class='highlighted'>messageKey</span> property.</li>\r\n   <data-scope scope=\"['decorator','validator']\">\r\n   <li>Apply urlAsync validation dynamically based on server rules.</li>\r\n   </data-scope>\r\n</ol>\r\n<p class='showHideElement' >Letâ€™s see how urlAsync decorator fulfil the need.</p>\r\n</div></div>\r\n<div class='row page-section' id= 'basicurlasyncvalidation'>\r\n<div class='col-lg-12'>\r\n<h2>Basic urlAsync Validation<a title='Link to this heading' class='link-header'  href='/async-validators/urlAsync/decorators#basicurlasyncvalidation'><i class='fa fa-link'></i></a></h2>\r\n\r\n<p class='showHideElement' >First we need to create a User class and define a property of AdminWebsiteurlAsync in the model to achieve the functional need of point 1.</p>\r\n<div component=\"app-code\" key=\"urlAsync-add-model\"></div> \r\n<p class='showHideElement' >Through Angular FormBuilder service we create FormGroup in the component.</p>\r\n<p class='showHideElement' >Here we have covered Add and Edit form operations. </p>\r\n<div component=\"app-tabs\" key=\"basic-operations\"></div>\r\n</div></div>\r\n<div class='row page-section' id= 'validatorconfig'>\r\n<div class='col-lg-12'>\r\n<h2>ValidatorConfig<a title='Link to this heading' class='link-header'  href='/async-validators/urlAsync/decorators#validatorconfig'><i class='fa fa-link'></i></a></h2>\r\n\r\n<p class='showHideElement' >Type : <span class='highlighted'>Observable</span></p>\r\n<p class='showHideElement' >validator config is used to dynamically resolve the value of the property according to the server rules by using the keyword <span class='highlighted'>of</span> as below </p>\r\n<p class='showHideElement' >Below options are not mandatory to use in the <span class='highlighted'>@urlAsync({validatorConfig:of({&ltproperty_name&gt:&ltvalue&gt})})</span> decorator. If needed then use the below options.</p>\r\n<table class=\"table table-bordered table-striped showHideElement\">\r\n<tr><th>Option</th><th>Description</th></tr>\r\n<tr><td><a  (click)='scrollTo(\"#urlAsyncValidationType\")'  title=\"urlAsyncValidationType\">urlAsyncValidationType</a></td><td>To validate a urlAsync which is not containing a suffix by configuring urlAsyncValidationType which can be <span class='highlighted'>FQDN</span>,<span class='highlighted'>LocalHost</span>,<span class='highlighted'>IntranetServer</span></td></tr>\r\n<tr><td><a  (click)='scrollTo(\"#message\")'  title=\"message\">message</a></td><td>To override the global configuration message and set the custom error message on respective FormControl</td></tr>\r\n<tr><td><a (click)='scrollTo(\"#messageKey\")' title=\"messageKey\">messageKey</a></td><td>messageKey property of BaseConfig can be used when the user wants to show a different custom validation message on some of their fields. User can define a custom messageKey globally by defining it in ReactiveFormConfig and set it in the message property of the validation.</td></tr>\r\n</table>\r\n</div></div>\r\n<div class='row page-section' id= 'urlasyncvalidationtype'>\r\n<div class='col-lg-12'>\r\n<h2>urlAsyncValidationType<a title='Link to this heading' class='link-header'  href='/async-validators/urlAsync/decorators#urlasyncvalidationtype'><i class='fa fa-link'></i></a></h2>\r\n\r\n<p class='showHideElement' >Type : number </p>\r\n<p class='showHideElement' >urlAsyncValidationType is used to validate urlAsync in which the hostname does not contain a suffix which is generally used while working with local servers. It can be configured as </p>\r\n<p class='showHideElement' ><span class='highlighted'>FQDN</span>,<span class='highlighted'>LocalHost</span>,<span class='highlighted'>IntranetServer</span>.</p>\r\n<p class='showHideElement' >1) urlAsyncValidationType:1 </p>\r\n<p class='showHideElement' >A fully qualified domain name (FQDN), sometimes also referred to as an absolute domain name that specifies its exact location in the tree hierarchy of the Domain Name System (DNS)</p>\r\n<p class='showHideElement' >2) urlAsyncValidationType:2</p>\r\n<p class='showHideElement' >It will validate urlAsync having <span class='highlighted'>localhost</span> as host name.</p>\r\n<p class='showHideElement' >3) urlAsyncValidationType:3</p>\r\n<p class='showHideElement' >The Intranet server lies inside the firewall and serves clients on the local network.</p>\r\n<p class='showHideElement' >For example, if you want to validate localhost in urlAsync validator set <span class='highlighted'>urlAsyncValidationType</span> as: </p>\r\n<div component=\"app-code\" key=\"urlAsync-urlAsyncValidationTypeExample-model\"></div> \r\n<div component=\"app-example-runner\" ref-component=\"app-urlAsync-urlAsyncValidationType\" title=\"urlAsync decorator with urlAsyncValidationType\" key=\"urlAsyncValidationType\"></div>\r\n</div></div>\r\n<div class='row page-section' id= 'message'>\r\n<div class='col-lg-12'>\r\n<h2>message<a title='Link to this heading' class='link-header'  href='/async-validators/urlAsync/decorators#message'><i class='fa fa-link'></i></a></h2>\r\n\r\n<p class='showHideElement' >Type :  <span class='highlighted'>string</span> </p>\r\n<p class='showHideElement' >To override the global configuration message and set the custom message on respective FormControl.</p>\r\n<div component=\"app-code\" key=\"urlAsync-messageExample-model\"></div> \r\n<div component=\"app-example-runner\" ref-component=\"app-urlAsync-message\" title=\"urlAsync decorator with message\" key=\"message\"></div>\r\n</div></div>\r\n<div class='row page-section' id= 'messagekey'>\r\n<div class='col-lg-12'>\r\n<h2>messageKey<a title='Link to this heading' class='link-header'  href='/async-validators/urlAsync/decorators#messagekey'><i class='fa fa-link'></i></a></h2>\r\n\r\n<p class='showHideElement' >Type : <span class='highlighted'>string</span></p>\r\n<p class='showHideElement' >messageKey property of BaseConfig can be used when the user wants to show a different custom validation message on some of their fields. User can define a custom messageKey globally by defining it in ReactiveFormConfig and set it in the message property of the validation.</p>\r\n<div component=\"app-code\" key=\"urlAsync-messageKeyExample-model\"></div> \r\n<div component=\"app-example-runner\" ref-component=\"app-urlAsync-messageKey\" title=\"urlAsync decorator with messageKey\" key=\"messageKey\"></div>\r\n</div></div>\r\n<div class='row page-section' id= 'completeurlasyncexample'>\r\n<div class='col-lg-12'>\r\n<h2>Complete urlAsync Example<a title='Link to this heading' class='link-header'  href='/async-validators/urlAsync/decorators#completeurlasyncexample'><i class='fa fa-link'></i></a></h2>\r\n\r\n<p class='showHideElement' >This Complete urlAsync example which includes all the DefaultConfig properties will fulfil the requirement of scenarios 1, 2 and 3.</p>\r\n<div component=\"app-tabs\" key=\"complete\"></div>\r\n</div></div>\r\n"}