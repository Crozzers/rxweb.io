{
  "complete": {
    "notes": null,
    "component": "import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from \"@angular/forms\"\r\nimport { RxFormBuilder } from '@rxweb/reactive-form-validators';\r\n\r\nimport { User } from './user.model';\r\n\r\n@Component({\r\n    selector: 'app-compose-complete',\r\n    templateUrl: './compose-complete.component.html'\r\n})\r\nexport class ComposeCompleteComponent implements OnInit {\r\n    userFormGroup: FormGroup\r\n\r\n    constructor(\r\n        private formBuilder: RxFormBuilder    ) { }\r\n\r\n    ngOnInit() {\r\n        let user = new User();\r\n        this.userFormGroup = this.formBuilder.formGroup(user);\r\n    }\r\n}\r\n",
    "html": "<div>\r\n        <form  [formGroup]=\"userFormGroup\">\r\n          <div class=\"form-group\">\r\n            <label>First Name</label>\r\n            <input type=\"text\" formControlName=\"firstName\" class=\"form-control\"  />\r\n            <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Country Code' or 'City' then you need to add this input as 'India'.<br/></small>\r\n           <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.firstName.errors\">{{userFormGroup.controls.firstName.errorMessage}}<br/></small>\t\r\n          </div>\r\n          <div class=\"form-group\">\r\n            <label>Age</label>\r\n            <input type=\"text\" formControlName=\"age\" class=\"form-control\"  />\r\n            <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Age' then you need to add 'First Name' input as 'Bharat'.<br/></small>\r\n            <small class=\"form-text text-muted\">Conditional Expression with type 'function'<br/></small>\r\n           <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.age.errors\">{{userFormGroup.controls.age.errorMessage}}<br/></small>\t\r\n          </div>\r\n          <div class=\"form-group\">\r\n            <label>City</label>\r\n            <input type=\"text\" formControlName=\"city\" class=\"form-control\"  />\r\n            <small class=\"form-text text-muted\">If you want to apply conditional validation on 'City' then you need to add 'First Name' input as 'Bharat'.<br/></small>\r\n            <small class=\"form-text text-muted\">Conditional Expression with type 'string'<br/></small>\r\n           <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.city.errors\">{{userFormGroup.controls.city.errorMessage}}<br/></small>\t\r\n          </div>\r\n          <div class=\"form-group\">\r\n            <label>Country Name</label>\r\n            <input type=\"text\" formControlName=\"countryName\" class=\"form-control\"  />\r\n            <small class=\"form-text text-muted\">This allowed whitespace in compose validation<br/></small>\r\n           <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.countryName.errors\">{{userFormGroup.controls.countryName.errorMessage}}<br/></small>\t\r\n          </div>\r\n          <div class=\"form-group\">\r\n                <label>Country Code</label>\r\n                <input type=\"text\" formControlName=\"countryCode\" class=\"form-control\"  />\r\n                <small class=\"form-text text-muted\">The value should be unique(other than IND)<br/></small>\r\n               <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.countryCode.errors\">{{userFormGroup.controls.countryCode.errorMessage}}<br/></small>\t\r\n              </div>\r\n          <button [disabled]=\"!userFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n        </form>\r\n      </div>\r\n",
    "model": "import {  compose,RxwebValidators } from \"@rxweb/reactive-form-validators\"\r\nimport { AbstractControl } from \"@angular/forms\";\r\n\r\nexport class User {\r\n\r\n\t@compose({validators:[RxwebValidators.required(), RxwebValidators.alpha()] }) \r\n        firstName: string;\r\n\r\n\t//If you want to apply conditional expression of type 'function'\r\n\t@compose({validators:[RxwebValidators.digit()]  ,conditionalExpression:(x,y) => x.firstName == \"Bharat\" }) \r\n\tage: number;\r\n\r\n\t//If you want to apply conditional expression of type 'string'\r\n\t@compose({validators:[RxwebValidators.alpha()]  ,conditionalExpression:'x => x.firstName ==\"Bharat\"' }) \r\n\tcity: string;\r\n\r\n\t@compose({validators:[RxwebValidators.alpha()]  ,message:'You can only enter alphabets.' }) \r\n    countryName: string;\r\n    \r\n    @compose({validators:[uniqueCountryCode()]}) \r\n\tcountryCode: string;\r\n\r\n}\r\nfunction uniqueCountryCode() {\r\n    return (control: AbstractControl) => {\r\n        if (control.value != \"IND\")\r\n            return null;\r\n        else\r\n            return {\r\n                uniqueCountryCode: {message:\"Country Code Should be Unique\"}\r\n            }\r\n    }\r\n}",
    "modelName": "user.model.ts",
    "jsonName": null,
    "json": null
  },
  "validatorsExample": {
    "notes": null,
    "component": null,
    "html": null,
    "model": "@compose({validators:[uniqueCountryName()]})\r\n\tcountryName: string;",
    "modelName": null,
    "jsonName": null,
    "json": null
  },
  "validators": {
    "notes": null,
    "component": "import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from \"@angular/forms\"\r\nimport { RxFormBuilder } from '@rxweb/reactive-form-validators';\r\nimport { Country } from './country.model';\r\n\r\n@Component({\r\n    selector: 'app-compose-validators',\r\n    templateUrl: './compose-validators.component.html'\r\n})\r\nexport class ComposeValidatorsComponent implements OnInit {\r\n    userFormGroup: FormGroup\r\n\r\n    constructor(\r\n        private formBuilder: RxFormBuilder    ) { }\r\n\r\n    ngOnInit() {\r\n        let country = new Country();\r\n        this.userFormGroup = this.formBuilder.formGroup(country);\r\n    }\r\n}\r\n",
    "html": "<div>\r\n  <form [formGroup]=\"userFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label>Country Name</label>\r\n      <input type=\"text\" formControlName=\"countryName\" class=\"form-control\" />\r\n      <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.countryName.errors\">{{userFormGroup.controls.countryName.errorMessage}}<br /></small>\r\n    </div>\r\n    <button [disabled]=\"!userFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>",
    "model": "import {  compose,RxwebValidators } from \"@rxweb/reactive-form-validators\"\r\nimport {AbstractControl} from '@angular/forms';\r\n\r\nexport class Country {\r\n\r\n\t@compose({validators:[uniqueCountryName()]})\r\n\tcountryName: string;\r\n\r\n}\r\nfunction uniqueCountryName() {\r\n  return (control: AbstractControl) => {\r\n        if (control.value != \"India\")\r\n            return null;\r\n        else\r\n            return {\r\n                'uniqueCountry': { message: \"Country Name Should be Unique\" }\r\n            };\r\n    }\r\n}",
    "modelName": "country.model.ts",
    "jsonName": null,
    "json": null
  },
  "conditionalExpressionExampleFunction": {
    "notes": null,
    "component": null,
    "html": null,
    "model": "@compose({validators:[RxwebValidators.digit()]  ,conditionalExpression:(x,y) => x.firstName == \"Bharat\" }) \r\n\tage: number;",
    "modelName": null,
    "jsonName": null,
    "json": null
  },
  "conditionalExpression": {
    "notes": null,
    "component": "import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from \"@angular/forms\"\r\nimport { RxFormBuilder } from '@rxweb/reactive-form-validators';\r\n\r\nimport { User } from './user.model';\r\n\r\n@Component({\r\n    selector: 'app-compose-conditionalExpression',\r\n    templateUrl: './compose-conditional-expression.component.html'\r\n})\r\nexport class ComposeConditionalExpressionComponent implements OnInit {\r\n    userFormGroup: FormGroup\r\n\r\n    constructor(\r\n        private formBuilder: RxFormBuilder) { }\r\n\r\n    ngOnInit() {\r\n        let user = new User();\r\n        this.userFormGroup = this.formBuilder.formGroup(user);\r\n    }\r\n}\r\n",
    "html": "<div>\r\n        <form  [formGroup]=\"userFormGroup\">\r\n          <div class=\"form-group\">\r\n            <label>First Name</label>\r\n            <input type=\"text\" formControlName=\"firstName\" class=\"form-control\"  />\r\n            <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Country Code' or 'City' then you need to add this input as 'India'.<br/></small>\r\n           <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.firstName.errors\">{{userFormGroup.controls.firstName.errorMessage}}<br/></small>\t\r\n          </div>\r\n          <div class=\"form-group\">\r\n            <label>City</label>\r\n            <input type=\"text\" formControlName=\"city\" class=\"form-control\"  />\r\n            <small class=\"form-text text-muted\">If you want to apply conditional validation on 'City' then you need to add 'First Name' input as 'Bharat'.<br/></small>\r\n            <small class=\"form-text text-muted\">Conditional Expression with type 'string'<br/></small>\r\n           <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.city.errors\">{{userFormGroup.controls.city.errorMessage}}<br/></small>\t\r\n          </div>\r\n          <div class=\"form-group\">\r\n            <label>Age</label>\r\n            <input type=\"text\" formControlName=\"age\" class=\"form-control\"  />\r\n            <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Age' then you need to add 'First Name' input as 'Bharat'.<br/></small>\r\n            <small class=\"form-text text-muted\">Conditional Expression with type 'function'<br/></small>\r\n           <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.age.errors\">{{userFormGroup.controls.age.errorMessage}}<br/></small>\t\r\n          </div>\r\n          <button [disabled]=\"!userFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n        </form>\r\n      </div>\r\n",
    "model": "import {  compose, RxwebValidators, } from \"@rxweb/reactive-form-validators\"\r\n\r\nexport class User {\r\n\r\n\t@compose({validators:[RxwebValidators.required(), RxwebValidators.alpha()] }) \r\n\tfirstName: string;\r\n\r\n\t//If you want to apply conditional expression of type 'string'\r\n\t@compose({validators:[RxwebValidators.alpha()]  ,conditionalExpression:'x => x.firstName ==\"Bharat\"' }) \r\n\tcity: string;\r\n\r\n\t//If you want to apply conditional expression of type 'function'\r\n\t@compose({validators:[RxwebValidators.digit()]  ,conditionalExpression:(x,y) => x.firstName == \"Bharat\" }) \r\n\tage: number;\r\n\r\n}",
    "modelName": "user.model.ts",
    "jsonName": null,
    "json": null
  },
  "conditionalExpressionExampleString": {
    "notes": null,
    "component": null,
    "html": null,
    "model": "@compose({validators:[RxwebValidators.alpha()]  ,conditionalExpression:'x => x.firstName ==\"Bharat\"' }) \r\ncity: string;\r\n",
    "modelName": null,
    "jsonName": null,
    "json": null
  },
  "messageExample": {
    "notes": null,
    "component": null,
    "html": null,
    "model": "@compose({validators:[RxwebValidators.alpha()],message:\"CountryName can only contain alphabets\"}) \r\n\tfirstName: string;",
    "modelName": null,
    "jsonName": null,
    "json": null
  },
  "message": {
    "notes": null,
    "component": "import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from \"@angular/forms\"\r\nimport { RxFormBuilder } from '@rxweb/reactive-form-validators';\r\n\r\nimport { User } from './user.model';\r\n\r\n@Component({\r\n    selector: 'app-compose-message',\r\n    templateUrl: './compose-message.component.html'\r\n})\r\nexport class ComposeMessageComponent implements OnInit {\r\n    userFormGroup: FormGroup\r\n\r\n    constructor(\r\n        private formBuilder: RxFormBuilder    ) { }\r\n\r\n    ngOnInit() {\r\n        let user = new User();\r\n        this.userFormGroup = this.formBuilder.formGroup(user);\r\n    }\r\n}\r\n",
    "html": "<div>\r\n  <form [formGroup]=\"userFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label>First Name</label>\r\n      <input type=\"text\" formControlName=\"firstName\" class=\"form-control\" />\r\n      <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.firstName.errors\">{{userFormGroup.controls.firstName.errorMessage}}<br /></small>\r\n    </div>\r\n    <button [disabled]=\"!userFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n",
    "model": "import {  compose,RxwebValidators } from \"@rxweb/reactive-form-validators\"\r\n\r\nexport class User {\r\n\r\n\t@compose({validators:[RxwebValidators.alpha()],message:\"CountryName can only contain alphabets\"}) \r\n\tfirstName: string;\r\n\r\n}",
    "modelName": "user.model.ts",
    "jsonName": null,
    "json": null
  },
  "dynamic": {
    "notes": null,
    "component": "import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from \"@angular/forms\"\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { RxFormBuilder } from '@rxweb/reactive-form-validators';\r\nimport { FormBuilderConfiguration,} from '@rxweb/reactive-form-validators';\r\n\r\nimport { User } from './user.model';\r\n\r\n@Component({\r\n    selector: 'app-compose-dynamic',\r\n    templateUrl: './compose-dynamic.component.html'\r\n})\r\nexport class ComposeDynamicComponent implements OnInit {\r\n    userFormGroup: FormGroup\r\n\r\n    constructor(\r\n        private formBuilder: RxFormBuilder,private http: HttpClient    ) { }\r\n\r\n    ngOnInit() {\r\n        let user = new User();\r\n        let formBuilderConfiguration = new FormBuilderConfiguration();\r\n\t\tthis.http.get('assets/examples/reactive-form-validators/decorators/compose/dynamic/dynamic.json').subscribe(dynamic => {\r\n            formBuilderConfiguration.dynamicValidation = JSON.parse(JSON.stringify(dynamic));\r\n\t\t\tthis.userFormGroup = this.formBuilder.formGroup(user,formBuilderConfiguration);\r\n        })\r\n    }\r\n}\r\n",
    "html": "<div>\r\n  <form  *ngIf=\"userFormGroup\"  [formGroup]=\"userFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label>First Name</label>\r\n      <input type=\"text\" formControlName=\"firstName\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Country Code' or 'City' then you need to add this input as 'India'.<br/></small>\r\n      <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.firstName.errors\">{{userFormGroup.controls.firstName.errors.compose.message}}<br/></small>\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Last Name</label>\r\n      <input type=\"text\" formControlName=\"lastName\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">validation message based on messageKey<br/></small>\r\n      <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.lastName.errors\">{{userFormGroup.controls.lastName.errors.compose.message}}<br/></small>\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>City</label>\r\n      <input type=\"text\" formControlName=\"city\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">If you want to apply conditional validation on 'City' then you need to add 'First Name' input as 'Bharat'.<br/></small>\r\n      <small class=\"form-text text-muted\">Conditional Expression with type 'string'<br/></small>\r\n      <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.city.errors\">{{userFormGroup.controls.city.errors.compose.message}}<br/></small>\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Country Name</label>\r\n      <input type=\"text\" formControlName=\"countryName\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">This allowed whitespace in compose validation<br/></small>\r\n      <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.countryName.errors\">{{userFormGroup.controls.countryName.errors.compose.message}}<br/></small>\r\n    </div>\r\n    <button [disabled]=\"!userFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n",
    "model": "import {  compose,prop, } from \"@rxweb/reactive-form-validators\"\r\n\r\nexport class User {\r\n\r\n\t@prop()\r\n\tfirstName: string;\r\n\r\n\t@prop()\r\n\tlastName: string;\r\n\r\n\t@prop()\r\n\tcity: string;\r\n\r\n\t@prop()\r\n\tcountryName: string;\r\n\r\n}\r\n",
    "modelName": "user.model.ts",
    "jsonName": "dynamic.json",
    "json": "{\"firstName\":{\"compose\":{\"validators\":\"[RxwebValidators.required(), RxwebValidators.alpha()]\"}},\"lastName\":{\"compose\":{\"validators\":\"[RxwebValidators.required(), RxwebValidators.alpha()]\",\"messageKey\":\"composeMessageKey\"}},\"city\":{\"compose\":{\"validators\":\"[RxwebValidators.alpha()]\",\"conditionalExpression\":\"x => x.firstName ==\\\"Bharat\\\"\"}},\"countryName\":{\"compose\":{\"validators\":\"[RxwebValidators.alpha()]\",\"message\":\"You can only enter alphabets.\"}}}"
  },
  "add": {
    "notes": null,
    "component": "import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from \"@angular/forms\"\r\nimport { RxFormBuilder } from '@rxweb/reactive-form-validators';\r\nimport {User} from './user.model';\r\n\r\n@Component({\r\n    selector: 'app-compose-add',\r\n    templateUrl: './compose-add.component.html'\r\n})\r\nexport class ComposeAddComponent implements OnInit {\r\n    userFormGroup: FormGroup\r\n\r\n    constructor(\r\n        private formBuilder: RxFormBuilder    ) { }\r\n\r\n    ngOnInit() {\r\n        let user = new User();\r\n        this.userFormGroup = this.formBuilder.formGroup(user);\r\n    }\r\n}\r\n",
    "html": "<div>\r\n  <form [formGroup]=\"userFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label>First Name</label>\r\n      <input type=\"text\" formControlName=\"firstName\" class=\"form-control\" />\r\n      <small class=\"form-text text-danger\" *ngFor=\"let errorMessage of userFormGroup.controls.firstName.errorMessages\">\r\n        {{errorMessage}}<br />\r\n      </small>\r\n    </div>\r\n    <button [disabled]=\"!userFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n",
    "model": "import {  compose,RxwebValidators } from   \"@rxweb/reactive-form-validators\"   \r\n\r\nexport class User {\r\n\r\n\t@compose({validators:[RxwebValidators.alpha(),RxwebValidators.required()]})\r\n    firstName:string;\r\n\t\r\n}\r\n",
    "modelName": "user.model.ts",
    "jsonName": null,
    "json": null
  },
  "edit": {
    "notes": null,
    "component": "import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from \"@angular/forms\"\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { RxFormBuilder } from '@rxweb/reactive-form-validators';\r\n\r\nimport { User } from './user.model';\r\n\r\n@Component({\r\n    selector: 'app-compose-edit',\r\n    templateUrl: './compose-edit.component.html'\r\n})\r\nexport class ComposeEditComponent implements OnInit {\r\n    userFormGroup: FormGroup\r\n\r\n    constructor(\r\n        private formBuilder: RxFormBuilder,private http: HttpClient    ) { }\r\n\r\n    ngOnInit() {\r\n        this.http.get('assets/examples/reactive-form-validators/decorators/compose/edit/user-data.json').subscribe(user => {\r\n            this.userFormGroup = this.formBuilder.formGroup<User>(User,user);\r\n        })\r\n    }\r\n}\r\n",
    "html": "<div>\r\n  <form  *ngIf=\"userFormGroup\"  [formGroup]=\"userFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label>First Name</label>\r\n      <input type=\"text\" formControlName=\"firstName\" class=\"form-control\"  />\r\n\t <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.firstName.errors\">{{userFormGroup.controls.firstName.errors.compose.message}}<br/></small>\t\r\n    </div>\r\n    <button [disabled]=\"!userFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n",
    "model": "import {  compose, } from \"@rxweb/reactive-form-validators\"\r\n\r\nexport class User {\r\n\r\n\t@compose({validators:[RxwebValidators.alpha()] }) \r\n\tfirstName: string;\r\n\r\n}\r\n",
    "modelName": "user.model.ts",
    "jsonName": "user-data.json",
    "json": "{\"countryName\":\"Bharat\"}"
  }
}
