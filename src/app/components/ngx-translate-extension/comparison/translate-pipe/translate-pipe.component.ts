import { OnInit, Component } from '@angular/core';
import * as Diff2Html from 'diff2html';
import * as Diff from 'diff'

@Component({
  templateUrl: './translate-pipe.component.html',
})
export class TranslatePipeComponent implements OnInit {

  rightSidebarLinks: any = [{ "id": "translate-pipe", "title": "translate-pipe", "subLink": null }, { "id": "translate-pipe", "title": "translate-pipe", "subLink": null }];
  outputHtml: string;

  ngOnInit() {
    this.init();
  }

  init() {
      let ngxContent: any = "import { ChangeDetectionStrategy, ChangeDetectorRef, Component, Injectable, ViewContainerRef } from \"@angular\/core\";\r\nimport { TestBed } from \"@angular\/core\/testing\";\r\nimport { Observable, of } from \"rxjs\";\r\nimport { DefaultLangChangeEvent, LangChangeEvent, TranslateLoader, TranslateModule, TranslatePipe, TranslateService } from \"..\/src\/public_api\";\r\n\r\nclass FakeChangeDetectorRef extends ChangeDetectorRef {\r\n    markForCheck(): void {\r\n    }\r\n\r\n    detach(): void {\r\n    }\r\n\r\n    detectChanges(): void {\r\n    }\r\n\r\n    checkNoChanges(): void {\r\n    }\r\n\r\n    reattach(): void {\r\n    }\r\n}\r\n\r\n@Injectable()\r\n@Component({\r\n    selector: 'hmx-app',\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n    template: `{{'TEST' | translate}}`\r\n})\r\nclass App {\r\n    viewContainerRef: ViewContainerRef;\r\n\r\n    constructor(viewContainerRef: ViewContainerRef) {\r\n        this.viewContainerRef = viewContainerRef;\r\n    }\r\n}\r\n\r\nlet translations: any = { \"TEST\": \"This is a test\" };\r\n\r\nclass FakeLoader implements TranslateLoader {\r\n    getTranslation(lang: string): Observable<any> {\r\n        return of(translations);\r\n    }\r\n}\r\n\r\ndescribe('TranslatePipe', () => {\r\n    let translate: TranslateService;\r\n    let translatePipe: TranslatePipe;\r\n    let ref: any;\r\n\r\n    beforeEach(() => {\r\n        TestBed.configureTestingModule({\r\n            imports: [\r\n                TranslateModule.forRoot({\r\n                    loader: { provide: TranslateLoader, useClass: FakeLoader }\r\n                })\r\n            ],\r\n            declarations: [App]\r\n        });\r\n        translate = TestBed.get(TranslateService);\r\n        ref = new FakeChangeDetectorRef();\r\n        translatePipe = new TranslatePipe(translate, ref);\r\n    });\r\n\r\n    afterEach(() => {\r\n        translate = undefined;\r\n        translations = { \"TEST\": \"This is a test\" };\r\n        translatePipe = undefined;\r\n        ref = undefined;\r\n    });\r\n\r\n    it('is defined', () => {\r\n        expect(TranslatePipe).toBeDefined();\r\n        expect(translatePipe).toBeDefined();\r\n        expect(translatePipe instanceof TranslatePipe).toBeTruthy();\r\n    });\r\n\r\n    it('should translate a string', () => {\r\n        translate.setTranslation('en', { \"TEST\": \"This is a test\" });\r\n        translate.use('en');\r\n\r\n        expect(translatePipe.transform('TEST')).toEqual(\"This is a test\");\r\n    });\r\n\r\n    it('should call markForChanges when it translates a string', () => {\r\n        translate.setTranslation('en', { \"TEST\": \"This is a test\" });\r\n        translate.use('en');\r\n        spyOn(ref, 'markForCheck').and.callThrough();\r\n\r\n        translatePipe.transform('TEST');\r\n        expect(ref.markForCheck).toHaveBeenCalled();\r\n    });\r\n\r\n    it('should translate a string with object parameters', () => {\r\n        translate.setTranslation('en', { \"TEST\": \"This is a test {{param}}\" });\r\n        translate.use('en');\r\n\r\n        expect(translatePipe.transform('TEST', { param: \"with param\" })).toEqual(\"This is a test with param\");\r\n    });\r\n\r\n    it('should translate a string with object as string parameters', () => {\r\n        translate.setTranslation('en', { \"TEST\": \"This is a test {{param}}\" });\r\n        translate.use('en');\r\n\r\n        expect(translatePipe.transform('TEST', '{param: \"with param\"}')).toEqual(\"This is a test with param\");\r\n        expect(translatePipe.transform('TEST', '{\"param\": \"with param\"}')).toEqual(\"This is a test with param\");\r\n        expect(translatePipe.transform('TEST', \"{param: 'with param'}\")).toEqual(\"This is a test with param\");\r\n        expect(translatePipe.transform('TEST', \"{'param' : 'with param'}\")).toEqual(\"This is a test with param\");\r\n    });\r\n\r\n    it('should translate a string with object as multiple string parameters', () => {\r\n        translate.setTranslation('en', { \"TEST\": \"This is a test {{param1}} {{param2}}\" });\r\n        translate.use('en');\r\n\r\n        expect(translatePipe.transform('TEST', '{param1: \"with param-1\", param2: \"and param-2\"}'))\r\n            .toEqual(\"This is a test with param-1 and param-2\");\r\n        expect(translatePipe.transform('TEST', '{\"param1\": \"with param-1\", \"param2\": \"and param-2\"}'))\r\n            .toEqual(\"This is a test with param-1 and param-2\");\r\n        expect(translatePipe.transform('TEST', \"{param1: 'with param-1', param2: 'and param-2'}\"))\r\n            .toEqual(\"This is a test with param-1 and param-2\");\r\n        expect(translatePipe.transform('TEST', \"{'param1' : 'with param-1', 'param2': 'and param-2'}\"))\r\n            .toEqual(\"This is a test with param-1 and param-2\");\r\n    });\r\n\r\n    it('should translate a string with object as nested string parameters', () => {\r\n        translate.setTranslation('en', { \"TEST\": \"This is a test {{param.one}} {{param.two}}\" });\r\n        translate.use('en');\r\n\r\n        expect(translatePipe.transform('TEST', '{param: {one: \"with param-1\", two: \"and param-2\"}}'))\r\n            .toEqual(\"This is a test with param-1 and param-2\");\r\n        expect(translatePipe.transform('TEST', '{\"param\": {\"one\": \"with param-1\", \"two\": \"and param-2\"}}'))\r\n            .toEqual(\"This is a test with param-1 and param-2\");\r\n        expect(translatePipe.transform('TEST', \"{param: {one: 'with param-1', two: 'and param-2'}}\"))\r\n            .toEqual(\"This is a test with param-1 and param-2\");\r\n        expect(translatePipe.transform('TEST', \"{'param' : {'one': 'with param-1', 'two': 'and param-2'}}\"))\r\n            .toEqual(\"This is a test with param-1 and param-2\");\r\n    });\r\n\r\n    it('should update the value when the parameters change', () => {\r\n        translate.setTranslation('en', { \"TEST\": \"This is a test {{param}}\" });\r\n        translate.use('en');\r\n\r\n        spyOn(translatePipe, 'updateValue').and.callThrough();\r\n        spyOn(ref, 'markForCheck').and.callThrough();\r\n\r\n        expect(translatePipe.transform('TEST', { param: \"with param\" })).toEqual(\"This is a test with param\");\r\n        \/\/ same value, shouldn't call 'updateValue' again\r\n        expect(translatePipe.transform('TEST', { param: \"with param\" })).toEqual(\"This is a test with param\");\r\n        \/\/ different param, should call 'updateValue'\r\n        expect(translatePipe.transform('TEST', { param: \"with param2\" })).toEqual(\"This is a test with param2\");\r\n        expect(translatePipe.updateValue).toHaveBeenCalledTimes(2);\r\n        expect(ref.markForCheck).toHaveBeenCalledTimes(2);\r\n    });\r\n\r\n    it(\"should throw if you don't give an object parameter\", () => {\r\n        translate.setTranslation('en', { \"TEST\": \"This is a test {{param}}\" });\r\n        translate.use('en');\r\n        let param = 'param: \"with param\"';\r\n\r\n        expect(() => {\r\n            translatePipe.transform('TEST', param);\r\n        }).toThrowError(`Wrong parameter in TranslatePipe. Expected a valid Object, received: ${param}`);\r\n    });\r\n\r\n    it(\"should return given falsey or non length query\", () => {\r\n        translate.setTranslation('en', { \"TEST\": \"This is a test\" });\r\n        translate.use('en');\r\n\r\n        expect(translatePipe.transform(null)).toBeNull();\r\n        expect(translatePipe.transform(undefined)).toBeUndefined();\r\n        expect(translatePipe.transform(1234 as any)).toBe(1234);\r\n    });\r\n\r\n    describe('should update translations on lang change', () => {\r\n        it('with fake loader', (done) => {\r\n            translate.setTranslation('en', { \"TEST\": \"This is a test\" });\r\n            translate.setTranslation('fr', { \"TEST\": \"C'est un test\" });\r\n            translate.use('en');\r\n\r\n            expect(translatePipe.transform('TEST')).toEqual(\"This is a test\");\r\n\r\n            \/\/ this will be resolved at the next lang change\r\n            let subscription = translate.onLangChange.subscribe((res: LangChangeEvent) => {\r\n                expect(res.lang).toEqual('fr');\r\n                expect(translatePipe.transform('TEST')).toEqual(\"C'est un test\");\r\n                subscription.unsubscribe();\r\n                done();\r\n            });\r\n\r\n            translate.use('fr');\r\n        });\r\n\r\n        it('with file loader', (done) => {\r\n            translate.use('en');\r\n            expect(translatePipe.transform('TEST')).toEqual(\"This is a test\");\r\n\r\n            \/\/ this will be resolved at the next lang change\r\n            let subscription = translate.onLangChange.subscribe((res: LangChangeEvent) => {\r\n                \/\/ let it update the translations\r\n                setTimeout(() => {\r\n                    expect(res.lang).toEqual('fr');\r\n                    expect(translatePipe.transform('TEST')).toEqual(\"C'est un test\");\r\n                    subscription.unsubscribe();\r\n                    done();\r\n                });\r\n            });\r\n\r\n            translations = { \"TEST\": \"C'est un test\" };\r\n            translate.use('fr');\r\n        });\r\n\r\n        it('should detect changes with OnPush', () => {\r\n            let fixture = (<any>TestBed).createComponent(App);\r\n            fixture.detectChanges();\r\n            expect(fixture.debugElement.nativeElement.innerHTML).toEqual(\"TEST\");\r\n            translate.use('en');\r\n            fixture.detectChanges();\r\n            expect(fixture.debugElement.nativeElement.innerHTML).toEqual(\"This is a test\");\r\n        });\r\n    });\r\n\r\n    describe('should update translations on default lang change', () => {\r\n        it('with fake loader', (done) => {\r\n            translate.setTranslation('en', { \"TEST\": \"This is a test\" });\r\n            translate.setTranslation('fr', { \"TEST\": \"C'est un test\" });\r\n            translate.setDefaultLang('en');\r\n\r\n            expect(translatePipe.transform('TEST')).toEqual(\"This is a test\");\r\n\r\n            \/\/ this will be resolved at the next lang change\r\n            let subscription = translate.onDefaultLangChange.subscribe((res: DefaultLangChangeEvent) => {\r\n                expect(res.lang).toEqual('fr');\r\n                expect(translatePipe.transform('TEST')).toEqual(\"C'est un test\");\r\n                subscription.unsubscribe();\r\n                done();\r\n            });\r\n\r\n            translate.setDefaultLang('fr');\r\n        });\r\n\r\n        it('with file loader', (done) => {\r\n            translate.setDefaultLang('en');\r\n            expect(translatePipe.transform('TEST')).toEqual(\"This is a test\");\r\n\r\n            \/\/ this will be resolved at the next lang change\r\n            let subscription = translate.onDefaultLangChange.subscribe((res: DefaultLangChangeEvent) => {\r\n                \/\/ let it update the translations\r\n                setTimeout(() => {\r\n                    expect(res.lang).toEqual('fr');\r\n                    expect(translatePipe.transform('TEST')).toEqual(\"C'est un test\");\r\n                    subscription.unsubscribe();\r\n                    done();\r\n                });\r\n            });\r\n\r\n            translations = { \"TEST\": \"C'est un test\" };\r\n            translate.setDefaultLang('fr');\r\n        });\r\n\r\n        it('should detect changes with OnPush', () => {\r\n            let fixture = (<any>TestBed).createComponent(App);\r\n            fixture.detectChanges();\r\n            expect(fixture.debugElement.nativeElement.innerHTML).toEqual(\"TEST\");\r\n            translate.setDefaultLang('en');\r\n            fixture.detectChanges();\r\n            expect(fixture.debugElement.nativeElement.innerHTML).toEqual(\"This is a test\");\r\n        });\r\n    });\r\n});"
      let rxwebContent: any = "import { ChangeDetectionStrategy, ChangeDetectorRef, Component, Injectable, ViewContainerRef, ElementRef } from \"@angular\/core\";\r\nimport { TestBed } from \"@angular\/core\/testing\";\r\nimport { Observable, of } from \"rxjs\";\r\nimport { DefaultLangChangeEvent, LangChangeEvent, TranslateLoader, RequestState, TranslateModule, TranslateService, TranslatePipe } from '@rxweb\/ngx-translate-extension'\r\nimport { RxTranslateModule, RxTranslation, TranslationResolver } from '@rxweb\/translate';\r\nimport { RouterModule, ActivatedRoute } from '@angular\/router';\r\n\r\nclass MockElementRef extends ElementRef {\r\n    constructor(nodeName: string) { super(nodeName); }\r\n\r\n}\r\nclass FakeActivatedRoute {\r\n\r\n}\r\nclass FakeChangeDetectorRef extends ChangeDetectorRef {\r\n    markForCheck(): void {\r\n    }\r\n\r\n    detach(): void {\r\n    }\r\n\r\n    detectChanges(): void {\r\n    }\r\n\r\n    checkNoChanges(): void {\r\n    }\r\n\r\n    reattach(): void {\r\n    }\r\n}\r\n\r\n@Injectable()\r\n@Component({\r\n    selector: 'hmx-app',\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n    template: `{{'TEST' | translate}}`\r\n})\r\nclass App {\r\n    viewContainerRef: ViewContainerRef;\r\n\r\n    constructor(viewContainerRef: ViewContainerRef) {\r\n        this.viewContainerRef = viewContainerRef;\r\n    }\r\n}\r\n\r\nlet translations: any = { \"TEST\": \"This is a test\" };\r\n\r\nclass FakeLoader implements TranslateLoader {\r\n    getTranslation(lang: string): Observable<any> {\r\n        return of(translations);\r\n    }\r\n}\r\n\r\ndescribe('TranslatePipe', () => {\r\n    let translate: TranslateService;\r\n    let translatePipe: TranslatePipe;\r\n    let ref: any;\r\n\r\n    beforeEach(() => {\r\n        TestBed.configureTestingModule({\r\n            imports: [RouterModule,\r\n                TranslateModule.forRoot({\r\n                    loader: { provide: TranslateLoader, useClass: FakeLoader }\r\n                }),\r\n                RxTranslateModule.forRoot({\r\n                    isTest: true,\r\n                    forNgxTranslate: true,\r\n                    cacheLanguageWiseObject: true,\r\n                })\r\n            ],\r\n            providers: [{ provide: ActivatedRoute, useClass: FakeActivatedRoute }],\r\n            declarations: [App]\r\n        });\r\n        translate = TestBed.get(TranslateService);\r\n        ref = new FakeChangeDetectorRef();\r\n        translatePipe = new TranslatePipe(translate, ref, new MockElementRef(\"app-root\"), TestBed.get(RxTranslation), <any>{ component: App }, TestBed.get(RequestState), TestBed.get(TranslationResolver));\r\n    });\r\n\r\n    afterEach(() => {\r\n        translate = undefined;\r\n        translations = { \"TEST\": \"This is a test\" };\r\n        translatePipe = undefined;\r\n        ref = undefined;\r\n    });\r\n\r\n    it('is defined', () => {\r\n        expect(TranslatePipe).toBeDefined();\r\n        expect(translatePipe).toBeDefined();\r\n        expect(translatePipe instanceof TranslatePipe).toBeTruthy();\r\n    });\r\n\r\n    it('should translate a string', () => {\r\n        translate.setTranslation('en', { \"TEST\": \"This is a test\" });\r\n        translate.use('en');\r\n\r\n        expect(translatePipe.transform('TEST')).toEqual(\"This is a test\");\r\n    });\r\n\r\n    it('should call markForChanges when it translates a string', () => {\r\n        translate.setTranslation('en', { \"TEST\": \"This is a test\" });\r\n        translate.use('en');\r\n        spyOn(ref, 'markForCheck').and.callThrough();\r\n\r\n        translatePipe.transform('TEST');\r\n        expect(ref.markForCheck).toHaveBeenCalled();\r\n    });\r\n\r\n    it('should translate a string with object parameters', () => {\r\n        translate.setTranslation('en', { \"TEST\": \"This is a test {{param}}\" });\r\n        translate.use('en');\r\n\r\n        expect(translatePipe.transform('TEST', { param: \"with param\" })).toEqual(\"This is a test with param\");\r\n    });\r\n\r\n    it('should translate a string with object as string parameters', () => {\r\n        translate.setTranslation('en', { \"TEST\": \"This is a test {{param}}\" });\r\n        translate.use('en');\r\n\r\n        expect(translatePipe.transform('TEST', '{param: \"with param\"}')).toEqual(\"This is a test with param\");\r\n        expect(translatePipe.transform('TEST', '{\"param\": \"with param\"}')).toEqual(\"This is a test with param\");\r\n        expect(translatePipe.transform('TEST', \"{param: 'with param'}\")).toEqual(\"This is a test with param\");\r\n        expect(translatePipe.transform('TEST', \"{'param' : 'with param'}\")).toEqual(\"This is a test with param\");\r\n    });\r\n\r\n    it('should translate a string with object as multiple string parameters', () => {\r\n        translate.setTranslation('en', { \"TEST\": \"This is a test {{param1}} {{param2}}\" });\r\n        translate.use('en');\r\n\r\n        expect(translatePipe.transform('TEST', '{param1: \"with param-1\", param2: \"and param-2\"}'))\r\n            .toEqual(\"This is a test with param-1 and param-2\");\r\n        expect(translatePipe.transform('TEST', '{\"param1\": \"with param-1\", \"param2\": \"and param-2\"}'))\r\n            .toEqual(\"This is a test with param-1 and param-2\");\r\n        expect(translatePipe.transform('TEST', \"{param1: 'with param-1', param2: 'and param-2'}\"))\r\n            .toEqual(\"This is a test with param-1 and param-2\");\r\n        expect(translatePipe.transform('TEST', \"{'param1' : 'with param-1', 'param2': 'and param-2'}\"))\r\n            .toEqual(\"This is a test with param-1 and param-2\");\r\n    });\r\n\r\n    it('should translate a string with object as nested string parameters', () => {\r\n        translate.setTranslation('en', { \"TEST\": \"This is a test {{param.one}} {{param.two}}\" });\r\n        translate.use('en');\r\n\r\n        expect(translatePipe.transform('TEST', '{param: {one: \"with param-1\", two: \"and param-2\"}}'))\r\n            .toEqual(\"This is a test with param-1 and param-2\");\r\n        expect(translatePipe.transform('TEST', '{\"param\": {\"one\": \"with param-1\", \"two\": \"and param-2\"}}'))\r\n            .toEqual(\"This is a test with param-1 and param-2\");\r\n        expect(translatePipe.transform('TEST', \"{param: {one: 'with param-1', two: 'and param-2'}}\"))\r\n            .toEqual(\"This is a test with param-1 and param-2\");\r\n        expect(translatePipe.transform('TEST', \"{'param' : {'one': 'with param-1', 'two': 'and param-2'}}\"))\r\n            .toEqual(\"This is a test with param-1 and param-2\");\r\n    });\r\n\r\n    it('should update the value when the parameters change', () => {\r\n        translate.setTranslation('en', { \"TEST\": \"This is a test {{param}}\" });\r\n        translate.use('en');\r\n\r\n        spyOn(translatePipe, 'updateValue').and.callThrough();\r\n        spyOn(ref, 'markForCheck').and.callThrough();\r\n\r\n        expect(translatePipe.transform('TEST', { param: \"with param\" })).toEqual(\"This is a test with param\");\r\n        \/\/ same value, shouldn't call 'updateValue' again\r\n        expect(translatePipe.transform('TEST', { param: \"with param\" })).toEqual(\"This is a test with param\");\r\n        \/\/ different param, should call 'updateValue'\r\n        expect(translatePipe.transform('TEST', { param: \"with param2\" })).toEqual(\"This is a test with param2\");\r\n        expect(translatePipe.updateValue).toHaveBeenCalledTimes(2);\r\n        expect(ref.markForCheck).toHaveBeenCalledTimes(2);\r\n    });\r\n\r\n    it(\"should throw if you don't give an object parameter\", () => {\r\n        translate.setTranslation('en', { \"TEST\": \"This is a test {{param}}\" });\r\n        translate.use('en');\r\n        let param = 'param: \"with param\"';\r\n\r\n        expect(() => {\r\n            translatePipe.transform('TEST', param);\r\n        }).toThrowError(`Wrong parameter in TranslatePipe. Expected a valid Object, received: ${param}`);\r\n    });\r\n\r\n    it(\"should return given falsey or non length query\", () => {\r\n        translate.setTranslation('en', { \"TEST\": \"This is a test\" });\r\n        translate.use('en');\r\n\r\n        expect(translatePipe.transform(null)).toBeNull();\r\n        expect(translatePipe.transform(undefined)).toBeUndefined();\r\n        expect(translatePipe.transform(1234 as any)).toBe(1234);\r\n    });\r\n\r\n    describe('should update translations on lang change', () => {\r\n        it('with fake loader', (done) => {\r\n            translate.setTranslation('en', { \"TEST\": \"This is a test\" });\r\n            translate.setTranslation('fr', { \"TEST\": \"C'est un test\" });\r\n            translate.use('en');\r\n\r\n            expect(translatePipe.transform('TEST')).toEqual(\"This is a test\");\r\n\r\n            \/\/ this will be resolved at the next lang change\r\n            let subscription = translate.onLangChange.subscribe((res: LangChangeEvent) => {\r\n                expect(res.lang).toEqual('fr');\r\n                expect(translatePipe.transform('TEST')).toEqual(\"C'est un test\");\r\n                subscription.unsubscribe();\r\n                done();\r\n            });\r\n\r\n            translate.use('fr');\r\n        });\r\n\r\n        it('with file loader', (done) => {\r\n            translate.use('en');\r\n            expect(translatePipe.transform('TEST')).toEqual(\"This is a test\");\r\n\r\n            \/\/ this will be resolved at the next lang change\r\n            let subscription = translate.onLangChange.subscribe((res: LangChangeEvent) => {\r\n                \/\/ let it update the translations\r\n                setTimeout(() => {\r\n                    expect(res.lang).toEqual('fr');\r\n                    expect(translatePipe.transform('TEST')).toEqual(\"C'est un test\");\r\n                    subscription.unsubscribe();\r\n                    done();\r\n                });\r\n            });\r\n\r\n            translations = { \"TEST\": \"C'est un test\" };\r\n            translate.use('fr');\r\n        });\r\n\r\n        it('should detect changes with OnPush', () => {\r\n            let fixture = (<any>TestBed).createComponent(App);\r\n            fixture.detectChanges();\r\n            expect(fixture.debugElement.nativeElement.innerHTML).toEqual(\"TEST\");\r\n            translate.use('en');\r\n            fixture.detectChanges();\r\n            expect(fixture.debugElement.nativeElement.innerHTML).toEqual(\"This is a test\");\r\n        });\r\n    });\r\n\r\n    describe('should update translations on default lang change', () => {\r\n        it('with fake loader', (done) => {\r\n            translate.setTranslation('en', { \"TEST\": \"This is a test\" });\r\n            translate.setTranslation('fr', { \"TEST\": \"C'est un test\" });\r\n            translate.setDefaultLang('en');\r\n\r\n            expect(translatePipe.transform('TEST')).toEqual(\"This is a test\");\r\n\r\n            \/\/ this will be resolved at the next lang change\r\n            let subscription = translate.onDefaultLangChange.subscribe((res: DefaultLangChangeEvent) => {\r\n                expect(res.lang).toEqual('fr');\r\n                expect(translatePipe.transform('TEST')).toEqual(\"C'est un test\");\r\n                subscription.unsubscribe();\r\n                done();\r\n            });\r\n\r\n            translate.setDefaultLang('fr');\r\n        });\r\n\r\n        it('with file loader', (done) => {\r\n            translate.setDefaultLang('en');\r\n            expect(translatePipe.transform('TEST')).toEqual(\"This is a test\");\r\n\r\n            \/\/ this will be resolved at the next lang change\r\n            let subscription = translate.onDefaultLangChange.subscribe((res: DefaultLangChangeEvent) => {\r\n                \/\/ let it update the translations\r\n                setTimeout(() => {\r\n                    expect(res.lang).toEqual('fr');\r\n                    expect(translatePipe.transform('TEST')).toEqual(\"C'est un test\");\r\n                    subscription.unsubscribe();\r\n                    done();\r\n                });\r\n            });\r\n\r\n            translations = { \"TEST\": \"C'est un test\" };\r\n            translate.setDefaultLang('fr');\r\n        });\r\n\r\n        it('should detect changes with OnPush', () => {\r\n            let fixture = (<any>TestBed).createComponent(App);\r\n            fixture.detectChanges();\r\n            expect(fixture.debugElement.nativeElement.innerHTML).toEqual(\"TEST\");\r\n            translate.setDefaultLang('en');\r\n            fixture.detectChanges();\r\n            expect(fixture.debugElement.nativeElement.innerHTML).toEqual(\"This is a test\");\r\n        });\r\n    });\r\n});"

    var diff = Diff.createTwoFilesPatch("ngx-translate/translate.pipe.spec.ts", "rxweb/translate.pipe.spec.ts", ngxContent, rxwebContent);

    let outputHtml = Diff2Html.html(diff, {
      drawFileList: true, matching: 'lines', outputFormat: 'side-by-side'
    });
    this.outputHtml = outputHtml;
  }
}
