import { OnInit, Component } from '@angular/core';
import * as Diff2Html from 'diff2html';
import * as Diff from 'diff'

@Component({
  templateUrl: './translate-directive.component.html',
})
export class TranslateDirectiveComponent implements OnInit {

  rightSidebarLinks: any = [{ "id": "translate-directive", "title": "translate-directive", "subLink": null }, { "id": "translate-directive", "title": "translate-directive", "subLink": null }];
  outputHtml: string;

  ngOnInit() {
    this.init();
  }

  init() {
      let ngxContent: any = "import { ChangeDetectionStrategy, Component, ElementRef, Injectable, ViewChild, ViewContainerRef } from '@angular\/core';\r\nimport { ComponentFixture, TestBed } from '@angular\/core\/testing';\r\nimport { TranslateModule, TranslateService } from '..\/src\/public_api';\r\n\r\n@Injectable()\r\n@Component({\r\n    selector: 'hmx-app',\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n    template: `\r\n    <div #noKey translate>TEST<\/div>\r\n    <div #contentAsKey translate>TEST.VALUE<\/div>\r\n    <div #withKey [translate]=\"'TEST'\">Some init content<\/div>\r\n    <div #noContent [translate]=\"'TEST'\"><\/div>\r\n    <div #withOtherElements translate>TEST1 <span>Hey<\/span> TEST2<\/div>\r\n    <div #withParams [translate]=\"'TEST'\" [translateParams]=\"value\">Some init content<\/div>\r\n    <div #withParamsNoKey translate [translateParams]=\"value\">TEST<\/div>\r\n    <div #leadingSpaceNoKeyNoParams translate> TEST<\/div>\r\n    <div #trailingSpaceNoKeyNoParams translate>TEST <\/div>\r\n    <div #withSpaceAndLineBreakNoKeyNoParams translate>\r\n      TEST\r\n    <\/div>\r\n  `\r\n})\r\nclass App {\r\n    viewContainerRef: ViewContainerRef;\r\n    @ViewChild('noKey', { static: true }) noKey: ElementRef;\r\n    @ViewChild('contentAsKey', { static: true }) contentAsKey: ElementRef;\r\n    @ViewChild('withKey', { static: true }) withKey: ElementRef;\r\n    @ViewChild('withOtherElements', { static: true }) withOtherElements: ElementRef;\r\n    @ViewChild('withParams', { static: true }) withParams: ElementRef;\r\n    @ViewChild('withParamsNoKey', { static: true }) withParamsNoKey: ElementRef;\r\n    @ViewChild('noContent', { static: true }) noContent: ElementRef;\r\n    @ViewChild('leadingSpaceNoKeyNoParams') leadingSpaceNoKeyNoParams: ElementRef;\r\n    @ViewChild('trailingSpaceNoKeyNoParams') trailingSpaceNoKeyNoParams: ElementRef;\r\n    @ViewChild('withSpaceAndLineBreakNoKeyNoParams') withSpaceAndLineBreakNoKeyNoParams: ElementRef;\r\n    value = { value: 'ok' };\r\n\r\n    constructor(viewContainerRef: ViewContainerRef) {\r\n        this.viewContainerRef = viewContainerRef;\r\n    }\r\n}\r\n\r\ndescribe('TranslateDirective', () => {\r\n    let translate: TranslateService;\r\n    let fixture: ComponentFixture<App>;\r\n\r\n    beforeEach(() => {\r\n        TestBed.configureTestingModule({\r\n            imports: [\r\n                TranslateModule.forRoot()\r\n            ],\r\n            declarations: [App]\r\n        });\r\n        translate = TestBed.inject(TranslateService);\r\n\r\n        fixture = (<any>TestBed).createComponent(App);\r\n        fixture.detectChanges();\r\n    });\r\n\r\n    afterEach(() => {\r\n        translate = undefined;\r\n        fixture = undefined;\r\n    });\r\n\r\n    it('should translate a string using the container value', () => {\r\n        expect(fixture.componentInstance.noKey.nativeElement.innerHTML).toEqual('TEST');\r\n\r\n        translate.setTranslation('en', { \"TEST\": \"This is a test\" });\r\n        translate.use('en');\r\n\r\n        expect(fixture.componentInstance.noKey.nativeElement.innerHTML).toEqual('This is a test');\r\n    });\r\n\r\n    it('should translate a string using the container value as a key', () => {\r\n        expect(fixture.componentInstance.contentAsKey.nativeElement.innerHTML).toEqual('TEST.VALUE');\r\n\r\n        translate.setTranslation('en', { \"TEST\": { \"VALUE\": \"This is a test\" } });\r\n        translate.use('en');\r\n\r\n        expect(fixture.componentInstance.contentAsKey.nativeElement.innerHTML).toEqual('This is a test');\r\n    });\r\n\r\n    it('should translate a string using the key value', () => {\r\n        \/\/ replace the content with the key\r\n        expect(fixture.componentInstance.withKey.nativeElement.innerHTML).toEqual('TEST');\r\n\r\n        translate.setTranslation('en', { \"TEST\": \"This is a test\" });\r\n        translate.use('en');\r\n\r\n        expect(fixture.componentInstance.withKey.nativeElement.innerHTML).toEqual('This is a test');\r\n    });\r\n\r\n    it('should translate first child strings with elements in the middle', () => {\r\n        \/\/ replace the content with the key\r\n        expect(fixture.componentInstance.withOtherElements.nativeElement.innerHTML).toEqual('TEST1 <span>Hey<\/span> TEST2');\r\n\r\n        translate.setTranslation('en', { \"TEST1\": \"Awesome\", \"TEST2\": \"it works\" });\r\n        translate.use('en');\r\n\r\n        expect(fixture.componentInstance.withOtherElements.nativeElement.innerHTML).toEqual('Awesome <span>Hey<\/span> it works');\r\n    });\r\n\r\n    it('should translate first child strings without recursion', () => {\r\n        \/\/ replace the content with the key\r\n        expect(fixture.componentInstance.withOtherElements.nativeElement.innerHTML).toEqual('TEST1 <span>Hey<\/span> TEST2');\r\n\r\n        translate.setTranslation('en', { \"TEST1\": \"TEST2\", \"TEST2\": \"it works\" });\r\n        translate.use('en');\r\n\r\n        expect(fixture.componentInstance.withOtherElements.nativeElement.innerHTML).toEqual('TEST2 <span>Hey<\/span> it works');\r\n    });\r\n\r\n    it('should translate a string with params and a key', () => {\r\n        \/\/ replace the content with the key\r\n        expect(fixture.componentInstance.withParams.nativeElement.innerHTML).toEqual('TEST');\r\n\r\n        translate.setTranslation('en', { \"TEST\": \"It is {{value}}\" });\r\n        translate.use('en');\r\n\r\n        expect(fixture.componentInstance.withParams.nativeElement.innerHTML).toEqual('It is ok');\r\n    });\r\n\r\n    it('should translate a string with params and no key', () => {\r\n        \/\/ replace the content with the key\r\n        expect(fixture.componentInstance.withParamsNoKey.nativeElement.innerHTML).toEqual('TEST');\r\n\r\n        translate.setTranslation('en', { \"TEST\": \"It is {{value}}\" });\r\n        translate.use('en');\r\n\r\n        expect(fixture.componentInstance.withParamsNoKey.nativeElement.innerHTML).toEqual('It is ok');\r\n    });\r\n\r\n    it('should update the translation when params change', () => {\r\n        \/\/ replace the content with the key\r\n        expect(fixture.componentInstance.withParams.nativeElement.innerHTML).toEqual('TEST');\r\n        expect(fixture.componentInstance.withParamsNoKey.nativeElement.innerHTML).toEqual('TEST');\r\n\r\n        translate.setTranslation('en', { \"TEST\": \"It is {{value}}\" });\r\n        translate.use('en');\r\n\r\n        expect(fixture.componentInstance.withParams.nativeElement.innerHTML).toEqual('It is ok');\r\n        expect(fixture.componentInstance.withParamsNoKey.nativeElement.innerHTML).toEqual('It is ok');\r\n        fixture.componentInstance.value = { value: 'changed' };\r\n        fixture.detectChanges();\r\n\r\n        expect(fixture.componentInstance.withParams.nativeElement.innerHTML).toEqual('It is changed');\r\n        expect(fixture.componentInstance.withParamsNoKey.nativeElement.innerHTML).toEqual('It is changed');\r\n    });\r\n\r\n    it('should update the DOM when the lang changes and the translation key starts with space', () => {\r\n        expect(fixture.componentInstance.leadingSpaceNoKeyNoParams.nativeElement.innerHTML).toEqual(' TEST');\r\n\r\n        const en = \"This is a test - with leading spaces in translation key\";\r\n        const fr = \"C'est un test - avec un espace de t\u00EAte dans la cl\u00E9 de traduction\";\r\n        const leadingSpaceFromKey = ' ';\r\n        translate.setTranslation('en', { \"TEST\": en });\r\n        translate.setTranslation('fr', { \"TEST\": fr });\r\n\r\n        translate.use('en');\r\n        expect(fixture.componentInstance.leadingSpaceNoKeyNoParams.nativeElement.innerHTML).toEqual(leadingSpaceFromKey + en);\r\n\r\n        translate.use('fr');\r\n        expect(fixture.componentInstance.leadingSpaceNoKeyNoParams.nativeElement.innerHTML).toEqual(leadingSpaceFromKey + fr);\r\n    });\r\n\r\n    it('should update the DOM when the lang changes and the translation key has line breaks and spaces', () => {\r\n        expect(fixture.componentInstance.withSpaceAndLineBreakNoKeyNoParams.nativeElement.innerHTML).toEqual(' TEST ');\r\n\r\n        const en = \"This is a test - with trailing spaces in translation key\";\r\n        const fr = \"C'est un test - avec un espace de fuite dans la cl\u00E9 de traduction\";\r\n        const whiteSpaceFromKey = ' ';\r\n        translate.setTranslation('en', { \"TEST\": en });\r\n        translate.setTranslation('fr', { \"TEST\": fr });\r\n\r\n        translate.use('en');\r\n        expect(fixture.componentInstance.withSpaceAndLineBreakNoKeyNoParams.nativeElement.innerHTML).toEqual(whiteSpaceFromKey + en + whiteSpaceFromKey);\r\n\r\n        translate.use('fr');\r\n        expect(fixture.componentInstance.withSpaceAndLineBreakNoKeyNoParams.nativeElement.innerHTML).toEqual(whiteSpaceFromKey + fr + whiteSpaceFromKey);\r\n    });\r\n\r\n    it('should update the DOM when the lang changes and the translation key ends with space', () => {\r\n        expect(fixture.componentInstance.trailingSpaceNoKeyNoParams.nativeElement.innerHTML).toEqual('TEST ');\r\n\r\n        const en = \"This is a test - with spaces and line breaks in translation key\";\r\n        const fr = \"C'est un test - avec des espaces et sauts de lignes dans la cl\u00E9 de traduction\";\r\n        const trailingSpaceFromKey = ' ';\r\n        translate.setTranslation('en', { \"TEST\": en });\r\n        translate.setTranslation('fr', { \"TEST\": fr });\r\n\r\n        translate.use('en');\r\n        expect(fixture.componentInstance.trailingSpaceNoKeyNoParams.nativeElement.innerHTML).toEqual(en + trailingSpaceFromKey);\r\n\r\n        translate.use('fr');\r\n        expect(fixture.componentInstance.trailingSpaceNoKeyNoParams.nativeElement.innerHTML).toEqual(fr + trailingSpaceFromKey);\r\n    });\r\n\r\n    it('should update the DOM when the lang changes', () => {\r\n        expect(fixture.componentInstance.noKey.nativeElement.innerHTML).toEqual('TEST');\r\n        expect(fixture.componentInstance.withParams.nativeElement.innerHTML).toEqual('TEST');\r\n        expect(fixture.componentInstance.noContent.nativeElement.innerHTML).toEqual('TEST');\r\n\r\n        translate.setTranslation('en', { \"TEST\": \"This is a test\" });\r\n        translate.setTranslation('fr', { \"TEST\": \"C'est un test\" });\r\n\r\n        translate.use('en');\r\n        expect(fixture.componentInstance.noKey.nativeElement.innerHTML).toEqual('This is a test');\r\n        expect(fixture.componentInstance.withParams.nativeElement.innerHTML).toEqual('This is a test');\r\n        expect(fixture.componentInstance.noContent.nativeElement.innerHTML).toEqual('This is a test');\r\n\r\n        translate.use('fr');\r\n        expect(fixture.componentInstance.noKey.nativeElement.innerHTML).toEqual(\"C'est un test\");\r\n        expect(fixture.componentInstance.withParams.nativeElement.innerHTML).toEqual(\"C'est un test\");\r\n        expect(fixture.componentInstance.noContent.nativeElement.innerHTML).toEqual(\"C'est un test\");\r\n    });\r\n\r\n    it('should update the DOM when the lang changes and the translation ends with space', () => {\r\n        expect(fixture.componentInstance.noKey.nativeElement.innerHTML).toEqual('TEST');\r\n        expect(fixture.componentInstance.withParams.nativeElement.innerHTML).toEqual('TEST');\r\n        expect(fixture.componentInstance.noContent.nativeElement.innerHTML).toEqual('TEST');\r\n\r\n        const en = \"  This is a test - with spaces \";\r\n        const fr = \"  C'est un test - avec espaces \";\r\n\r\n        translate.setTranslation('en', { \"TEST\": en });\r\n        translate.setTranslation('fr', { \"TEST\": fr });\r\n\r\n        translate.use('en');\r\n        expect(fixture.componentInstance.noKey.nativeElement.innerHTML).toEqual(`${en}`);\r\n        expect(fixture.componentInstance.withParams.nativeElement.innerHTML).toEqual(en);\r\n        expect(fixture.componentInstance.noContent.nativeElement.innerHTML).toEqual(en);\r\n\r\n        translate.use('fr');\r\n        expect(fixture.componentInstance.noKey.nativeElement.innerHTML).toEqual(`${fr}`);\r\n        expect(fixture.componentInstance.withParams.nativeElement.innerHTML).toEqual(fr);\r\n        expect(fixture.componentInstance.noContent.nativeElement.innerHTML).toEqual(fr);\r\n    });\r\n\r\n    it('should update the DOM when the default lang changes', () => {\r\n        expect(fixture.componentInstance.noKey.nativeElement.innerHTML).toEqual('TEST');\r\n\r\n        translate.setTranslation('en', { \"TEST\": \"This is a test\" });\r\n        translate.setTranslation('fr', { \"TEST\": \"C'est un test\" });\r\n        translate.setDefaultLang('en');\r\n        expect(fixture.componentInstance.noKey.nativeElement.innerHTML).toEqual('This is a test');\r\n\r\n        translate.setDefaultLang('fr');\r\n        expect(fixture.componentInstance.noKey.nativeElement.innerHTML).toEqual(\"C'est un test\");\r\n    });\r\n\r\n    it('should unsubscribe from lang change subscription on destroy', () => {\r\n        expect(fixture.componentInstance.withParamsNoKey.nativeElement.innerHTML).toEqual('TEST');\r\n\r\n        fixture.destroy();\r\n\r\n        translate.setTranslation('en', { \"TEST\": \"This is a test\" });\r\n        translate.use('en');\r\n\r\n        expect(fixture.componentInstance.withParamsNoKey.nativeElement.innerHTML).toEqual('TEST');\r\n    });\r\n\r\n    it('should unsubscribe from default lang change subscription on destroy', () => {\r\n        expect(fixture.componentInstance.withParamsNoKey.nativeElement.innerHTML).toEqual('TEST');\r\n\r\n        fixture.destroy();\r\n\r\n        translate.setTranslation('en', { \"TEST\": \"This is a test\" });\r\n        translate.setDefaultLang('en');\r\n\r\n        expect(fixture.componentInstance.withParamsNoKey.nativeElement.innerHTML).toEqual('TEST');\r\n    });\r\n});"
      let rxwebContent: any = "import { ChangeDetectionStrategy, Component, ElementRef, Injectable, ViewChild, ViewContainerRef } from '@angular\/core';\r\nimport { ComponentFixture, TestBed } from '@angular\/core\/testing';\r\nimport { TranslateModule, TranslateService } from '@rxweb\/ngx-translate-extension'\r\nimport { RxTranslateModule } from \"@rxweb\/translate\"\r\n\r\n@Injectable()\r\n@Component({\r\n    selector: 'hmx-app',\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n    template: `\r\n    <div #noKey translate>TEST<\/div>\r\n    <div #contentAsKey translate>TEST.VALUE<\/div>\r\n    <div #withKey [translate]=\"'TEST'\">Some init content<\/div>\r\n    <div #noContent [translate]=\"'TEST'\"><\/div>\r\n    <div #withOtherElements translate>TEST1 <span>Hey<\/span> TEST2<\/div>\r\n    <div #withParams [translate]=\"'TEST'\" [translateParams]=\"value\">Some init content<\/div>\r\n    <div #withParamsNoKey translate [translateParams]=\"value\">TEST<\/div>\r\n    <div #leadingSpaceNoKeyNoParams translate> TEST<\/div>\r\n    <div #trailingSpaceNoKeyNoParams translate>TEST <\/div>\r\n    <div #withSpaceAndLineBreakNoKeyNoParams translate>\r\n      TEST\r\n    <\/div>\r\n  `\r\n})\r\nclass App {\r\n    viewContainerRef: ViewContainerRef;\r\n    @ViewChild('noKey', { static: true }) noKey: ElementRef;\r\n    @ViewChild('contentAsKey', { static: true }) contentAsKey: ElementRef;\r\n    @ViewChild('withKey', { static: true }) withKey: ElementRef;\r\n    @ViewChild('withOtherElements', { static: true }) withOtherElements: ElementRef;\r\n    @ViewChild('withParams', { static: true }) withParams: ElementRef;\r\n    @ViewChild('withParamsNoKey', { static: true }) withParamsNoKey: ElementRef;\r\n    @ViewChild('noContent', { static: true }) noContent: ElementRef;\r\n    @ViewChild('leadingSpaceNoKeyNoParams', { static: false}) leadingSpaceNoKeyNoParams: ElementRef;\r\n    @ViewChild('trailingSpaceNoKeyNoParams', { static: false }) trailingSpaceNoKeyNoParams: ElementRef;\r\n    @ViewChild('withSpaceAndLineBreakNoKeyNoParams', { static: false }) withSpaceAndLineBreakNoKeyNoParams: ElementRef;\r\n    value = { value: 'ok' };\r\n\r\n    constructor(viewContainerRef: ViewContainerRef) {\r\n        this.viewContainerRef = viewContainerRef;\r\n    }\r\n}\r\n\r\ndescribe('TranslateDirective', () => {\r\n    let translate: TranslateService;\r\n    let fixture: ComponentFixture<App>;\r\n\r\n    beforeEach(() => {\r\n        TestBed.configureTestingModule({\r\n            imports: [\r\n                TranslateModule.forRoot()\r\n                , RxTranslateModule.forRoot({\r\n                    isTest: true,\r\n                    forNgxTranslate: true,\r\n                    cacheLanguageWiseObject: true,\r\n                })\r\n            ],\r\n            declarations: [App]\r\n        });\r\n        translate = TestBed.get(TranslateService);\r\n\r\n        fixture = (<any>TestBed).createComponent(App);\r\n        fixture.detectChanges();\r\n    });\r\n\r\n    afterEach(() => {\r\n        translate = undefined;\r\n        fixture = undefined;\r\n    });\r\n\r\n    it('should translate a string using the container value', () => {\r\n        expect(fixture.componentInstance.noKey.nativeElement.innerHTML).toEqual('TEST');\r\n\r\n        translate.setTranslation('en', { \"TEST\": \"This is a test\" });\r\n        translate.use('en');\r\n\r\n        expect(fixture.componentInstance.noKey.nativeElement.innerHTML).toEqual('This is a test');\r\n    });\r\n\r\n    it('should translate a string using the container value as a key', () => {\r\n        expect(fixture.componentInstance.contentAsKey.nativeElement.innerHTML).toEqual('TEST.VALUE');\r\n\r\n        translate.setTranslation('en', { \"TEST\": { \"VALUE\": \"This is a test\" } });\r\n        translate.use('en');\r\n\r\n        expect(fixture.componentInstance.contentAsKey.nativeElement.innerHTML).toEqual('This is a test');\r\n    });\r\n\r\n    it('should translate a string using the key value', () => {\r\n        \/\/ replace the content with the key\r\n        expect(fixture.componentInstance.withKey.nativeElement.innerHTML).toEqual('TEST');\r\n\r\n        translate.setTranslation('en', { \"TEST\": \"This is a test\" });\r\n        translate.use('en');\r\n\r\n        expect(fixture.componentInstance.withKey.nativeElement.innerHTML).toEqual('This is a test');\r\n    });\r\n\r\n    it('should translate first child strings with elements in the middle', () => {\r\n        \/\/ replace the content with the key\r\n        expect(fixture.componentInstance.withOtherElements.nativeElement.innerHTML).toEqual('TEST1 <span>Hey<\/span> TEST2');\r\n\r\n        translate.setTranslation('en', { \"TEST1\": \"Awesome\", \"TEST2\": \"it works\" });\r\n        translate.use('en');\r\n\r\n        expect(fixture.componentInstance.withOtherElements.nativeElement.innerHTML).toEqual('Awesome <span>Hey<\/span> it works');\r\n    });\r\n\r\n    it('should translate first child strings without recursion', () => {\r\n        \/\/ replace the content with the key\r\n        expect(fixture.componentInstance.withOtherElements.nativeElement.innerHTML).toEqual('TEST1 <span>Hey<\/span> TEST2');\r\n\r\n        translate.setTranslation('en', { \"TEST1\": \"TEST2\", \"TEST2\": \"it works\" });\r\n        translate.use('en');\r\n\r\n        expect(fixture.componentInstance.withOtherElements.nativeElement.innerHTML).toEqual('TEST2 <span>Hey<\/span> it works');\r\n    });\r\n\r\n    it('should translate a string with params and a key', () => {\r\n        \/\/ replace the content with the key\r\n        expect(fixture.componentInstance.withParams.nativeElement.innerHTML).toEqual('TEST');\r\n\r\n        translate.setTranslation('en', { \"TEST\": \"It is {{value}}\" });\r\n        translate.use('en');\r\n\r\n        expect(fixture.componentInstance.withParams.nativeElement.innerHTML).toEqual('It is ok');\r\n    });\r\n\r\n    it('should translate a string with params and no key', () => {\r\n        \/\/ replace the content with the key\r\n        expect(fixture.componentInstance.withParamsNoKey.nativeElement.innerHTML).toEqual('TEST');\r\n\r\n        translate.setTranslation('en', { \"TEST\": \"It is {{value}}\" });\r\n        translate.use('en');\r\n\r\n        expect(fixture.componentInstance.withParamsNoKey.nativeElement.innerHTML).toEqual('It is ok');\r\n    });\r\n\r\n    it('should update the translation when params change', () => {\r\n        \/\/ replace the content with the key\r\n        expect(fixture.componentInstance.withParams.nativeElement.innerHTML).toEqual('TEST');\r\n        expect(fixture.componentInstance.withParamsNoKey.nativeElement.innerHTML).toEqual('TEST');\r\n\r\n        translate.setTranslation('en', { \"TEST\": \"It is {{value}}\" });\r\n        translate.use('en');\r\n\r\n        expect(fixture.componentInstance.withParams.nativeElement.innerHTML).toEqual('It is ok');\r\n        expect(fixture.componentInstance.withParamsNoKey.nativeElement.innerHTML).toEqual('It is ok');\r\n        fixture.componentInstance.value = { value: 'changed' };\r\n        fixture.detectChanges();\r\n\r\n        expect(fixture.componentInstance.withParams.nativeElement.innerHTML).toEqual('It is changed');\r\n        expect(fixture.componentInstance.withParamsNoKey.nativeElement.innerHTML).toEqual('It is changed');\r\n    });\r\n\r\n    it('should update the DOM when the lang changes and the translation key starts with space', () => {\r\n        expect(fixture.componentInstance.leadingSpaceNoKeyNoParams.nativeElement.innerHTML).toEqual(' TEST');\r\n\r\n        const en = \"This is a test - with leading spaces in translation key\";\r\n        const fr = \"C'est un test - avec un espace de t\u00EAte dans la cl\u00E9 de traduction\";\r\n        const leadingSpaceFromKey = ' ';\r\n        translate.setTranslation('en', { \"TEST\": en });\r\n        translate.setTranslation('fr', { \"TEST\": fr });\r\n\r\n        translate.use('en');\r\n        expect(fixture.componentInstance.leadingSpaceNoKeyNoParams.nativeElement.innerHTML).toEqual(leadingSpaceFromKey + en);\r\n\r\n        translate.use('fr');\r\n        expect(fixture.componentInstance.leadingSpaceNoKeyNoParams.nativeElement.innerHTML).toEqual(leadingSpaceFromKey + fr);\r\n    });\r\n\r\n    it('should update the DOM when the lang changes and the translation key has line breaks and spaces', () => {\r\n        expect(fixture.componentInstance.withSpaceAndLineBreakNoKeyNoParams.nativeElement.innerHTML).toEqual(' TEST ');\r\n\r\n        const en = \"This is a test - with trailing spaces in translation key\";\r\n        const fr = \"C'est un test - avec un espace de fuite dans la cl\u00E9 de traduction\";\r\n        const whiteSpaceFromKey = ' ';\r\n        translate.setTranslation('en', { \"TEST\": en });\r\n        translate.setTranslation('fr', { \"TEST\": fr });\r\n\r\n        translate.use('en');\r\n        expect(fixture.componentInstance.withSpaceAndLineBreakNoKeyNoParams.nativeElement.innerHTML).toEqual(whiteSpaceFromKey + en + whiteSpaceFromKey);\r\n\r\n        translate.use('fr');\r\n        expect(fixture.componentInstance.withSpaceAndLineBreakNoKeyNoParams.nativeElement.innerHTML).toEqual(whiteSpaceFromKey + fr + whiteSpaceFromKey);\r\n    });\r\n\r\n    it('should update the DOM when the lang changes and the translation key ends with space', () => {\r\n        expect(fixture.componentInstance.trailingSpaceNoKeyNoParams.nativeElement.innerHTML).toEqual('TEST ');\r\n\r\n        const en = \"This is a test - with spaces and line breaks in translation key\";\r\n        const fr = \"C'est un test - avec des espaces et sauts de lignes dans la cl\u00E9 de traduction\";\r\n        const trailingSpaceFromKey = ' ';\r\n        translate.setTranslation('en', { \"TEST\": en });\r\n        translate.setTranslation('fr', { \"TEST\": fr });\r\n\r\n        translate.use('en');\r\n        expect(fixture.componentInstance.trailingSpaceNoKeyNoParams.nativeElement.innerHTML).toEqual(en + trailingSpaceFromKey);\r\n\r\n        translate.use('fr');\r\n        expect(fixture.componentInstance.trailingSpaceNoKeyNoParams.nativeElement.innerHTML).toEqual(fr + trailingSpaceFromKey);\r\n    });\r\n\r\n    it('should update the DOM when the lang changes', () => {\r\n        expect(fixture.componentInstance.noKey.nativeElement.innerHTML).toEqual('TEST');\r\n        expect(fixture.componentInstance.withParams.nativeElement.innerHTML).toEqual('TEST');\r\n        expect(fixture.componentInstance.noContent.nativeElement.innerHTML).toEqual('TEST');\r\n\r\n        translate.setTranslation('en', { \"TEST\": \"This is a test\" });\r\n        translate.setTranslation('fr', { \"TEST\": \"C'est un test\" });\r\n\r\n        translate.use('en');\r\n        expect(fixture.componentInstance.noKey.nativeElement.innerHTML).toEqual('This is a test');\r\n        expect(fixture.componentInstance.withParams.nativeElement.innerHTML).toEqual('This is a test');\r\n        expect(fixture.componentInstance.noContent.nativeElement.innerHTML).toEqual('This is a test');\r\n\r\n        translate.use('fr');\r\n        expect(fixture.componentInstance.noKey.nativeElement.innerHTML).toEqual(\"C'est un test\");\r\n        expect(fixture.componentInstance.withParams.nativeElement.innerHTML).toEqual(\"C'est un test\");\r\n        expect(fixture.componentInstance.noContent.nativeElement.innerHTML).toEqual(\"C'est un test\");\r\n    });\r\n\r\n    it('should update the DOM when the lang changes and the translation ends with space', () => {\r\n        expect(fixture.componentInstance.noKey.nativeElement.innerHTML).toEqual('TEST');\r\n        expect(fixture.componentInstance.withParams.nativeElement.innerHTML).toEqual('TEST');\r\n        expect(fixture.componentInstance.noContent.nativeElement.innerHTML).toEqual('TEST');\r\n\r\n        const en = \"  This is a test - with spaces \";\r\n        const fr = \"  C'est un test - avec espaces \";\r\n\r\n        translate.setTranslation('en', { \"TEST\": en });\r\n        translate.setTranslation('fr', { \"TEST\": fr });\r\n\r\n        translate.use('en');\r\n        expect(fixture.componentInstance.noKey.nativeElement.innerHTML).toEqual(`${en}`);\r\n        expect(fixture.componentInstance.withParams.nativeElement.innerHTML).toEqual(en);\r\n        expect(fixture.componentInstance.noContent.nativeElement.innerHTML).toEqual(en);\r\n\r\n        translate.use('fr');\r\n        expect(fixture.componentInstance.noKey.nativeElement.innerHTML).toEqual(`${fr}`);\r\n        expect(fixture.componentInstance.withParams.nativeElement.innerHTML).toEqual(fr);\r\n        expect(fixture.componentInstance.noContent.nativeElement.innerHTML).toEqual(fr);\r\n    });\r\n\r\n    it('should update the DOM when the default lang changes', () => {\r\n        expect(fixture.componentInstance.noKey.nativeElement.innerHTML).toEqual('TEST');\r\n\r\n        translate.setTranslation('en', { \"TEST\": \"This is a test\" });\r\n        translate.setTranslation('fr', { \"TEST\": \"C'est un test\" });\r\n        translate.setDefaultLang('en');\r\n        expect(fixture.componentInstance.noKey.nativeElement.innerHTML).toEqual('This is a test');\r\n\r\n        translate.setDefaultLang('fr');\r\n        expect(fixture.componentInstance.noKey.nativeElement.innerHTML).toEqual(\"C'est un test\");\r\n    });\r\n\r\n    it('should unsubscribe from lang change subscription on destroy', () => {\r\n        expect(fixture.componentInstance.withParamsNoKey.nativeElement.innerHTML).toEqual('TEST');\r\n\r\n        fixture.destroy();\r\n\r\n        translate.setTranslation('en', { \"TEST\": \"This is a test\" });\r\n        translate.use('en');\r\n\r\n        expect(fixture.componentInstance.withParamsNoKey.nativeElement.innerHTML).toEqual('TEST');\r\n    });\r\n\r\n    it('should unsubscribe from default lang change subscription on destroy', () => {\r\n        expect(fixture.componentInstance.withParamsNoKey.nativeElement.innerHTML).toEqual('TEST');\r\n\r\n        fixture.destroy();\r\n\r\n        translate.setTranslation('en', { \"TEST\": \"This is a test\" });\r\n        translate.setDefaultLang('en');\r\n\r\n        expect(fixture.componentInstance.withParamsNoKey.nativeElement.innerHTML).toEqual('TEST');\r\n    });\r\n});"

    var diff = Diff.createTwoFilesPatch("translate.directive.spec.ts", "translate.directive.spec.ts", ngxContent, rxwebContent);

    let outputHtml = Diff2Html.html(diff, {
      drawFileList: false, matching: 'lines', outputFormat: 'side-by-side'
    });
    this.outputHtml = outputHtml;
  }
}
