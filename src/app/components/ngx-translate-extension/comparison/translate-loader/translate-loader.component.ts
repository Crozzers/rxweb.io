import { OnInit, Component } from '@angular/core';
import * as Diff2Html from 'diff2html';
import * as Diff from 'diff'

@Component({
  templateUrl: './translate-loader.component.html',
})
export class TranslateLoaderComponent implements OnInit {

  rightSidebarLinks: any = [{ "id": "translate-loader", "title": "translate-loader", "subLink": null }, { "id": "translate-loader", "title": "translate-loader", "subLink": null }];
  outputHtml: string;

  ngOnInit() {
    this.init();
  }

  init() {
    let ngxContent: any = "import { TestBed } from \"@angular\/core\/testing\";\r\nimport { Observable, of } from \"rxjs\";\r\nimport { TranslateLoader, TranslateModule, TranslateService } from \"..\/src\/public_api\";\r\n\r\nlet translations: any = { \"TEST\": \"This is a test\" };\r\n\r\nclass FakeLoader implements TranslateLoader {\r\n  getTranslation(lang: string): Observable<any> {\r\n    return of(translations);\r\n  }\r\n}\r\n\r\ndescribe('TranslateLoader', () => {\r\n  let translate: TranslateService;\r\n\r\n  it('should be able to provide TranslateStaticLoader', () => {\r\n    TestBed.configureTestingModule({\r\n      imports: [\r\n        TranslateModule.forRoot({\r\n          loader: { provide: TranslateLoader, useClass: FakeLoader }\r\n        })\r\n      ],\r\n    });\r\n    translate = TestBed.get(TranslateService);\r\n\r\n    expect(translate).toBeDefined();\r\n    expect(translate.currentLoader).toBeDefined();\r\n    expect(translate.currentLoader instanceof FakeLoader).toBeTruthy();\r\n\r\n    \/\/ the lang to use, if the lang isn't available, it will use the current loader to get them\r\n    translate.use('en');\r\n\r\n    \/\/ this will request the translation from the backend because we use a static files loader for TranslateService\r\n    translate.get('TEST').subscribe((res: string) => {\r\n      expect(res).toEqual('This is a test');\r\n    });\r\n  });\r\n\r\n  it('should be able to provide any TranslateLoader', () => {\r\n    class CustomLoader implements TranslateLoader {\r\n      getTranslation(lang: string): Observable<any> {\r\n        return of({ \"TEST\": \"This is also a test\" });\r\n      }\r\n    }\r\n\r\n    TestBed.configureTestingModule({\r\n      imports: [\r\n        TranslateModule.forRoot({\r\n          loader: { provide: TranslateLoader, useClass: CustomLoader }\r\n        })\r\n      ]\r\n    });\r\n    translate = TestBed.get(TranslateService);\r\n\r\n    expect(translate).toBeDefined();\r\n    expect(translate.currentLoader).toBeDefined();\r\n    expect(translate.currentLoader instanceof CustomLoader).toBeTruthy();\r\n\r\n    \/\/ the lang to use, if the lang isn't available, it will use the current loader to get them\r\n    translate.use('en');\r\n\r\n    \/\/ this will request the translation from the CustomLoader\r\n    translate.get('TEST').subscribe((res: string) => {\r\n      expect(res).toEqual('This is also a test');\r\n    });\r\n  });\r\n\r\n});"
    let rxwebContent: any = "import { TestBed } from \"@angular\/core\/testing\";\r\nimport { Observable, of } from \"rxjs\";\r\nimport { TranslateLoader } from \"@ngx-translate\/core\";\r\nimport { TranslateModule, TranslateService } from '@rxweb\/ngx-translate-extension'\r\nimport { RxTranslateModule } from '@rxweb\/translate';\r\nlet translations: any = { \"TEST\": \"This is a test\" };\r\n\r\nclass FakeLoader implements TranslateLoader {\r\n  getTranslation(lang: string): Observable<any> {\r\n    return of(translations);\r\n  }\r\n}\r\n\r\ndescribe('TranslateLoader', () => {\r\n  let translate: TranslateService;\r\n\r\n  it('should be able to provide TranslateStaticLoader', () => {\r\n    TestBed.configureTestingModule({\r\n      imports: [\r\n        TranslateModule.forRoot({\r\n          loader: FakeLoader\r\n        }),\r\n        RxTranslateModule.forRoot({\r\n          isTest: true,\r\n          forNgxTranslate: true,\r\n          cacheLanguageWiseObject: true,\r\n        })\r\n      ],\r\n    });\r\n    translate = TestBed.get(TranslateService);\r\n\r\n    expect(translate).toBeDefined();\r\n    expect(translate.customLoader).toBeDefined();\r\n\r\n    expect(translate.customLoader instanceof FakeLoader).toBeTruthy();\r\n\r\n    \/\/ the lang to use, if the lang isn't available, it will use the current loader to get them\r\n    translate.use('en');\r\n\r\n    \/\/ this will request the translation from the backend because we use a static files loader for TranslateService\r\n    translate.get('TEST').subscribe((res: string) => {\r\n      expect(res).toEqual('This is a test');\r\n    });\r\n  });\r\n\r\n  it('should be able to provide any TranslateLoader', () => {\r\n    class CustomLoader implements TranslateLoader {\r\n      getTranslation(lang: string): Observable<any> {\r\n        return of({ \"TEST\": \"This is also a test\" });\r\n      }\r\n    }\r\n\r\n    TestBed.configureTestingModule({\r\n      imports: [\r\n        TranslateModule.forRoot({\r\n          loader: CustomLoader\r\n        }),\r\n        RxTranslateModule.forRoot({\r\n          isTest: true,\r\n          forNgxTranslate: true,\r\n          cacheLanguageWiseObject: true,\r\n        })\r\n      ]\r\n    });\r\n    translate = TestBed.get(TranslateService);\r\n\r\n    expect(translate).toBeDefined();\r\n    expect(translate.customLoader).toBeDefined();\r\n    expect(translate.customLoader instanceof CustomLoader).toBeTruthy();\r\n\r\n    \/\/ the lang to use, if the lang isn't available, it will use the current loader to get them\r\n    translate.use('en');\r\n\r\n    \/\/ this will request the translation from the CustomLoader\r\n    translate.get('TEST').subscribe((res: string) => {\r\n      expect(res).toEqual('This is also a test');\r\n    });\r\n  });\r\n\r\n});"

    var diff = Diff.createTwoFilesPatch("ngx-translate/translate.loader.spec.ts", "rxweb/translate.loader.spec.ts", ngxContent, rxwebContent);

    let outputHtml = Diff2Html.html(diff, {
      drawFileList: true, matching: 'lines', outputFormat: 'side-by-side'
    });
    this.outputHtml = outputHtml;
  }
}