import { OnInit, Component } from '@angular/core';
import * as Diff2Html from 'diff2html';
import * as Diff from 'diff'

@Component({
  templateUrl: './translate-loader.component.html',
})
export class TranslateLoaderComponent implements OnInit {

  rightSidebarLinks: any = [{ "id": "translate-loader", "title": "translate-loader", "subLink": null }, { "id": "translate-loader", "title": "translate-loader", "subLink": null }];
  outputHtml: string;

  ngOnInit() {
    this.init();
  }

  init() {
    let ngxContent: any = "import { TranslateDefaultParser, TranslateParser } from '..\/src\/public_api';\r\n\r\ndescribe('Parser', () => {\r\n    let parser: TranslateParser;\r\n\r\n    beforeEach(() => {\r\n        parser = new TranslateDefaultParser();\r\n    });\r\n\r\n    it('is defined', () => {\r\n        expect(TranslateParser).toBeDefined();\r\n\r\n        expect(parser instanceof TranslateParser).toBeTruthy();\r\n    });\r\n\r\n    it('should interpolate strings', () => {\r\n        expect(parser.interpolate(\"This is a {{ key }}\", { key: \"value\" })).toEqual(\"This is a value\");\r\n    });\r\n\r\n    it('should interpolate strings with falsy values', () => {\r\n        expect(parser.interpolate(\"This is a {{ key }}\", { key: \"\" })).toEqual(\"This is a \");\r\n        expect(parser.interpolate(\"This is a {{ key }}\", { key: 0 })).toEqual(\"This is a 0\");\r\n    });\r\n\r\n    it('should interpolate strings with object properties', () => {\r\n        expect(parser.interpolate(\"This is a {{ key1.key2 }}\", { key1: { key2: \"value2\" } })).toEqual(\"This is a value2\");\r\n        expect(parser.interpolate(\"This is a {{ key1.key2.key3 }}\", { key1: { key2: { key3: \"value3\" } } })).toEqual(\"This is a value3\");\r\n    });\r\n\r\n    it('should support interpolation functions', () => {\r\n        expect(parser.interpolate((v: string) => v.toUpperCase() + ' YOU!', 'bless')).toBe('BLESS YOU!');\r\n    });\r\n\r\n    it('should get the addressed value', () => {\r\n        expect(parser.getValue({ key1: { key2: \"value2\" } }, 'key1.key2')).toEqual(\"value2\");\r\n        expect(parser.getValue({ key1: { key2: \"value\" } }, 'keyWrong.key2')).not.toBeDefined();\r\n        expect(parser.getValue({ key1: { key2: { key3: \"value3\" } } }, 'key1.key2.key3')).toEqual(\"value3\");\r\n        expect(parser.getValue({ key1: { key2: { key3: \"value3\" } } }, 'key1.keyWrong.key3')).not.toBeDefined();\r\n        expect(parser.getValue({ key1: { key2: { key3: \"value3\" } } }, 'key1.key2.keyWrong')).not.toBeDefined();\r\n\r\n\r\n        expect(parser.getValue({ 'key1.key2': { key3: \"value3\" } }, 'key1.key2.key3')).toEqual(\"value3\");\r\n        expect(parser.getValue({ key1: { 'key2.key3': \"value3\" } }, 'key1.key2.key3')).toEqual(\"value3\");\r\n        expect(parser.getValue({ 'key1.key2.key3': \"value3\" }, 'key1.key2.key3')).toEqual(\"value3\");\r\n        expect(parser.getValue({ 'key1.key2': { key3: \"value3\" } }, 'key1.key2.keyWrong')).not.toBeDefined();\r\n        expect(parser.getValue({\r\n            'key1': \"value1\",\r\n            'key1.key2': \"value2\"\r\n        }, 'key1.key2')).toEqual(\"value2\");\r\n\r\n    });\r\n});"
    let rxwebContent: any = "import { TestBed } from \"@angular\/core\/testing\";\r\nimport { Observable, of } from \"rxjs\";\r\nimport { TranslateLoader, TranslateModule, TranslateService } from '@rxweb\/ngx-translate-extension'\r\nimport { RxTranslateModule } from '@rxweb\/translate';\r\nlet translations: any = { \"TEST\": \"This is a test\" };\r\n\r\nclass FakeLoader implements TranslateLoader {\r\n    getTranslation(lang: string): Observable<any> {\r\n        return of(translations);\r\n    }\r\n}\r\n\r\ndescribe('TranslateLoader', () => {\r\n    let translate: TranslateService;\r\n\r\n    it('should be able to provide TranslateStaticLoader', () => {\r\n        TestBed.configureTestingModule({\r\n            imports: [\r\n                TranslateModule.forRoot({\r\n                    loader: { provide: TranslateLoader, useClass: FakeLoader }\r\n                })\r\n                , RxTranslateModule.forRoot({\r\n                    isTest: true,\r\n                    forNgxTranslate: true,\r\n                    cacheLanguageWiseObject: true,\r\n                })\r\n            ],\r\n        });\r\n        translate = TestBed.get(TranslateService);\r\n\r\n        expect(translate).toBeDefined();\r\n        expect(translate.customLoader).toBeDefined();\r\n        \r\n        expect(translate.customLoader instanceof FakeLoader).toBeTruthy();\r\n\r\n        \/\/ the lang to use, if the lang isn't available, it will use the current loader to get them\r\n        translate.use('en');\r\n\r\n        \/\/ this will request the translation from the backend because we use a static files loader for TranslateService\r\n        translate.get('TEST').subscribe((res: string) => {\r\n            expect(res).toEqual('This is a test');\r\n        });\r\n    });\r\n\r\n    it('should be able to provide any TranslateLoader', () => {\r\n        class CustomLoader implements TranslateLoader {\r\n            getTranslation(lang: string): Observable<any> {\r\n                return of({ \"TEST\": \"This is also a test\" });\r\n            }\r\n        }\r\n\r\n        TestBed.configureTestingModule({\r\n            imports: [\r\n                TranslateModule.forRoot({\r\n                    loader: { provide: TranslateLoader, useClass: CustomLoader }\r\n                })\r\n                , RxTranslateModule.forRoot({\r\n                    isTest: true,\r\n                    forNgxTranslate: true,\r\n                    cacheLanguageWiseObject: true,\r\n                })\r\n            ]\r\n        });\r\n        translate = TestBed.get(TranslateService);\r\n\r\n        expect(translate).toBeDefined();\r\n        expect(translate.customLoader).toBeDefined();\r\n        expect(translate.customLoader instanceof CustomLoader).toBeTruthy();\r\n\r\n        \/\/ the lang to use, if the lang isn't available, it will use the current loader to get them\r\n        translate.use('en');\r\n\r\n        \/\/ this will request the translation from the CustomLoader\r\n        translate.get('TEST').subscribe((res: string) => {\r\n            expect(res).toEqual('This is also a test');\r\n        });\r\n    });\r\n\r\n});"

    var diff = Diff.createTwoFilesPatch("@ngx-translate", "@ngx-translate", ngxContent, rxwebContent);

    let outputHtml = Diff2Html.html(diff, {
      drawFileList: false, matching: 'lines', outputFormat: 'side-by-side'
    });
    this.outputHtml = outputHtml;
    var nameTitle = this.outputHtml.substring(476, 525);

    this.outputHtml = this.outputHtml.replace(nameTitle, nameTitle += '<span class="d2h-file-name float-comparison-right">@rxweb/ngx-translate-extension</span> <a class="pl-1" href="https://github.com/rxweb/rxweb/blob/master/client-side/angular/test/ngx-translate-extension/translate.loader.spec.ts"><i class="fa fa-github" aria-hidden="true"></i></a>');
    var gitlink = this.outputHtml.substring(476,525);
    this.outputHtml = this.outputHtml.replace(gitlink, gitlink+=`<a class="pl-1" href="https://github.com/ngx-translate/core/blob/master/projects/ngx-translate/core/tests/translate.loader.spec.ts"><i class="fa fa-github" aria-hidden="true"></i></a>`)
  }
}
