{
    "static": {
        "notes": "ui-bindings",
        "component": "import { Component, OnInit } from \"@angular/core\";\r\nimport { DynamicFormBuildConfig, DynamicFormConfiguration, RxDynamicFormBuilder } from \"@rxweb/reactive-dynamic-forms\";\r\n\r\n@Component({\r\n    selector: 'app-dropdown-static',\r\n    templateUrl: './dropdown-static.component.html'\r\n})\r\n\r\n\r\nexport class DropdownStaticComponent implements OnInit {\r\n    serverData: Array<{ [key: string]: any }> = [{\r\n        name: \"gender\",\r\n        type: \"select\",\r\n        source: [{ value: 1, text: \"Male\" },{ value: 2, text: \"Female\" }],\r\n        ui: {\r\n            label: 'Country',\r\n            placeholder: 'Select',\r\n        }\r\n    }]\r\n    uiBindings: string[] = [\"gender\"];\r\n    dynamicFormBuildConfig: DynamicFormBuildConfig;\r\n    constructor(private formBuilder: RxDynamicFormBuilder) { }\r\n    ngOnInit() {\r\n        this.dynamicFormBuildConfig = this.formBuilder.formGroup(this.serverData, {});\r\n    }\r\n}",
        "html": "<form [formGroup]=\"dynamicFormBuildConfig.formGroup\">\r\n    <div viewMode=\"basic\" [rxwebDynamicForm]=\"dynamicFormBuildConfig\" [uiBindings]=\"uiBindings\"></div>\r\n</form>\r\n<pre>country: {{dynamicFormBuildConfig.formGroup.controls.country.value}}</pre>\r\n<pre>state: {{dynamicFormBuildConfig.formGroup.controls.state.value}}</pre>",
        "model": null,
        "modelName": null,
        "json": {}
    },
    "cascading": {
        "notes": "ui-bindings",
        "component": "import { Component, OnInit } from \"@angular/core\";\r\nimport { DynamicFormBuildConfig, DynamicFormConfiguration, RxDynamicFormBuilder } from \"@rxweb/reactive-dynamic-forms\";\r\nimport { SourceAsyncConditionalModel } from \"./source\";\r\n\r\n@Component({\r\n    selector: 'app-dropdown-cascading',\r\n    templateUrl: './dropdown-cascading.component.html'\r\n})\r\n\r\nexport class DropdownCascadingComponent implements OnInit {\r\n    serverData: Array<{ [key: string]: any }> = [\r\n        {\r\n          name: \"country\",\r\n          type: \"select\",\r\n          source: [{ text: \"India\", value: 1 }, { text: \"US\", value: 2 }],\r\n          ui: {\r\n            label: 'Country',\r\n            placeholder: 'Select',\r\n          }\r\n        },\r\n        {\r\n          name: \"state\",\r\n          modelName: 'sourceSync',\r\n          type: \"select\",\r\n          filter: [\r\n            { text: \"Gujarat\", value: 1, countryId: 1 },\r\n            { text: \"Delhi\", value: 2, countryId: 1 },\r\n            { text: \"NY\", value: 3, countryId: 2 }\r\n          ],\r\n          ui: {\r\n            label: 'State',\r\n            placeholder: 'Select'\r\n          }\r\n        }\r\n      ]\r\n    uiBindings: string[] = [\"country\", \"state\"];\r\n    dynamicFormBuildConfig: DynamicFormBuildConfig;\r\n    dynamicFormConfiguration: DynamicFormConfiguration;\r\n    constructor(private formBuilder: RxDynamicFormBuilder) { }\r\n    ngOnInit() {\r\n        this.dynamicFormConfiguration = {\r\n          controlConfigModels: [{ modelName: 'sourceAsync', model: SourceAsyncConditionalModel }],\r\n        }\r\n        this.dynamicFormBuildConfig = this.formBuilder.formGroup(this.serverData, this.dynamicFormConfiguration);\r\n      }\r\n}",
        "html": "<form [formGroup]=\"dynamicFormBuildConfig.formGroup\">\r\n    <div viewMode=\"basic\" [rxwebDynamicForm]=\"dynamicFormBuildConfig\" [uiBindings]=\"uiBindings\"></div>\r\n</form>",
        "model": "import { FormControlConfig } from \"@rxweb/reactive-dynamic-forms\"\r\n\r\nexport class SourceAsyncConditionalModel extends FormControlConfig{\r\n    filter() {\r\n        let promise = new Promise<any>((resolve, reject) => {\r\n            let source = [{ text: \"Gujarat\", value: 1, countryId: 1 }, { text: \"Delhi\", value: 2, countryId: 1 }, { text: \"NY\", value: 3, countryId: 2 }]\r\n            this.source = source.filter(t => t.countryId == this.controlsConfig.country.value);\r\n        });\r\n    }\r\n}",
        "modelName": "source.ts",
        "json": {}
    },
    "value": {
        "notes": "ui-bindings",
        "component": "import { Component,OnInit } from \"@angular/core\";\r\nimport { DynamicFormBuildConfig, DynamicFormConfiguration, RxDynamicFormBuilder } from \"@rxweb/reactive-dynamic-forms\";\r\n\r\n@Component({\r\n    selector: 'app-dropdown-value',\r\n    templateUrl: './dropdown-value.component.html'\r\n})\r\n\r\n\r\nexport class DropdownValueComponent implements OnInit {\r\n    serverData: Array<{ [key: string]: any }> = [{        \r\n            name: \"department\",\r\n            type: \"select\",\r\n            source: [{ departmentId: 1, departmentName: \"Dotnet\" },{ departmentId: 2, departmentName: \"php\" },{ departmentId: 2, departmentName: \"Android\" }],\r\n            textPropName: 'departmentId',\r\n            valuePropName: 'departmentName',\r\n            ui: {\r\n                label: 'Department',\r\n                placeholder: 'Select',\r\n                            \r\n            }\r\n    }]\r\n    uiBindings:string[] = [\"department\"];\r\n    dynamicFormBuildConfig: DynamicFormBuildConfig;\r\n    constructor(private formBuilder: RxDynamicFormBuilder) { }\r\n    ngOnInit()\r\n    {\r\n        this.dynamicFormBuildConfig = this.formBuilder.formGroup(this.serverData, {});\r\n    }\r\n}",
        "html": "<form [formGroup]=\\\"dynamicFormBuildConfig.formGroup\\\">\\r\\n    <div viewMode=\\\"basic\\\" [rxwebDynamicForm]=\\\"dynamicFormBuildConfig\\\" [uiBindings]=\\\"uiBindings\\\"></div>\\r\\n</form>\\r\\n<pre>department: {{dynamicFormBuildConfig.formGroup.controls.department.value}}</pre>",
        "model": null,
        "modelName": null,
        "json": {}
    },
    "multiselect": {
        "notes": "ui-bindings",
        "component": "import { Component, OnInit } from \"@angular/core\";\r\nimport { DynamicFormBuildConfig, DynamicFormConfiguration, RxDynamicFormBuilder } from \"@rxweb/reactive-dynamic-forms\";\r\n\r\n@Component({\r\n    selector: 'app-dropdown-multiselect',\r\n    templateUrl: './dropdown-multiselect.component.html'\r\n})\r\n\r\n\r\nexport class DropdownMultiselectComponent implements OnInit {\r\n    serverData: Array<{ [key: string]: any }> = [{\r\n        name: \"hobbies\",\r\n        type: \"select\",\r\n        source: [{ value: 1, text: \"Singing\" },{ value: 2, text: \"Dancing\" }, { value: 3, text: \"Travelling\" }, { value: 4, text: \"Cooking\" }],\r\n        multiselect: true,\r\n        ui: {\r\n            label: 'Hobbies',\r\n        }\r\n    }]\r\n    uiBindings: string[] = [\"hobbies\"];\r\n    dynamicFormBuildConfig: DynamicFormBuildConfig;\r\n    constructor(private formBuilder: RxDynamicFormBuilder) { }\r\n    ngOnInit() {\r\n        this.dynamicFormBuildConfig = this.formBuilder.formGroup(this.serverData, {});\r\n    }\r\n}",
        "html": "<form [formGroup]=\"dynamicFormBuildConfig.formGroup\">\r\n    <div viewMode=\"basic\" [rxwebDynamicForm]=\"dynamicFormBuildConfig\" [uiBindings]=\"uiBindings\"></div>\r\n</form>\r\n<pre>hobbies: {{dynamicFormBuildConfig.formGroup.controls.hobbies.value}}</pre>",
        "model": null,
        "modelName": null,
        "json": {}
    }
}